<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Emacs con esteroides - bash]]></title>
<description><![CDATA[Emacs con esteroides - bash]]></description>
<link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI//tag-bash.html</link>
<lastBuildDate>Thu, 24 Apr 2025 07:32:52 +0200</lastBuildDate>
<item>
  <title><![CDATA[Gestión de Contraseñas Fuertes con Emacs: Seguridad Digital para el Usuario Exigente]]></title>
  <description><![CDATA[
<div id="outline-container-orgf1a3259" class="outline-2">
<h2 id="orgf1a3259">Introducción</h2>
<div class="outline-text-2" id="text-orgf1a3259">
<p>
En la era digital actual, donde las brechas de seguridad y los robos de datos son cada vez más comunes, la importancia de contar con contraseñas fuertes se ha convertido en un pilar fundamental de nuestra seguridad en línea. Como usuarios avanzados de Emacs, tenemos a nuestra disposición un potente entorno que puede ayudarnos no solo a crear contraseñas robustas, sino también a gestionar todo nuestro sistema de autenticación de manera eficiente y segura.
</p>

<p>
Este artículo explorará en profundidad la creación y gestión de contraseñas fuertes, analizando tanto las ventajas como los inconvenientes de diferentes enfoques, y proporcionará soluciones prácticas basadas en Emacs y scripts de Bash que potenciarán significativamente nuestra seguridad digital.
</p>
</div>
</div>
<div id="outline-container-org335ef5c" class="outline-2">
<h2 id="org335ef5c">¿Qué hace que una contraseña sea fuerte?</h2>
<div class="outline-text-2" id="text-org335ef5c">
<p>
Antes de adentrarnos en las herramientas y métodos de generación, es esencial comprender qué características definen a una contraseña como "fuerte":
</p>
</div>
<div id="outline-container-orgd6071ca" class="outline-3">
<h3 id="orgd6071ca">Complejidad</h3>
<div class="outline-text-3" id="text-orgd6071ca">
<p>
Una contraseña verdaderamente robusta debe incluir:
</p>

<ul class="org-ul">
<li>Letras mayúsculas y minúsculas</li>
<li>Números</li>
<li>Símbolos especiales (@, #, $, %, etc.)</li>
<li>Sin palabras reconocibles del diccionario</li>
<li>Sin patrones obvios (como "123456" o "qwerty")</li>
</ul>
</div>
</div>
<div id="outline-container-org054634e" class="outline-3">
<h3 id="org054634e">Longitud</h3>
<div class="outline-text-3" id="text-org054634e">
<p>
La longitud es posiblemente el factor más importante:
</p>

<ul class="org-ul">
<li>Las contraseñas de 8 caracteres ya no se consideran seguras</li>
<li>El estándar actual recomienda un mínimo de 12 caracteres</li>
<li>Para información crítica, 16 o más caracteres es lo recomendable</li>
</ul>
</div>
</div>
<div id="outline-container-org98ee97f" class="outline-3">
<h3 id="org98ee97f">Aleatoriedad</h3>
<div class="outline-text-3" id="text-org98ee97f">
<p>
La verdadera seguridad proviene de la aleatoriedad:
</p>

<ul class="org-ul">
<li>Las contraseñas generadas aleatoriamente son exponencialmente más seguras</li>
<li>La aleatoriedad humana es predecible y sigue patrones inconscientes</li>
<li>Las herramientas de generación algorítmica ofrecen aleatorización real</li>
</ul>
</div>
</div>
<div id="outline-container-orgd227748" class="outline-3">
<h3 id="orgd227748">Unicidad</h3>
<div class="outline-text-3" id="text-orgd227748">
<p>
Cada servicio o cuenta debe tener una contraseña única:
</p>

<ul class="org-ul">
<li>La reutilización de contraseñas es el error más común y peligroso</li>
<li>Una brecha en un servicio no debería comprometer otras cuentas</li>
<li>La gestión de múltiples contraseñas requiere sistemas organización</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org1bb63b4" class="outline-2">
<h2 id="org1bb63b4">Ventajas de las contraseñas fuertes</h2>
<div class="outline-text-2" id="text-org1bb63b4">
<p>
Las contraseñas robustas proporcionan numerosos beneficios que van más allá de la simple protección de acceso:
</p>
</div>
<div id="outline-container-orgd24cb2f" class="outline-3">
<h3 id="orgd24cb2f">Resistencia a ataques de fuerza bruta</h3>
<div class="outline-text-3" id="text-orgd24cb2f">
<p>
Los ataques de fuerza bruta consisten en probar sistemáticamente todas las combinaciones posibles hasta encontrar la correcta. Una contraseña fuerte:
</p>

<ul class="org-ul">
<li>Aumenta exponencialmente el tiempo necesario para descifrarla</li>
<li>Puede requerir años o incluso siglos de procesamiento computacional</li>
<li>Hace que el ataque sea prácticamente inviable por su costo computacional</li>
</ul>
</div>
</div>
<div id="outline-container-org2db1c3b" class="outline-3">
<h3 id="org2db1c3b">Protección contra ataques de diccionario</h3>
<div class="outline-text-3" id="text-org2db1c3b">
<p>
Estos ataques prueban palabras comunes y sus variaciones:
</p>

<ul class="org-ul">
<li>Las contraseñas aleatorias no aparecen en diccionarios</li>
<li>La mezcla de caracteres especiales complica estos ataques</li>
<li>La ausencia de palabras reconocibles elimina puntos de entrada lógicos</li>
</ul>
</div>
</div>
<div id="outline-container-orgb15f61f" class="outline-3">
<h3 id="orgb15f61f">Defensa ante ingeniería social</h3>
<div class="outline-text-3" id="text-orgb15f61f">
<p>
Muchos ataques se basan en información personal fácilmente obtenible:
</p>

<ul class="org-ul">
<li>Las contraseñas generadas aleatoriamente no contienen información personal</li>
<li>Los atacantes no pueden deducirlas a partir de datos públicos</li>
<li>Se elimina la vulnerabilidad asociada a fechas, nombres o preferencias personales</li>
</ul>
</div>
</div>
<div id="outline-container-org88937e9" class="outline-3">
<h3 id="org88937e9">Mayor tiempo de protección</h3>
<div class="outline-text-3" id="text-org88937e9">
<p>
Las contraseñas fuertes permanecen seguras por más tiempo:
</p>

<ul class="org-ul">
<li>Resisten avances en capacidad computacional</li>
<li>Se mantienen vigentes incluso si las técnicas de ataque mejoran</li>
<li>Proporcionan un margen de seguridad ante la evolución tecnológica</li>
</ul>
</div>
</div>
<div id="outline-container-org3d533a1" class="outline-3">
<h3 id="org3d533a1">Cumplimiento de políticas de seguridad</h3>
<div class="outline-text-3" id="text-org3d533a1">
<p>
Las organizaciones y servicios tienen requisitos cada vez más estrictos:
</p>

<ul class="org-ul">
<li>Las contraseñas robustas suelen cumplir automáticamente estas políticas</li>
<li>Se evitan problemas de compatibilidad con sistemas corporativos o gubernamentales</li>
<li>Se facilita el cumplimiento normativo en entornos regulados</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgc3ba9eb" class="outline-2">
<h2 id="orgc3ba9eb">Inconvenientes de las contraseñas fuertes</h2>
<div class="outline-text-2" id="text-orgc3ba9eb">
<p>
Sin embargo, la implementación de contraseñas robustas también presenta algunos desafíos:
</p>
</div>
<div id="outline-container-org968fac3" class="outline-3">
<h3 id="org968fac3">Dificultad para memorizarlas</h3>
<div class="outline-text-3" id="text-org968fac3">
<p>
El principal inconveniente es la memorización:
</p>

<ul class="org-ul">
<li>Las contraseñas aleatorias complejas son difíciles de recordar</li>
<li>Tener múltiples contraseñas diferentes aumenta esta dificultad</li>
<li>La complejidad puede llevar al usuario a anotar las contraseñas físicamente</li>
</ul>
</div>
</div>
<div id="outline-container-org0655afd" class="outline-3">
<h3 id="org0655afd">Riesgo de pérdida de acceso</h3>
<div class="outline-text-3" id="text-org0655afd">
<p>
Si se olvida una contraseña compleja:
</p>

<ul class="org-ul">
<li>Los procesos de recuperación pueden ser complicados</li>
<li>Algunos sistemas podrían quedar inaccesibles permanentemente</li>
<li>La frustración podría llevar a crear respaldos inseguros</li>
</ul>
</div>
</div>
<div id="outline-container-org18c1ca5" class="outline-3">
<h3 id="org18c1ca5">Problemas de compatibilidad</h3>
<div class="outline-text-3" id="text-org18c1ca5">
<p>
No todos los sistemas aceptan contraseñas muy complejas:
</p>

<ul class="org-ul">
<li>Algunos servicios limitan los caracteres especiales permitidos</li>
<li>Ciertos sistemas imponen límites de longitud máxima</li>
<li>Plataformas legacy podrían tener restricciones técnicas</li>
</ul>
</div>
</div>
<div id="outline-container-orgd3857d8" class="outline-3">
<h3 id="orgd3857d8">Inconvenientes prácticos</h3>
<div class="outline-text-3" id="text-orgd3857d8">
<p>
El uso diario presenta desafíos adicionales:
</p>

<ul class="org-ul">
<li>Escribir contraseñas complejas puede ser tedioso, especialmente en dispositivos móviles</li>
<li>La introducción manual aumenta el riesgo de errores tipográficos</li>
<li>Los cambios frecuentes de contraseña multiplican estos problemas</li>
</ul>
</div>
</div>
<div id="outline-container-orgf3b94dc" class="outline-3">
<h3 id="orgf3b94dc">Fricción con la experiencia de usuario</h3>
<div class="outline-text-3" id="text-orgf3b94dc">
<p>
La seguridad excesiva puede afectar la usabilidad:
</p>

<ul class="org-ul">
<li>Puede aumentar el tiempo de acceso a los servicios</li>
<li>Podría generar frustración en usuarios menos técnicos</li>
<li>El equilibrio entre seguridad y conveniencia es delicado</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org6727e7d" class="outline-2">
<h2 id="org6727e7d">Generación de contraseñas fuertes con Bash</h2>
<div class="outline-text-2" id="text-org6727e7d">
<p>
Una solución pragmática para generar contraseñas robustas es utilizar scripts de Bash en sistemas Unix/Linux. A continuación, presentamos un script completo que permite generar contraseñas altamente seguras con diferentes configuraciones:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #4E4E4E; font-style: italic;">#</span><span style="color: #4E4E4E; font-style: italic;">!/bin/</span><span style="color: #D70000;">bash</span>
<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">strong-password-generator.sh - Generador de contrase&#241;as seguras</span>
<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Autor: Emacs con Esteroides</span>
<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Fecha: 2025-04-23</span>
<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Uso: ./strong-password-generator.sh [longitud] [complejidad]</span>
<span style="color: #4E4E4E; font-style: italic;">#   </span><span style="color: #4E4E4E; font-style: italic;">longitud: n&#250;mero de caracteres (por defecto: 16)</span>
<span style="color: #4E4E4E; font-style: italic;">#   </span><span style="color: #4E4E4E; font-style: italic;">complejidad: 1=b&#225;sica, 2=media, 3=alta, 4=extrema (por defecto: 3)</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Colores para mejor visualizaci&#243;n</span>
<span style="color: #004651;">RED</span>=<span style="color: #005F00;">'\033[0;31m'</span>
<span style="color: #004651;">GREEN</span>=<span style="color: #005F00;">'\033[0;32m'</span>
<span style="color: #004651;">BLUE</span>=<span style="color: #005F00;">'\033[0;34m'</span>
<span style="color: #004651;">YELLOW</span>=<span style="color: #005F00;">'\033[0;33m'</span>
<span style="color: #004651;">NC</span>=<span style="color: #005F00;">'\033[0m'</span> <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">No Color</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Banner</span>
<span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"${BLUE}"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#9556;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9559;"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#9553;                                               &#9553;"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#9553;   GENERADOR DE CONTRASE&#209;AS ULTRA-SEGURAS      &#9553;"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#9553;   Para usuarios de Emacs con Esteroides       &#9553;"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#9553;                                               &#9553;"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#9562;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9565;"</span>
<span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"${NC}"</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Valores por defecto</span>
<span style="color: #004651;">PASSWORD_LENGTH</span>=${<span style="color: #004651;">1</span>:-16}
<span style="color: #004651;">COMPLEXITY_LEVEL</span>=${<span style="color: #004651;">2</span>:-3}

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Validar entrada</span>
<span style="color: #D70000;">if</span> <span style="color: #1F55A0; font-weight: bold;">!</span> [[ <span style="color: #005F00;">"$PASSWORD_LENGTH"</span> =~ ^[0-9]+$ ]]; <span style="color: #D70000;">then</span>
    <span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"${RED}Error: La longitud debe ser un n&#250;mero entero.${NC}"</span>
    <span style="color: #D70000;">exit</span> 1
<span style="color: #D70000;">fi</span>

<span style="color: #D70000;">if</span> [[ <span style="color: #005F00;">"$PASSWORD_LENGTH"</span> -lt 8 ]]; <span style="color: #D70000;">then</span>
    <span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"${YELLOW}Advertencia: Se recomienda una longitud m&#237;nima de 12 caracteres.${NC}"</span>
    <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"Continuando con longitud $PASSWORD_LENGTH..."</span>
<span style="color: #D70000;">fi</span>

<span style="color: #D70000;">if</span> <span style="color: #1F55A0; font-weight: bold;">!</span> [[ <span style="color: #005F00;">"$COMPLEXITY_LEVEL"</span> =~ ^[1-4]$ ]]; <span style="color: #D70000;">then</span>
    <span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"${RED}Error: El nivel de complejidad debe ser 1, 2, 3 o 4.${NC}"</span>
    <span style="color: #D70000;">exit</span> 1
<span style="color: #D70000;">fi</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Definir conjuntos de caracteres seg&#250;n nivel de complejidad</span>
<span style="color: #D70000;">case</span> $<span style="color: #004651;">COMPLEXITY_LEVEL</span><span style="color: #D70000;"> in</span>
    1) <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">B&#225;sico: letras y n&#250;meros</span>
        <span style="color: #004651;">CHAR_SET</span>=<span style="color: #005F00;">"a-zA-Z0-9"</span>
        <span style="color: #004651;">DESCRIPTION</span>=<span style="color: #005F00;">"b&#225;sica (letras y n&#250;meros)"</span>
        ;;
    2) <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Medio: a&#241;ade algunos s&#237;mbolos comunes</span>
        <span style="color: #004651;">CHAR_SET</span>=<span style="color: #005F00;">"a-zA-Z0-9!@#$%^&amp;*"</span>
        <span style="color: #004651;">DESCRIPTION</span>=<span style="color: #005F00;">"media (letras, n&#250;meros y s&#237;mbolos comunes)"</span>
        ;;
    3) <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Alto: amplia gama de s&#237;mbolos</span>
        <span style="color: #004651;">CHAR_SET</span>=<span style="color: #005F00;">"a-zA-Z0-9!@#$%^&amp;*()_+-=[]{}|;:,.&lt;&gt;?/~"</span>
        <span style="color: #004651;">DESCRIPTION</span>=<span style="color: #005F00;">"alta (amplia gama de caracteres)"</span>
        ;;
    4) <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Extremo: incluye caracteres Unicode</span>
        <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Generamos con todo y a&#241;adimos caracteres Unicode</span>
        <span style="color: #004651;">CHAR_SET</span>=<span style="color: #005F00;">"a-zA-Z0-9!@#$%^&amp;*()_+-=[]{}|;:,.&lt;&gt;?/~\"\\\`"</span>
        <span style="color: #004651;">DESCRIPTION</span>=<span style="color: #005F00;">"extrema (incluyendo caracteres especiales avanzados)"</span>
        ;;
<span style="color: #D70000;">esac</span>

<span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"${GREEN}Generando contrase&#241;a con:${NC}"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#8226; Longitud: $PASSWORD_LENGTH caracteres"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#8226; Complejidad: $DESCRIPTION"</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Funci&#243;n para generar la contrase&#241;a</span>
<span style="color: #AF8700;">generate_password</span>() {
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">length</span>=$<span style="color: #004651;">1</span>
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">charset</span>=$<span style="color: #004651;">2</span>
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">complexity</span>=$<span style="color: #004651;">3</span>

    <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Base64 da buena entrop&#237;a</span>
    <span style="color: #D70000;">if</span> [[ $<span style="color: #004651;">complexity</span> -eq 4 ]]; <span style="color: #D70000;">then</span>
        <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Para nivel extremo, incluimos algunos caracteres Unicode</span>
        <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Generamos una contrase&#241;a base</span>
        <span style="color: #1F55A0;">local</span> <span style="color: #004651;">base_password</span>=$(<span style="color: #1F55A0; font-weight: bold;">LC_ALL=C tr -dc "$charset" &lt; /dev/urandom | head -c $(($length - 3</span>)))
        <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">A&#241;adimos 3 caracteres Unicode comunes pero poco usados en contrase&#241;as</span>
        <span style="color: #1F55A0;">local</span> <span style="color: #004651;">unicode_chars</span>=$(<span style="color: #1F55A0; font-weight: bold;">echo -e "\u2603\u03A9\u2764"</span>)
        <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"${base_password}${unicode_chars}"</span> | fold -w1 | shuf | tr -d <span style="color: #005F00;">'\n'</span> | head -c $<span style="color: #004651;">length</span>
    <span style="color: #D70000;">else</span>
        <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Para otros niveles usamos el conjunto definido</span>
        <span style="color: #004651;">LC_ALL</span>=C tr -dc <span style="color: #005F00;">"$charset"</span> &lt; /dev/urandom | head -c $<span style="color: #004651;">length</span>
    <span style="color: #D70000;">fi</span>
}

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Generar contrase&#241;a</span>
<span style="color: #004651;">PASSWORD</span>=$(<span style="color: #1F55A0; font-weight: bold;">generate_password $PASSWORD_LENGTH "$CHAR_SET" $COMPLEXITY_LEVEL</span>)

<span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"\n${GREEN}Contrase&#241;a generada:${NC}"</span>
<span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"${BLUE}$PASSWORD${NC}"</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Evaluaci&#243;n de la fortaleza</span>
<span style="color: #004651;">STRENGTH</span>=0
[[ ${#<span style="color: #004651;">PASSWORD</span>} -ge 12 ]] &amp;&amp; ((<span style="color: #004651;">STRENGTH</span>+=1))
[[ ${#<span style="color: #004651;">PASSWORD</span>} -ge 16 ]] &amp;&amp; ((<span style="color: #004651;">STRENGTH</span>+=1))
[[ <span style="color: #005F00;">"$PASSWORD"</span> =~ [A-Z] ]] &amp;&amp; ((<span style="color: #004651;">STRENGTH</span>+=1))
[[ <span style="color: #005F00;">"$PASSWORD"</span> =~ [a-z] ]] &amp;&amp; ((<span style="color: #004651;">STRENGTH</span>+=1))
[[ <span style="color: #005F00;">"$PASSWORD"</span> =~ [0-9] ]] &amp;&amp; ((<span style="color: #004651;">STRENGTH</span>+=1))
[[ <span style="color: #005F00;">"$PASSWORD"</span> =~ [^a-zA-Z0-9] ]] &amp;&amp; ((<span style="color: #004651;">STRENGTH</span>+=1))

<span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"\n${GREEN}Evaluaci&#243;n de fortaleza:${NC}"</span>
<span style="color: #D70000;">case</span> $<span style="color: #004651;">STRENGTH</span><span style="color: #D70000;"> in</span>
    6) <span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"${GREEN}&#9733;&#9733;&#9733;&#9733;&#9733; Excelente${NC} - Pr&#225;cticamente imposible de romper"</span> ;;
    5) <span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"${GREEN}&#9733;&#9733;&#9733;&#9733;&#9734; Muy buena${NC} - Extremadamente dif&#237;cil de comprometer"</span> ;;
    4) <span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"${YELLOW}&#9733;&#9733;&#9733;&#9734;&#9734; Buena${NC} - Resistente a la mayor&#237;a de ataques"</span> ;;
    3) <span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"${YELLOW}&#9733;&#9733;&#9734;&#9734;&#9734; Moderada${NC} - Ofrece protecci&#243;n b&#225;sica"</span> ;;
    *) <span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"${RED}&#9733;&#9734;&#9734;&#9734;&#9734; D&#233;bil${NC} - Considere aumentar la complejidad"</span> ;;
<span style="color: #D70000;">esac</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Estimaci&#243;n del tiempo para romperla (muy aproximada)</span>
<span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"\n${GREEN}Tiempo estimado para romper mediante fuerza bruta:${NC}"</span>
<span style="color: #004651;">COMBINATIONS</span>=0
<span style="color: #D70000;">case</span> $<span style="color: #004651;">COMPLEXITY_LEVEL</span><span style="color: #D70000;"> in</span>
    1) <span style="color: #004651;">CHAR_COUNT</span>=62 ;; <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">a-z, A-Z, 0-9</span>
    2) <span style="color: #004651;">CHAR_COUNT</span>=71 ;; <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">+9 s&#237;mbolos comunes</span>
    3) <span style="color: #004651;">CHAR_COUNT</span>=95 ;; <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">ASCII imprimible est&#225;ndar</span>
    4) <span style="color: #004651;">CHAR_COUNT</span>=105 ;; <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Con algunos caracteres adicionales</span>
<span style="color: #D70000;">esac</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">F&#243;rmula b&#225;sica: combinaciones = conjunto^longitud</span>
<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Convertimos a notaci&#243;n cient&#237;fica para evitar desbordamientos</span>
<span style="color: #004651;">EXPONENT</span>=$(<span style="color: #1F55A0; font-weight: bold;">echo "$PASSWORD_LENGTH * l($CHAR_COUNT</span><span style="color: #005F00;">)/l(10)"</span> | bc -l | awk <span style="color: #005F00;">'{printf "%.2f", $1}'</span>)
<span style="color: #004651;">CRACK_TIME</span>=<span style="color: #005F00;">""</span>

<span style="color: #D70000;">if</span> (( $(<span style="color: #1F55A0; font-weight: bold;">echo "$EXPONENT &lt; 9" | bc -l</span>) )); <span style="color: #D70000;">then</span>
    <span style="color: #004651;">CRACK_TIME</span>=<span style="color: #005F00;">"Horas o d&#237;as"</span>
<span style="color: #D70000;">elif</span> (( $(<span style="color: #1F55A0; font-weight: bold;">echo "$EXPONENT &lt; 12" | bc -l</span>) )); <span style="color: #D70000;">then</span>
    <span style="color: #004651;">CRACK_TIME</span>=<span style="color: #005F00;">"Meses"</span>
<span style="color: #D70000;">elif</span> (( $(<span style="color: #1F55A0; font-weight: bold;">echo "$EXPONENT &lt; 15" | bc -l</span>) )); <span style="color: #D70000;">then</span>
    <span style="color: #004651;">CRACK_TIME</span>=<span style="color: #005F00;">"A&#241;os"</span>
<span style="color: #D70000;">else</span>
    <span style="color: #004651;">CRACK_TIME</span>=<span style="color: #005F00;">"Siglos o milenios"</span>
<span style="color: #D70000;">fi</span>

<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#8226; Combinaciones posibles: ~10^$EXPONENT"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#8226; Tiempo aproximado: $CRACK_TIME (con hardware actual)"</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Guardar en el portapapeles si est&#225; disponible xclip o xsel</span>
<span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"\n${GREEN}Acciones adicionales:${NC}"</span>
<span style="color: #D70000;">if </span><span style="color: #1F55A0;">command</span> -v xclip &gt; /dev/null; <span style="color: #D70000;">then</span>
    <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"$PASSWORD"</span> | xclip -selection clipboard
    <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#8226; Contrase&#241;a copiada al portapapeles (xclip)"</span>
<span style="color: #D70000;">elif </span><span style="color: #1F55A0;">command</span> -v xsel &gt; /dev/null; <span style="color: #D70000;">then</span>
    <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"$PASSWORD"</span> | xsel -b
    <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#8226; Contrase&#241;a copiada al portapapeles (xsel)"</span>
<span style="color: #D70000;">else</span>
    <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"&#8226; Instale xclip o xsel para copiar autom&#225;ticamente al portapapeles"</span>
<span style="color: #D70000;">fi</span>

<span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"&#8226; Use ${YELLOW}Ctrl+Y${NC} para pegar esta contrase&#241;a en Emacs (despu&#233;s de copiarla)"</span>

<span style="color: #1F55A0;">echo</span> -e <span style="color: #005F00;">"\n${BLUE}Para usar desde Emacs, a&#241;ada este script a su init.el${NC}"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"Consulte la secci&#243;n 'Integraci&#243;n con Emacs' en el blog Emacs con Esteroides"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">""</span>
</pre>
</div>

<p>
Este script ofrece:
</p>

<ul class="org-ul">
<li>Generación de contraseñas con distintos niveles de complejidad</li>
<li>Evaluación de la fortaleza de la contraseña generada</li>
<li>Estimación del tiempo necesario para romperla mediante fuerza bruta</li>
<li>Integración con el portapapeles para facilitar su uso</li>
<li>Feedback visual mediante colores y formato amigable</li>
</ul>
</div>
</div>
<div id="outline-container-orga1e530e" class="outline-2">
<h2 id="orga1e530e">Integración con Emacs</h2>
<div class="outline-text-2" id="text-orga1e530e">
<p>
Ahora que contamos con un potente generador de contraseñas, vamos a integrarlo en nuestro entorno Emacs para maximizar su utilidad.
</p>
</div>
<div id="outline-container-orgf061215" class="outline-3">
<h3 id="orgf061215">Configuración básica</h3>
<div class="outline-text-3" id="text-orgf061215">
<p>
Podemos agregar el siguiente código a nuestro archivo <code>init.el</code> para crear una función que genere contraseñas directamente desde Emacs:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Funci&#243;n para generar contrase&#241;as fuertes desde Emacs</span>
(<span style="color: #D70000;">defun</span> <span style="color: #AF8700;">generate-strong-password</span> (length complexity)
  <span style="color: #004700; font-style: italic;">"Genera una contrase&#241;a fuerte usando nuestro script personalizado.</span>
<span style="color: #004700; font-style: italic;">LENGTH es la longitud de la contrase&#241;a.</span>
<span style="color: #004700; font-style: italic;">COMPLEXITY es el nivel de complejidad (1-4)."</span>
  (<span style="color: #D70000;">interactive</span> 
   (list 
    (read-number <span style="color: #005F00;">"Longitud de la contrase&#241;a: "</span> 16)
    (read-number <span style="color: #005F00;">"Nivel de complejidad (1-4): "</span> 3)))

  (<span style="color: #D70000;">let</span> ((script-path <span style="color: #005F00;">"~/bin/strong-password-generator.sh"</span>))
    (<span style="color: #D70000;">if</span> (file-exists-p script-path)
        (<span style="color: #D70000;">let</span> ((password 
               (string-trim 
                (shell-command-to-string 
                 (format <span style="color: #005F00;">"%s %d %d"</span> script-path length complexity)))))
          <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Insertar en el buffer actual o mostrar en minibuffer</span>
          (<span style="color: #D70000;">if</span> (use-region-p)
              (<span style="color: #D70000;">progn</span>
                (delete-region (region-beginning) (region-end))
                (insert password)
                (message <span style="color: #005F00;">"Contrase&#241;a insertada en el buffer"</span>))
            (kill-new password)
            (message <span style="color: #005F00;">"Contrase&#241;a copiada al kill-ring: %s"</span> password)))
      (message <span style="color: #005F00;">"Script no encontrado en %s. Verifique la ruta."</span> script-path))))

<span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Atajo de teclado para generar contrase&#241;as r&#225;pidamente</span>
(global-set-key (kbd <span style="color: #005F00;">"C-c p"</span>) 'generate-strong-password)
</pre>
</div>
</div>
</div>
<div id="outline-container-org83a614e" class="outline-3">
<h3 id="org83a614e">Integración con passwords.el</h3>
<div class="outline-text-3" id="text-org83a614e">
<p>
Para una gestión más completa, podemos aprovechar la biblioteca estándar <code>auth-source.el</code> de Emacs para almacenar y recuperar contraseñas de forma segura:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Integraci&#243;n con auth-source para gesti&#243;n de contrase&#241;as</span>
(<span style="color: #D70000;">require</span> '<span style="color: #AF005F;">auth-source</span>)

(<span style="color: #D70000;">defun</span> <span style="color: #AF8700;">save-password-to-auth-source</span> (host user password)
  <span style="color: #004700; font-style: italic;">"Guarda una contrase&#241;a en auth-source para el HOST y USER especificados."</span>
  (<span style="color: #D70000;">interactive</span>
   (list
    (read-string <span style="color: #005F00;">"Host/Servicio: "</span>)
    (read-string <span style="color: #005F00;">"Usuario: "</span>)
    (read-string <span style="color: #005F00;">"Contrase&#241;a: "</span> nil nil nil t)))  <span style="color: #4E4E4E; font-style: italic;">; </span><span style="color: #4E4E4E; font-style: italic;">No mostrar la contrase&#241;a</span>

  <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Crear entrada en auth-source</span>
  (<span style="color: #D70000;">let</span> ((auth-sources '(<span style="color: #005F00;">"~/.authinfo.gpg"</span>)))
    (auth-source-forget-all-cached)
    (<span style="color: #D70000;">let</span> ((entry (list <span style="color: #1F55A0;">:host</span> host <span style="color: #1F55A0;">:user</span> user <span style="color: #1F55A0;">:secret</span> password)))
      (auth-source-save-behavior nil)
      (auth-source-save-new entry)
      (message <span style="color: #005F00;">"Contrase&#241;a guardada para %s@%s"</span> user host))))

(<span style="color: #D70000;">defun</span> <span style="color: #AF8700;">generate-and-save-password</span> (host user length complexity)
  <span style="color: #004700; font-style: italic;">"Genera una contrase&#241;a fuerte y la guarda en auth-source."</span>
  (<span style="color: #D70000;">interactive</span>
   (list
    (read-string <span style="color: #005F00;">"Host/Servicio: "</span>)
    (read-string <span style="color: #005F00;">"Usuario: "</span>)
    (read-number <span style="color: #005F00;">"Longitud de la contrase&#241;a: "</span> 16)
    (read-number <span style="color: #005F00;">"Nivel de complejidad (1-4): "</span> 3)))

  (<span style="color: #D70000;">let*</span> ((script-path <span style="color: #005F00;">"~/bin/strong-password-generator.sh"</span>)
         (password
          (string-trim
           (shell-command-to-string
            (format <span style="color: #005F00;">"%s %d %d"</span> script-path length complexity)))))

    <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Guardar en auth-source</span>
    (save-password-to-auth-source host user password)

    <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Tambi&#233;n copiar al kill-ring para uso inmediato</span>
    (kill-new password)
    (message <span style="color: #005F00;">"Contrase&#241;a generada y guardada para %s@%s (copiada al kill-ring)"</span> user host)))

<span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Funci&#243;n para recuperar contrase&#241;as</span>
(<span style="color: #D70000;">defun</span> <span style="color: #AF8700;">get-password-from-auth-source</span> (host user)
  <span style="color: #004700; font-style: italic;">"Recupera una contrase&#241;a desde auth-source."</span>
  (<span style="color: #D70000;">interactive</span>
   (list
    (read-string <span style="color: #005F00;">"Host/Servicio: "</span>)
    (read-string <span style="color: #005F00;">"Usuario: "</span>)))

  (<span style="color: #D70000;">let*</span> ((auth-info (car (auth-source-search <span style="color: #1F55A0;">:host</span> host <span style="color: #1F55A0;">:user</span> user)))
         (password (<span style="color: #D70000;">if</span> auth-info
                      (<span style="color: #D70000;">let</span> ((secret (plist-get auth-info <span style="color: #1F55A0;">:secret</span>)))
                        (<span style="color: #D70000;">if</span> (functionp secret)
                            (funcall secret)
                          secret))
                    nil)))

    (<span style="color: #D70000;">if</span> password
        (<span style="color: #D70000;">progn</span>
          (kill-new password)
          (message <span style="color: #005F00;">"Contrase&#241;a recuperada y copiada al kill-ring"</span>))
      (message <span style="color: #005F00;">"No se encontr&#243; contrase&#241;a para %s@%s"</span> user host))))

<span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Atajo para generar y guardar</span>
(global-set-key (kbd <span style="color: #005F00;">"C-c P"</span>) 'generate-and-save-password)
</pre>
</div>
</div>
</div>
<div id="outline-container-orgce8e841" class="outline-3">
<h3 id="orgce8e841">Integración con pass (Password Store)</h3>
<div class="outline-text-3" id="text-orgce8e841">
<p>
Para usuarios de <code>pass</code> (el estándar Unix para gestión de contraseñas), ofrecemos también una integración con este sistema:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Integraci&#243;n con Password Store (pass)</span>
(<span style="color: #D70000;">when</span> (executable-find <span style="color: #005F00;">"pass"</span>)
  (<span style="color: #D70000;">require</span> '<span style="color: #AF005F;">auth-source-pass</span>)
  (auth-source-pass-enable)

  (<span style="color: #D70000;">defun</span> <span style="color: #AF8700;">generate-password-and-store-in-pass</span> (path length complexity)
    <span style="color: #004700; font-style: italic;">"Genera una contrase&#241;a fuerte y la almacena usando pass."</span>
    (<span style="color: #D70000;">interactive</span>
     (list
      (read-string <span style="color: #005F00;">"Ruta en pass (ej. email/gmail.com): "</span>)
      (read-number <span style="color: #005F00;">"Longitud de la contrase&#241;a: "</span> 16)
      (read-number <span style="color: #005F00;">"Nivel de complejidad (1-4): "</span> 3)))

    (<span style="color: #D70000;">let*</span> ((script-path <span style="color: #005F00;">"~/bin/strong-password-generator.sh"</span>)
           (password
            (string-trim
             (shell-command-to-string
              (format <span style="color: #005F00;">"%s %d %d"</span> script-path length complexity)))))

      <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Almacenar en pass</span>
      (shell-command-to-string (format <span style="color: #005F00;">"echo '</span><span style="color: #AF005F;">%s</span><span style="color: #005F00;">' | pass insert -e '</span><span style="color: #AF005F;">%s</span><span style="color: #005F00;">'"</span> password path))

      <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Copiar al kill-ring</span>
      (kill-new password)
      (message <span style="color: #005F00;">"Contrase&#241;a generada y almacenada en pass: %s (copiada al kill-ring)"</span> path)))

  <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Atajo para la funci&#243;n de pass</span>
  (global-set-key (kbd <span style="color: #005F00;">"C-c M-p"</span>) 'generate-password-and-store-in-pass))
</pre>
</div>
</div>
</div>
<div id="outline-container-orgd8f5cfb" class="outline-3">
<h3 id="orgd8f5cfb">Integración avanzada con org-mode</h3>
<div class="outline-text-3" id="text-orgd8f5cfb">
<p>
Para los amantes de <code>org-mode</code>, podemos crear un sistema completo de gestión de contraseñas aprovechando sus capacidades:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Gesti&#243;n de contrase&#241;as con org-mode (cifrado)</span>
(<span style="color: #D70000;">require</span> '<span style="color: #AF005F;">org-crypt</span>)
(<span style="color: #D70000;">require</span> '<span style="color: #AF005F;">epa-file</span>)
(epa-file-enable)
(org-crypt-use-before-save-magic)
(<span style="color: #D70000;">setq</span> org-tags-exclude-from-inheritance (<span style="color: #D70000;">quote</span> (<span style="color: #005F00;">"crypt"</span>)))
(<span style="color: #D70000;">setq</span> org-crypt-key user-mail-address)  <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Usar tu clave GPG</span>

(<span style="color: #D70000;">defun</span> <span style="color: #AF8700;">create-password-entry-in-org</span> ()
  <span style="color: #004700; font-style: italic;">"Crea una entrada para una contrase&#241;a en un archivo org cifrado."</span>
  (<span style="color: #D70000;">interactive</span>)
  (<span style="color: #D70000;">let*</span> ((org-password-file <span style="color: #005F00;">"~/org/passwords.org.gpg"</span>)
         (host (read-string <span style="color: #005F00;">"Servicio/Sitio: "</span>))
         (user (read-string <span style="color: #005F00;">"Usuario/Email: "</span>))
         (notes (read-string <span style="color: #005F00;">"Notas adicionales: "</span>))
         (length (read-number <span style="color: #005F00;">"Longitud de la contrase&#241;a: "</span> 16))
         (complexity (read-number <span style="color: #005F00;">"Nivel de complejidad (1-4): "</span> 3))
         (script-path <span style="color: #005F00;">"~/bin/strong-password-generator.sh"</span>)
         (password
          (string-trim
           (shell-command-to-string
            (format <span style="color: #005F00;">"%s %d %d"</span> script-path length complexity)))))

    <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Crear o abrir el archivo</span>
    (<span style="color: #D70000;">unless</span> (file-exists-p org-password-file)
      (<span style="color: #D70000;">with-temp-file</span> org-password-file
        (insert <span style="color: #005F00;">"#+TITLE: Base de datos de contrase&#241;as seguras\n"</span>)
        (insert <span style="color: #005F00;">"#+AUTHOR: "</span> user-full-name <span style="color: #005F00;">"\n"</span>)
        (insert <span style="color: #005F00;">"#+STARTUP: content\n\n"</span>)))

    <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">A&#241;adir nueva entrada</span>
    (find-file org-password-file)
    (goto-char (point-max))
    (insert (format <span style="color: #005F00;">"\n* %s %s\n"</span> host (format-time-string <span style="color: #005F00;">"(%Y-%m-%d)"</span>)))
    (insert (format <span style="color: #005F00;">"  :PROPERTIES:\n"</span>))
    (insert (format <span style="color: #005F00;">"  :CREATED: %s\n"</span> (format-time-string <span style="color: #005F00;">"[%Y-%m-%d %a %H:%M]"</span>)))
    (insert (format <span style="color: #005F00;">"  :USER: %s\n"</span> user))
    (insert (format <span style="color: #005F00;">"  :END:\n"</span>))
    (insert (format <span style="color: #005F00;">"** Credenciales :crypt:\n"</span>))
    (insert (format <span style="color: #005F00;">"- Usuario: %s\n"</span> user))
    (insert (format <span style="color: #005F00;">"- Contrase&#241;a: %s\n"</span> password))
    (insert (format <span style="color: #005F00;">"- Generada: %s\n"</span> (format-time-string <span style="color: #005F00;">"%Y-%m-%d"</span>)))
    (insert (format <span style="color: #005F00;">"- Longitud: %d caracteres\n"</span> length))
    (insert (format <span style="color: #005F00;">"- Complejidad: nivel %d\n"</span> complexity))
    (<span style="color: #D70000;">when</span> (not (string= notes <span style="color: #005F00;">""</span>))
      (insert (format <span style="color: #005F00;">"** Notas\n%s\n"</span> notes)))

    <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Cifrar inmediatamente la secci&#243;n</span>
    (org-encrypt-entry)
    (save-buffer)

    <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Copiar al kill-ring</span>
    (kill-new password)
    (message <span style="color: #005F00;">"Entrada creada para %s y contrase&#241;a copiada al kill-ring"</span> host)))

<span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Atajo para crear entradas de contrase&#241;as en org</span>
(global-set-key (kbd <span style="color: #005F00;">"C-c M-P"</span>) 'create-password-entry-in-org)
</pre>
</div>
</div>
</div>
<div id="outline-container-orgc1dd670" class="outline-3">
<h3 id="orgc1dd670">Uso con Dired</h3>
<div class="outline-text-3" id="text-orgc1dd670">
<p>
Para una integración aún más completa, podemos agregar un marcador en Dired para ejecutar nuestro generador:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Integraci&#243;n con Dired</span>
(<span style="color: #D70000;">with-eval-after-load</span> 'dired
  (define-key dired-mode-map (kbd <span style="color: #005F00;">";p"</span>) 
    (<span style="color: #D70000;">lambda</span> ()
      (<span style="color: #D70000;">interactive</span>)
      (<span style="color: #D70000;">let</span> ((default-directory dired-directory))
        (generate-strong-password 16 3)))))
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org51ae44a" class="outline-2">
<h2 id="org51ae44a">Buenas prácticas para la gestión de contraseñas</h2>
<div class="outline-text-2" id="text-org51ae44a">
<p>
Además de generar contraseñas fuertes, es importante seguir algunas buenas prácticas para maximizar nuestra seguridad:
</p>
</div>
<div id="outline-container-org8256de6" class="outline-3">
<h3 id="org8256de6">Rotación periódica</h3>
<div class="outline-text-3" id="text-org8256de6">
<ul class="org-ul">
<li>Cambiar contraseñas críticas cada 3-6 meses</li>
<li>No reutilizar contraseñas anteriores</li>
<li>Automatizar recordatorios con <code>org-agenda</code></li>
</ul>
</div>
</div>
<div id="outline-container-org82ac3e9" class="outline-3">
<h3 id="org82ac3e9">Autenticación de dos factores (2FA)</h3>
<div class="outline-text-3" id="text-org82ac3e9">
<ul class="org-ul">
<li>Complementar contraseñas con un segundo factor de autenticación</li>
<li>Configurar apps como Google Authenticator o Authy</li>
<li>Posible integración con <code>auth-source-xoauth2.el</code></li>
</ul>
</div>
</div>
<div id="outline-container-orgcaf35b7" class="outline-3">
<h3 id="orgcaf35b7">Sistema de clasificación</h3>
<div class="outline-text-3" id="text-orgcaf35b7">
<ul class="org-ul">
<li>Categorizar contraseñas según su nivel de sensibilidad</li>
<li>Ajustar la complejidad según la importancia del servicio</li>
<li>Documentar políticas personales en un archivo <code>org</code> cifrado</li>
</ul>
</div>
</div>
<div id="outline-container-orgd58f67e" class="outline-3">
<h3 id="orgd58f67e">Respaldo seguro</h3>
<div class="outline-text-3" id="text-orgd58f67e">
<ul class="org-ul">
<li>Mantener copias cifradas de las contraseñas más importantes</li>
<li>Considerar soluciones físicas como claves de respaldo o papel</li>
<li>Establecer procedimientos de recuperación documentados</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org6972859" class="outline-2">
<h2 id="org6972859">Diagrama: Arquitectura del sistema de gestión de contraseñas</h2>
<div class="outline-text-2" id="text-org6972859">
<p>
El siguiente diagrama PlantUML ilustra la arquitectura completa del sistema de gestión de contraseñas que hemos descrito:
</p>


<figure id="org24a095a">
<img src="images/password-system-architecture.png" alt="password-system-architecture.png">

</figure>
</div>
</div>
<div id="outline-container-orgff6c7a0" class="outline-2">
<h2 id="orgff6c7a0">Comparativa de enfoques de gestión de contraseñas</h2>
<div class="outline-text-2" id="text-orgff6c7a0">
<p>
Para poner en perspectiva nuestra solución, comparemos diferentes enfoques para la gestión de contraseñas:
</p>

<table border="2" rules="all" frame="border">


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Enfoque</th>
<th scope="col" class="org-left">Pros</th>
<th scope="col" class="org-left">Contras</th>
<th scope="col" class="org-left">Integración con Emacs</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Memoria humana</td>
<td class="org-left">No requiere herramientas</td>
<td class="org-left">Limitado en cantidad y complejidad</td>
<td class="org-left">N/A</td>
</tr>

<tr>
<td class="org-left">Anotación física</td>
<td class="org-left">Simple, no hackeable remotamente</td>
<td class="org-left">Riesgo de pérdida, acceso físico</td>
<td class="org-left">N/A</td>
</tr>

<tr>
<td class="org-left">Navegador web</td>
<td class="org-left">Conveniente, automático</td>
<td class="org-left">Seguridad variable, portabilidad limitada</td>
<td class="org-left">Débil</td>
</tr>

<tr>
<td class="org-left">Gestor comercial (LastPass)</td>
<td class="org-left">Fácil de usar, multiplataforma</td>
<td class="org-left">Dependencia de terceros, posibles brechas</td>
<td class="org-left">Generalmente nula</td>
</tr>

<tr>
<td class="org-left">Password Store (pass)</td>
<td class="org-left">Open source, basado en GPG, CLI</td>
<td class="org-left">Requiere configuración, menos GUI</td>
<td class="org-left">Excelente (auth-source-pass)</td>
</tr>

<tr>
<td class="org-left">KeePass/KeePassXC</td>
<td class="org-left">Open source, cifrado local</td>
<td class="org-left">Sincronización manual</td>
<td class="org-left">Moderada (plugins disponibles)</td>
</tr>

<tr>
<td class="org-left">Nuestro sistema con Emacs</td>
<td class="org-left">Personalizable, integrado, cifrado</td>
<td class="org-left">Curva de aprendizaje, configuración</td>
<td class="org-left">Total (nativo)</td>
</tr>

<tr>
<td class="org-left">Biometría</td>
<td class="org-left">Conveniente, único</td>
<td class="org-left">Limitaciones hardware, no cambiable</td>
<td class="org-left">Limitada (requiere hardware)</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org1d694ca" class="outline-2">
<h2 id="org1d694ca">Personalizaciones avanzadas del generador de contraseñas</h2>
<div class="outline-text-2" id="text-org1d694ca">
<p>
Nuestro script de generación de contraseñas puede personalizarse aún más para satisfacer necesidades específicas:
</p>
</div>
<div id="outline-container-orga33f75c" class="outline-3">
<h3 id="orga33f75c">Patrones de contraseñas memorizables</h3>
<div class="outline-text-3" id="text-orga33f75c">
<p>
A veces necesitamos contraseñas que, siendo seguras, también sean memorizables. Podemos modificar nuestro script para generar contraseñas basadas en patrones:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #4E4E4E; font-style: italic;">#</span><span style="color: #4E4E4E; font-style: italic;">!/bin/</span><span style="color: #D70000;">bash</span>
<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">memorable-password-generator.sh</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Definir conjuntos de palabras (esto ser&#237;a mucho m&#225;s extenso en una implementaci&#243;n real)</span>
<span style="color: #004651;">ADJECTIVES</span>=(<span style="color: #005F00;">"r&#225;pido"</span> <span style="color: #005F00;">"alegre"</span> <span style="color: #005F00;">"verde"</span> <span style="color: #005F00;">"brillante"</span> <span style="color: #005F00;">"suave"</span> <span style="color: #005F00;">"&#225;spero"</span> <span style="color: #005F00;">"dulce"</span> <span style="color: #005F00;">"amargo"</span> <span style="color: #005F00;">"fuerte"</span> <span style="color: #005F00;">"d&#233;bil"</span>)
<span style="color: #004651;">NOUNS</span>=(<span style="color: #005F00;">"tigre"</span> <span style="color: #005F00;">"monta&#241;a"</span> <span style="color: #005F00;">"oc&#233;ano"</span> <span style="color: #005F00;">"jard&#237;n"</span> <span style="color: #005F00;">"libro"</span> <span style="color: #005F00;">"pluma"</span> <span style="color: #005F00;">"casa"</span> <span style="color: #005F00;">"estrella"</span> <span style="color: #005F00;">"fuego"</span> <span style="color: #005F00;">"nube"</span>)
<span style="color: #004651;">VERBS</span>=(<span style="color: #005F00;">"corre"</span> <span style="color: #005F00;">"salta"</span> <span style="color: #005F00;">"nada"</span> <span style="color: #005F00;">"vuela"</span> <span style="color: #005F00;">"escribe"</span> <span style="color: #005F00;">"lee"</span> <span style="color: #005F00;">"canta"</span> <span style="color: #005F00;">"baila"</span> <span style="color: #005F00;">"r&#237;e"</span> <span style="color: #005F00;">"llora"</span>)

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Generar componentes aleatorios</span>
<span style="color: #AF8700;">get_random_element</span>() {
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">array</span>=(<span style="color: #005F00;">"$@"</span>)
    <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"${array[RANDOM % ${#array[@]}]}"</span>
}

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Generar una contrase&#241;a memorable</span>
<span style="color: #AF8700;">generate_memorable_password</span>() {
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">adj</span>=$(<span style="color: #1F55A0; font-weight: bold;">get_random_element "${ADJECTIVES[@]}"</span>)
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">noun</span>=$(<span style="color: #1F55A0; font-weight: bold;">get_random_element "${NOUNS[@]}"</span>)
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">verb</span>=$(<span style="color: #1F55A0; font-weight: bold;">get_random_element "${VERBS[@]}"</span>)
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">num</span>=$(<span style="color: #1F55A0; font-weight: bold;">(RANDOM % 1000</span>))
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">special_chars</span>=(<span style="color: #005F00;">"!"</span> <span style="color: #005F00;">"@"</span> <span style="color: #005F00;">"#"</span> <span style="color: #005F00;">"$"</span> <span style="color: #005F00;">"%"</span> <span style="color: #005F00;">"&amp;"</span> <span style="color: #005F00;">"*"</span>)
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">special</span>=$(<span style="color: #1F55A0; font-weight: bold;">get_random_element "${special_chars[@]}"</span>)

    <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Capitalizar primera letra de cada palabra para mayor seguridad</span>
    <span style="color: #004651;">adj</span>=$(<span style="color: #1F55A0; font-weight: bold;">echo "$adj" | sed 's/\(.\</span><span style="color: #005F00;">)/\u\1/'</span>)
    <span style="color: #004651;">noun</span>=$(<span style="color: #1F55A0; font-weight: bold;">echo "$noun" | sed 's/\(.\</span><span style="color: #005F00;">)/\u\1/'</span>)
    <span style="color: #004651;">verb</span>=$(<span style="color: #1F55A0; font-weight: bold;">echo "$verb" | sed 's/\(.\</span><span style="color: #005F00;">)/\u\1/'</span>)

    <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"${adj}${special}${noun}${num}${verb}"</span>
}

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Generar y mostrar</span>
<span style="color: #004651;">PASSWORD</span>=$(<span style="color: #1F55A0; font-weight: bold;">generate_memorable_password</span>)
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"Contrase&#241;a memorable generada: $PASSWORD"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"Esta contrase&#241;a es m&#225;s f&#225;cil de recordar pero sigue siendo segura."</span>
</pre>
</div>

<p>
Integramos esta funcionalidad en Emacs:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #D70000;">defun</span> <span style="color: #AF8700;">generate-memorable-password</span> ()
  <span style="color: #004700; font-style: italic;">"Genera una contrase&#241;a memorable pero segura."</span>
  (<span style="color: #D70000;">interactive</span>)
  (<span style="color: #D70000;">let</span> ((script-path <span style="color: #005F00;">"~/bin/memorable-password-generator.sh"</span>))
    (<span style="color: #D70000;">if</span> (file-exists-p script-path)
        (<span style="color: #D70000;">let</span> ((password 
               (string-trim 
                (shell-command-to-string script-path))))
          (kill-new password)
          (message <span style="color: #005F00;">"Contrase&#241;a memorable generada y copiada: %s"</span> password))
      (message <span style="color: #005F00;">"Script no encontrado en %s"</span> script-path))))

(global-set-key (kbd <span style="color: #005F00;">"C-c m"</span>) 'generate-memorable-password)
</pre>
</div>
</div>
</div>
<div id="outline-container-org70ee421" class="outline-3">
<h3 id="org70ee421">Generador de frases de contraseña (diceware)</h3>
<div class="outline-text-3" id="text-org70ee421">
<p>
Las frases de contraseña ofrecen alta entropía siendo más memorizables:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #4E4E4E; font-style: italic;">#</span><span style="color: #4E4E4E; font-style: italic;">!/bin/</span><span style="color: #D70000;">bash</span>
<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">passphrase-generator.sh</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Simulamos dados para seleccionar palabras del diccionario diceware</span>
<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">En una implementaci&#243;n real, usar&#237;amos un diccionario completo</span>
<span style="color: #004651;">DICEWARE_DICT</span>=(
    <span style="color: #005F00;">"abaco"</span> <span style="color: #005F00;">"badajo"</span> <span style="color: #005F00;">"cabra"</span> <span style="color: #005F00;">"dados"</span> <span style="color: #005F00;">"efecto"</span> <span style="color: #005F00;">"f&#225;bula"</span> <span style="color: #005F00;">"gacela"</span> <span style="color: #005F00;">"hacedor"</span>
    <span style="color: #005F00;">"icono"</span> <span style="color: #005F00;">"jab&#243;n"</span> <span style="color: #005F00;">"kiosco"</span> <span style="color: #005F00;">"labio"</span> <span style="color: #005F00;">"maceta"</span> <span style="color: #005F00;">"nadar"</span> <span style="color: #005F00;">"oasis"</span> <span style="color: #005F00;">"pacto"</span>
    <span style="color: #005F00;">"queso"</span> <span style="color: #005F00;">"r&#225;bano"</span> <span style="color: #005F00;">"s&#225;bana"</span> <span style="color: #005F00;">"tabla"</span> <span style="color: #005F00;">"&#250;nico"</span> <span style="color: #005F00;">"vac&#237;o"</span> <span style="color: #005F00;">"wafle"</span> <span style="color: #005F00;">"xil&#243;fono"</span>
    <span style="color: #005F00;">"yeso"</span> <span style="color: #005F00;">"zarza"</span> <span style="color: #005F00;">"&#225;guila"</span> <span style="color: #005F00;">"b&#250;ho"</span> <span style="color: #005F00;">"c&#225;liz"</span> <span style="color: #005F00;">"d&#225;til"</span> <span style="color: #005F00;">"&#233;lite"</span> <span style="color: #005F00;">"f&#233;nix"</span>
    <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Este diccionario ser&#237;a mucho m&#225;s extenso en la realidad</span>
)

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Generar frase de contrase&#241;a</span>
<span style="color: #AF8700;">generate_passphrase</span>() {
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">num_words</span>=$<span style="color: #004651;">1</span>
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">passphrase</span>=<span style="color: #005F00;">""</span>
    <span style="color: #1F55A0;">local</span> <span style="color: #004651;">separator</span>=$<span style="color: #004651;">2</span>

    <span style="color: #D70000;">for</span> ((<span style="color: #004651;">i</span>=0; i&lt;num_words; i++)); <span style="color: #D70000;">do</span>
        <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Seleccionar palabra aleatoria</span>
        <span style="color: #004651;">index</span>=$(<span style="color: #1F55A0; font-weight: bold;">(RANDOM % ${#DICEWARE_DICT[@]}</span>))
        <span style="color: #004651;">word</span>=${<span style="color: #004651;">DICEWARE_DICT</span>[$<span style="color: #004651;">index</span>]}

        <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">A&#241;adir capitalizaci&#243;n aleatoria para mayor seguridad</span>
        <span style="color: #D70000;">if</span> ((RANDOM % 2)); <span style="color: #D70000;">then</span>
            <span style="color: #004651;">word</span>=$(<span style="color: #1F55A0; font-weight: bold;">echo "$word" | sed 's/\(.\</span><span style="color: #005F00;">)/\u\1/'</span>)
        <span style="color: #D70000;">fi</span>

        <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">A&#241;adir a la frase</span>
        <span style="color: #D70000;">if</span> [[ -n <span style="color: #005F00;">"$passphrase"</span> ]]; <span style="color: #D70000;">then</span>
            <span style="color: #004651;">passphrase</span>=<span style="color: #005F00;">"${passphrase}${separator}${word}"</span>
        <span style="color: #D70000;">else</span>
            <span style="color: #004651;">passphrase</span>=$<span style="color: #004651;">word</span>
        <span style="color: #D70000;">fi</span>
    <span style="color: #D70000;">done</span>

    <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">A&#241;adir un n&#250;mero aleatorio al final</span>
    <span style="color: #004651;">passphrase</span>=<span style="color: #005F00;">"${passphrase}${separator}$(</span><span style="color: #1F55A0; font-weight: bold;">($RANDOM % 100</span><span style="color: #005F00;">))"</span>

    <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"$passphrase"</span>
}

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Generar y mostrar</span>
<span style="color: #004651;">NUM_WORDS</span>=${<span style="color: #004651;">1</span>:-4}
<span style="color: #004651;">SEPARATOR</span>=${<span style="color: #004651;">2</span>:--}
<span style="color: #004651;">PASSPHRASE</span>=$(<span style="color: #1F55A0; font-weight: bold;">generate_passphrase $NUM_WORDS $SEPARATOR</span>)

<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"Frase de contrase&#241;a generada: $PASSPHRASE"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"Esta frase tiene alta entrop&#237;a pero es m&#225;s f&#225;cil de recordar."</span>
</pre>
</div>

<p>
Y la correspondiente integración en Emacs:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #D70000;">defun</span> <span style="color: #AF8700;">generate-passphrase</span> (words separator)
  <span style="color: #004700; font-style: italic;">"Genera una frase de contrase&#241;a usando el m&#233;todo diceware.</span>
<span style="color: #004700; font-style: italic;">WORDS es el n&#250;mero de palabras a incluir.</span>
<span style="color: #004700; font-style: italic;">SEPARATOR es el car&#225;cter separador entre palabras."</span>
  (<span style="color: #D70000;">interactive</span>
   (list
    (read-number <span style="color: #005F00;">"N&#250;mero de palabras: "</span> 4)
    (read-string <span style="color: #005F00;">"Separador: "</span> <span style="color: #005F00;">"-"</span>)))

  (<span style="color: #D70000;">let</span> ((script-path <span style="color: #005F00;">"~/bin/passphrase-generator.sh"</span>))
    (<span style="color: #D70000;">if</span> (file-exists-p script-path)
        (<span style="color: #D70000;">let</span> ((passphrase 
               (string-trim 
                (shell-command-to-string 
                 (format <span style="color: #005F00;">"%s %d %s"</span> script-path words separator)))))
          (kill-new passphrase)
          (message <span style="color: #005F00;">"Frase de contrase&#241;a generada y copiada: %s"</span> passphrase))
      (message <span style="color: #005F00;">"Script no encontrado en %s"</span> script-path))))

(global-set-key (kbd <span style="color: #005F00;">"C-c f"</span>) 'generate-passphrase)
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org4109111" class="outline-2">
<h2 id="org4109111">Estrategias de migración a contraseñas fuertes</h2>
<div class="outline-text-2" id="text-org4109111">
<p>
La transición a un sistema de contraseñas fuertes puede parecer abrumadora. Aquí hay un enfoque gradual que facilita la adopción:
</p>
</div>
<div id="outline-container-org3aade3f" class="outline-3">
<h3 id="org3aade3f">Plan por fases</h3>
<div class="outline-text-3" id="text-org3aade3f">
<ol class="org-ol">
<li><b>Fase 1: Inventario</b>
<ul class="org-ul">
<li>Crear un inventario completo de cuentas y servicios</li>
<li>Clasificar por importancia y sensibilidad</li>
<li>Usar org-mode para organizar este inventario</li>
</ul></li>

<li><b>Fase 2: Infraestructura</b>
<ul class="org-ul">
<li>Configurar las herramientas necesarias (scripts, GPG, integraciones)</li>
<li>Establecer las políticas de complejidad según categorías</li>
<li>Preparar sistemas de respaldo</li>
</ul></li>

<li><b>Fase 3: Migración priorizada</b>
<ul class="org-ul">
<li>Comenzar con cuentas financieras y críticas</li>
<li>Continuar con cuentas de correo y principales servicios</li>
<li>Finalizar con cuentas de menor importancia</li>
</ul></li>

<li><b>Fase 4: Revisión y mantenimiento</b>
<ul class="org-ul">
<li>Establecer calendario de rotación</li>
<li>Configurar recordatorios en org-agenda</li>
<li>Realizar auditorías periódicas de seguridad</li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-orga573168" class="outline-3">
<h3 id="orga573168">Script de auditoría de contraseñas</h3>
<div class="outline-text-3" id="text-orga573168">
<p>
El siguiente script en Emacs Lisp ayuda a evaluar la seguridad de las contraseñas existentes:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #D70000;">defun</span> <span style="color: #AF8700;">audit-password-strength</span> (password)
  <span style="color: #004700; font-style: italic;">"Audita la fortaleza de una contrase&#241;a y sugiere mejoras."</span>
  (<span style="color: #D70000;">interactive</span> <span style="color: #005F00;">"sContrase&#241;a a auditar: "</span>)

  (<span style="color: #D70000;">let</span> ((length (length password))
        (has-uppercase (string-match-p <span style="color: #005F00;">"[A-Z]"</span> password))
        (has-lowercase (string-match-p <span style="color: #005F00;">"[a-z]"</span> password))
        (has-numbers (string-match-p <span style="color: #005F00;">"[0-9]"</span> password))
        (has-symbols (string-match-p <span style="color: #005F00;">"[</span><span style="color: #1F55A0; font-weight: bold;">^</span><span style="color: #005F00;">a-zA-Z0-9]"</span> password))
        (has-sequences (string-match-p <span style="color: #005F00;">"</span><span style="color: #1F55A0; font-weight: bold;">\\</span><span style="color: #1F55A0; font-weight: bold;">(</span><span style="color: #005F00;">abc</span><span style="color: #1F55A0; font-weight: bold;">\\</span><span style="color: #1F55A0; font-weight: bold;">|</span><span style="color: #005F00;">123</span><span style="color: #1F55A0; font-weight: bold;">\\</span><span style="color: #1F55A0; font-weight: bold;">|</span><span style="color: #005F00;">qwe</span><span style="color: #1F55A0; font-weight: bold;">\\</span><span style="color: #1F55A0; font-weight: bold;">)</span><span style="color: #005F00;">"</span> password))
        (score 0)
        (feedback '()))

    <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Evaluaci&#243;n de longitud</span>
    (<span style="color: #D70000;">cond</span>
     ((&lt; length 8)
      (<span style="color: #D70000;">push</span> <span style="color: #005F00;">"Longitud cr&#237;tica: menos de 8 caracteres."</span> feedback))
     ((&lt; length 12)
      (<span style="color: #D70000;">push</span> <span style="color: #005F00;">"Longitud insuficiente: menos de 12 caracteres."</span> feedback)
      (<span style="color: #D70000;">cl-incf</span> score))
     ((&lt; length 16)
      (<span style="color: #D70000;">push</span> <span style="color: #005F00;">"Longitud aceptable: entre 12-16 caracteres."</span> feedback)
      (<span style="color: #D70000;">cl-incf</span> score 2))
     (t
      (<span style="color: #D70000;">push</span> <span style="color: #005F00;">"Longitud excelente: m&#225;s de 16 caracteres."</span> feedback)
      (<span style="color: #D70000;">cl-incf</span> score 3)))

    <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Evaluaci&#243;n de complejidad</span>
    (<span style="color: #D70000;">when</span> has-uppercase (<span style="color: #D70000;">cl-incf</span> score) (<span style="color: #D70000;">push</span> <span style="color: #005F00;">"Contiene may&#250;sculas [+]"</span> feedback))
    (<span style="color: #D70000;">when</span> has-lowercase (<span style="color: #D70000;">cl-incf</span> score) (<span style="color: #D70000;">push</span> <span style="color: #005F00;">"Contiene min&#250;sculas [+]"</span> feedback))
    (<span style="color: #D70000;">when</span> has-numbers (<span style="color: #D70000;">cl-incf</span> score) (<span style="color: #D70000;">push</span> <span style="color: #005F00;">"Contiene n&#250;meros [+]"</span> feedback))
    (<span style="color: #D70000;">when</span> has-symbols (<span style="color: #D70000;">cl-incf</span> score) (<span style="color: #D70000;">push</span> <span style="color: #005F00;">"Contiene s&#237;mbolos especiales [+]"</span> feedback))

    <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Penalizaciones</span>
    (<span style="color: #D70000;">when</span> has-sequences
      (<span style="color: #D70000;">cl-decf</span> score)
      (<span style="color: #D70000;">push</span> <span style="color: #005F00;">"Contiene secuencias predecibles (ej: abc, 123) [-]"</span> feedback))

    (<span style="color: #D70000;">when</span> (string-match-p (regexp-quote (user-login-name)) password)
      (<span style="color: #D70000;">cl-decf</span> score 2)
      (<span style="color: #D70000;">push</span> <span style="color: #005F00;">"Contiene tu nombre de usuario [-]"</span> feedback))

    <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Mostrar resultados</span>
    (<span style="color: #D70000;">with-output-to-temp-buffer</span> <span style="color: #005F00;">"*Password Audit*"</span>
      (switch-to-buffer <span style="color: #005F00;">"*Password Audit*"</span>)
      (erase-buffer)
      (insert <span style="color: #005F00;">"=== AUDITOR&#205;A DE SEGURIDAD DE CONTRASE&#209;A ===\n\n"</span>)
      (insert (format <span style="color: #005F00;">"Puntuaci&#243;n: %d/10\n\n"</span> score))
      (insert <span style="color: #005F00;">"An&#225;lisis:\n"</span>)
      (<span style="color: #D70000;">dolist</span> (item (reverse feedback))
        (insert (format <span style="color: #005F00;">"&#8226; %s\n"</span> item)))

      (insert <span style="color: #005F00;">"\nRecomendaciones:\n"</span>)
      (<span style="color: #D70000;">cond</span>
       ((&lt; score 4)
        (insert <span style="color: #005F00;">"&#9888;&#65039; Contrase&#241;a D&#201;BIL - Se recomienda cambio inmediato\n"</span>)
        (insert <span style="color: #005F00;">"&#8226; Utilice la funci&#243;n generate-strong-password para crear una nueva\n"</span>)
        (insert <span style="color: #005F00;">"&#8226; Aumente la longitud a m&#237;nimo 16 caracteres\n"</span>)
        (insert <span style="color: #005F00;">"&#8226; Incluya caracteres de todas las categor&#237;as\n"</span>))
       ((&lt; score 7)
        (insert <span style="color: #005F00;">"&#9888;&#65039; Contrase&#241;a MODERADA - Se recomienda mejora\n"</span>)
        (insert <span style="color: #005F00;">"&#8226; Considere aumentar la longitud\n"</span>)
        (insert <span style="color: #005F00;">"&#8226; A&#241;ada el tipo de caracteres que faltan\n"</span>))
       (t
        (insert <span style="color: #005F00;">"&#9989; Contrase&#241;a FUERTE - Cumple con los est&#225;ndares recomendados\n"</span>)
        (insert <span style="color: #005F00;">"&#8226; Recuerde cambiarla peri&#243;dicamente\n"</span>)
        (insert <span style="color: #005F00;">"&#8226; Aseg&#250;rese de no reutilizarla en otros servicios\n"</span>)))

      (insert <span style="color: #005F00;">"\n=== FIN DEL AN&#193;LISIS ===\n"</span>))))

(global-set-key (kbd <span style="color: #005F00;">"C-c C-p a"</span>) 'audit-password-strength)
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgce55172" class="outline-2">
<h2 id="orgce55172">Recursos adicionales</h2>
<div class="outline-text-2" id="text-orgce55172">
<p>
Para profundizar en la seguridad de contraseñas y su gestión con Emacs, recomendamos consultar:
</p>
</div>
<div id="outline-container-org43a0ba7" class="outline-3">
<h3 id="org43a0ba7">Paquetes de Emacs relacionados</h3>
<div class="outline-text-3" id="text-org43a0ba7">
<ul class="org-ul">
<li><code>auth-source.el</code> - Sistema base para autenticación</li>
<li><code>auth-source-pass.el</code> - Integración con pass</li>
<li><code>password-store.el</code> - Interfaz alternativa para pass</li>
<li><code>org-crypt.el</code> - Cifrado selectivo en org-mode</li>
<li><code>password-generator.el</code> - Generador simple de contraseñas</li>
<li><code>gpg-encrypt.el</code> - Utilidades para cifrado con GPG</li>
</ul>
</div>
</div>
<div id="outline-container-org172ee39" class="outline-3">
<h3 id="org172ee39">Lecturas recomendadas</h3>
<div class="outline-text-3" id="text-org172ee39">
<ul class="org-ul">
<li>"Practical Cryptography" por Niels Ferguson y Bruce Schneier</li>
<li>"Password Strength" en el NIST Special Publication 800-63B</li>
<li>"The Emacs Auth-Source Library" en la documentación oficial de Emacs</li>
<li>"Diceware Passphrase Home" por Arnold Reinhold</li>
</ul>
</div>
</div>
<div id="outline-container-orgd537f0f" class="outline-3">
<h3 id="orgd537f0f">Herramientas complementarias</h3>
<div class="outline-text-3" id="text-orgd537f0f">
<ul class="org-ul">
<li><code>pass</code> - El estándar Unix para gestores de contraseñas</li>
<li><code>gpg</code> - GNU Privacy Guard para cifrado</li>
<li><code>xclip</code> / <code>xsel</code> - Utilidades para acceso al portapapeles</li>
<li><code>pwgen</code> - Generador alternativo de contraseñas</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org5ea2d48" class="outline-2">
<h2 id="org5ea2d48">Conclusión</h2>
<div class="outline-text-2" id="text-org5ea2d48">
<p>
La seguridad de nuestras contraseñas no es una preocupación menor en la era digital. Con las herramientas adecuadas y un enfoque sistemático, podemos transformar esta necesidad en una fortaleza. Emacs, con su flexibilidad y capacidad de integración, nos proporciona el entorno perfecto para implementar un sistema de gestión de contraseñas personalizado, seguro y eficiente.
</p>

<p>
Al combinar scripts de Bash para la generación de contraseñas con las capacidades de cifrado y organización de Emacs, hemos creado un ecosistema completo que nos permite:
</p>

<ul class="org-ul">
<li>Generar contraseñas con diferentes niveles de complejidad según nuestras necesidades</li>
<li>Almacenar de forma segura nuestras credenciales utilizando cifrado GPG</li>
<li>Recuperar fácilmente las contraseñas cuando las necesitamos</li>
<li>Auditar y mantener nuestra seguridad digital de forma proactiva</li>
</ul>

<p>
Esta solución, adaptada específicamente para usuarios avanzados de Emacs, demuestra una vez más la versatilidad de este editor: mucho más que una herramienta para escribir texto, es una plataforma completa para la productividad y la seguridad digital.
</p>

<p>
En un mundo donde las amenazas digitales crecen día a día, tomar el control de nuestra seguridad con herramientas que conocemos y podemos personalizar representa una ventaja significativa. Las contraseñas fuertes son solo el comienzo; es el sistema completo alrededor de ellas lo que marca la diferencia.
</p>

<p>
Como diría Richard Stallman: "La libertad en el software es también la libertad de controlar tu propia seguridad".
</p>

<p>
¡Mantén tus contraseñas fuertes y tus buffers de Emacs siempre a mano!
</p>
</div>
</div>
<div id="outline-container-org8c34d28" class="outline-2">
<h2 id="org8c34d28">Nota sobre la ejecución del script</h2>
<div class="outline-text-2" id="text-org8c34d28">
<p>
Para utilizar el script de generación de contraseñas presentado en este artículo:
</p>

<ol class="org-ol">
<li>Copia el código Bash en un archivo llamado <code>strong-password-generator.sh</code></li>
<li>Guárdalo en <code>~/bin/</code> (o modifica las rutas en el código Emacs)</li>
<li>Asegúrate de hacerlo ejecutable:</li>
</ol>

<div class="org-src-container">
<pre class="src src-bash">chmod +x ~/bin/strong-password-generator.sh
</pre>
</div>

<ol class="org-ol">
<li>Añade las configuraciones de Emacs a tu <code>init.el</code></li>
<li>Reinicia Emacs o evalúa el código con <code>M-x eval-buffer</code></li>
</ol>

<p>
A partir de ese momento, podrás generar contraseñas seguras con <code>C-c p</code> y aprovechar todas las funcionalidades descritas en este artículo.
</p>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-seguridad.html">seguridad</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-contraseñas.html">contraseñas</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-criptografía.html">criptografía</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-emacs.html">emacs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[seguridad]]></category>
  <category><![CDATA[contraseñas]]></category>
  <category><![CDATA[criptografía]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[linux]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-23-gesti%C3%B3n-de-contrase%C3%B1as-fuertes-con-emacs:-seguridad-digital-para-el-usuario-exigente.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-23-gesti%C3%B3n-de-contrase%C3%B1as-fuertes-con-emacs:-seguridad-digital-para-el-usuario-exigente.html</guid>
  <pubDate>Wed, 23 Apr 2025 04:45:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Detectando actividad maliciosa en nuestro sistema Linux: ¿Somos parte de una botnet?]]></title>
  <description><![CDATA[
<div id="outline-container-org4d90630" class="outline-2">
<h2 id="org4d90630">Introducción</h2>
<div class="outline-text-2" id="text-org4d90630">
<p>
En la era actual de amenazas cibernéticas cada vez más sofisticadas, uno de los riesgos más preocupantes es que nuestros sistemas sean comprometidos y utilizados como parte de una botnet sin nuestro conocimiento. Estas redes de equipos infectados pueden ser utilizadas para realizar ataques DDoS, minería de criptomonedas, envío de spam, o robo de datos, entre otras actividades maliciosas.
</p>

<p>
En este artículo del blog <b>Emacs con Esteroides</b>, presentaremos un script en Bash para detectar posibles señales de que nuestro sistema Linux está siendo utilizado como parte de una botnet o está bajo ataque. El script realiza comprobaciones exhaustivas del sistema y genera un informe detallado que podemos analizar para determinar si hay actividad sospechosa.
</p>
</div>
</div>
<div id="outline-container-org3d0771d" class="outline-2">
<h2 id="org3d0771d">¿Qué es una botnet?</h2>
<div class="outline-text-2" id="text-org3d0771d">
<p>
Una botnet es una red de equipos infectados con malware que son controlados remotamente por un atacante, conocido como "botmaster". Los equipos comprometidos, llamados "zombies" o "bots", ejecutan comandos sin el conocimiento de sus propietarios.
</p>

<p>
Señales comunes de que un sistema puede formar parte de una botnet:
</p>

<ul class="org-ul">
<li>Conexiones de red inusuales o no autorizadas</li>
<li>Procesos desconocidos con alto consumo de recursos</li>
<li>Tráfico de red anómalo</li>
<li>Servicios o puertos abiertos inesperados</li>
<li>Modificaciones en archivos críticos del sistema</li>
<li>Entradas sospechosas en la tabla de rutas</li>
<li>Tareas programadas desconocidas</li>
</ul>
</div>
</div>
<div id="outline-container-orgfd116dd" class="outline-2">
<h2 id="orgfd116dd">El script de detección de botnets</h2>
<div class="outline-text-2" id="text-orgfd116dd">
<p>
Nuestro script realiza múltiples comprobaciones para identificar posibles indicios de compromiso:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>
<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">botnet_detector.sh - Script para detectar posibles indicios de botnet en sistemas Linux</span>
<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Blog: Emacs con Esteroides</span>
<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Autor: Emacs con Esteroides</span>
<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Fecha: 15/04/2025</span>
<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Licencia: GPL v3</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Colores para mejor visualizaci&#243;n</span>
<span style="color: #1857a4;">RED</span>=<span style="color: #a44185;">'\033[0;31m'</span>
<span style="color: #1857a4;">GREEN</span>=<span style="color: #a44185;">'\033[0;32m'</span>
<span style="color: #1857a4;">YELLOW</span>=<span style="color: #a44185;">'\033[0;33m'</span>
<span style="color: #1857a4;">BLUE</span>=<span style="color: #a44185;">'\033[0;34m'</span>
<span style="color: #1857a4;">PURPLE</span>=<span style="color: #a44185;">'\033[0;35m'</span>
<span style="color: #1857a4;">CYAN</span>=<span style="color: #a44185;">'\033[0;36m'</span>
<span style="color: #1857a4;">NC</span>=<span style="color: #a44185;">'\033[0m'</span> <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">No Color</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Funci&#243;n para imprimir encabezados</span>
<span style="color: #dc3eb7;">print_header</span>() {
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${BLUE}====================================${NC}"</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${BLUE}$1${NC}"</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${BLUE}====================================${NC}\n"</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Funci&#243;n para imprimir mensajes de alerta</span>
<span style="color: #dc3eb7;">print_alert</span>() {
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${RED}[ALERTA] $1${NC}"</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Funci&#243;n para imprimir mensajes de advertencia</span>
<span style="color: #dc3eb7;">print_warning</span>() {
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${YELLOW}[ADVERTENCIA] $1${NC}"</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Funci&#243;n para imprimir mensajes informativos</span>
<span style="color: #dc3eb7;">print_info</span>() {
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${GREEN}[INFO] $1${NC}"</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar si se est&#225; ejecutando como root</span>
<span style="color: #219fd5; font-style: italic;">if</span> [ <span style="color: #a44185;">"$(</span><span style="color: #219fd5; font-weight: bold;">id -u</span><span style="color: #a44185;">)"</span> != <span style="color: #a44185;">"0"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${RED}Este script debe ejecutarse como root${NC}"</span>
  <span style="color: #219fd5; font-style: italic;">exit</span> 1
<span style="color: #219fd5; font-style: italic;">fi</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Crear directorio para informes si no existe</span>
<span style="color: #1857a4;">REPORT_DIR</span>=<span style="color: #a44185;">"/var/log/security_checks"</span>
<span style="color: #1857a4;">TIMESTAMP</span>=$(<span style="color: #219fd5; font-weight: bold;">date +"%Y%m%d_%H%M%S"</span>)
<span style="color: #1857a4;">REPORT_FILE</span>=<span style="color: #a44185;">"${REPORT_DIR}/botnet_check_${TIMESTAMP}.log"</span>

<span style="color: #219fd5; font-style: italic;">if</span> [ <span style="color: #219fd5; font-weight: bold;">!</span> -d <span style="color: #a44185;">"$REPORT_DIR"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
  mkdir -p <span style="color: #a44185;">"$REPORT_DIR"</span>
<span style="color: #219fd5; font-style: italic;">fi</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Funci&#243;n para registrar en el archivo de informe</span>
<span style="color: #dc3eb7;">log</span>() {
  <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"$1"</span> &gt;&gt; <span style="color: #a44185;">"$REPORT_FILE"</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"$1"</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Redireccionar la salida al archivo de registro y a la consola</span>
<span style="color: #219fd5; font-style: italic;">exec</span> &gt; &gt;(tee -a <span style="color: #a44185;">"$REPORT_FILE"</span>) 2&gt;&amp;1

print_header <span style="color: #a44185;">"DETECTOR DE BOTNETS Y ACTIVIDAD MALICIOSA"</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Iniciando an&#225;lisis: $(</span><span style="color: #219fd5; font-weight: bold;">date</span><span style="color: #a44185;">)"</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Sistema: $(</span><span style="color: #219fd5; font-weight: bold;">uname -a</span><span style="color: #a44185;">)"</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Usuario: $(</span><span style="color: #219fd5; font-weight: bold;">whoami</span><span style="color: #a44185;">)"</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Informe guardado en: $REPORT_FILE"</span>
<span style="color: #dc3eb7;">echo</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Comprobar herramientas necesarias e instalarlas si faltan</span>
<span style="color: #dc3eb7;">check_tools</span>() {
  print_header <span style="color: #a44185;">"Verificando herramientas necesarias"</span>

  <span style="color: #1857a4;">TOOLS</span>=(<span style="color: #a44185;">"lsof"</span> <span style="color: #a44185;">"netstat"</span> <span style="color: #a44185;">"tcpdump"</span> <span style="color: #a44185;">"htop"</span> <span style="color: #a44185;">"iftop"</span> <span style="color: #a44185;">"rkhunter"</span> <span style="color: #a44185;">"chkrootkit"</span> <span style="color: #a44185;">"lynis"</span> <span style="color: #a44185;">"clamav"</span> <span style="color: #a44185;">"sysstat"</span>)
  <span style="color: #1857a4;">PACKAGES</span>=(<span style="color: #a44185;">"lsof"</span> <span style="color: #a44185;">"net-tools"</span> <span style="color: #a44185;">"tcpdump"</span> <span style="color: #a44185;">"htop"</span> <span style="color: #a44185;">"iftop"</span> <span style="color: #a44185;">"rkhunter"</span> <span style="color: #a44185;">"chkrootkit"</span> <span style="color: #a44185;">"lynis"</span> <span style="color: #a44185;">"clamav"</span> <span style="color: #a44185;">"sysstat"</span>)

  <span style="color: #1857a4;">MISSING</span>=()

  <span style="color: #219fd5; font-style: italic;">for</span> i<span style="color: #219fd5; font-style: italic;"> in</span> <span style="color: #a44185;">"${!TOOLS[@]}"</span>; <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #219fd5; font-style: italic;">if ! </span><span style="color: #dc3eb7;">command</span> -v <span style="color: #a44185;">"${TOOLS[$i]}"</span> &amp;&gt; /dev/null; <span style="color: #219fd5; font-style: italic;">then</span>
      <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${YELLOW}Herramienta ${TOOLS[$i]} no encontrada${NC}"</span>
      <span style="color: #1857a4;">MISSING</span>+=(<span style="color: #a44185;">"${PACKAGES[$i]}"</span>)
    <span style="color: #219fd5; font-style: italic;">else</span>
      <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${GREEN}&#10003; ${TOOLS[$i]} instalado${NC}"</span>
    <span style="color: #219fd5; font-style: italic;">fi</span>
  <span style="color: #219fd5; font-style: italic;">done</span>

  <span style="color: #219fd5; font-style: italic;">if</span> [ ${#<span style="color: #1857a4;">MISSING</span>[@]} -gt 0 ]; <span style="color: #219fd5; font-style: italic;">then</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${YELLOW}Instalando herramientas faltantes...${NC}"</span>
    apt-get update
    apt-get install -y <span style="color: #a44185;">"${MISSING[@]}"</span>

    <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar si hubo alg&#250;n error en la instalaci&#243;n</span>
    <span style="color: #219fd5; font-style: italic;">if</span> [ $<span style="color: #1857a4;">?</span> -ne 0 ]; <span style="color: #219fd5; font-style: italic;">then</span>
      <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${RED}Error al instalar algunas herramientas. El script puede no funcionar correctamente.${NC}"</span>
    <span style="color: #219fd5; font-style: italic;">else</span>
      <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${GREEN}Todas las herramientas necesarias han sido instaladas.${NC}"</span>
    <span style="color: #219fd5; font-style: italic;">fi</span>
  <span style="color: #219fd5; font-style: italic;">else</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${GREEN}Todas las herramientas necesarias est&#225;n instaladas.${NC}"</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">1. Comprobar procesos sospechosos (alto uso de CPU/memoria)</span>
<span style="color: #dc3eb7;">check_suspicious_processes</span>() {
  print_header <span style="color: #a44185;">"Comprobando procesos sospechosos"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Procesos con mayor consumo de CPU</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${CYAN}Procesos con mayor consumo de CPU:${NC}"</span>
  ps aux --sort=-%cpu | head -11

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Procesos con mayor consumo de memoria</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Procesos con mayor consumo de memoria:${NC}"</span>
  ps aux --sort=-%mem | head -11

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Buscar nombres de procesos sospechosos (mineros comunes, etc.)</span>
  <span style="color: #1857a4;">SUSPICIOUS_PROCESS_NAMES</span>=(<span style="color: #a44185;">"miner"</span> <span style="color: #a44185;">"xmr"</span> <span style="color: #a44185;">"monero"</span> <span style="color: #a44185;">"cryptonight"</span> <span style="color: #a44185;">"stratum"</span> <span style="color: #a44185;">"coinhive"</span> <span style="color: #a44185;">"xmrig"</span> <span style="color: #a44185;">"cpuminer"</span> <span style="color: #a44185;">"nanopool"</span> <span style="color: #a44185;">"minergate"</span>)

  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Buscando procesos con nombres sospechosos:${NC}"</span>
  <span style="color: #1857a4;">FOUND</span>=0
  <span style="color: #219fd5; font-style: italic;">for</span> name<span style="color: #219fd5; font-style: italic;"> in</span> <span style="color: #a44185;">"${SUSPICIOUS_PROCESS_NAMES[@]}"</span>; <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #1857a4;">RESULT</span>=$(<span style="color: #219fd5; font-weight: bold;">pgrep -l -f "$name"</span>)
    <span style="color: #219fd5; font-style: italic;">if</span> [ -n <span style="color: #a44185;">"$RESULT"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
      print_alert <span style="color: #a44185;">"Posible proceso de miner&#237;a detectado: $RESULT"</span>
      <span style="color: #1857a4;">FOUND</span>=1
    <span style="color: #219fd5; font-style: italic;">fi</span>
  <span style="color: #219fd5; font-style: italic;">done</span>

  <span style="color: #219fd5; font-style: italic;">if</span> [ $<span style="color: #1857a4;">FOUND</span> -eq 0 ]; <span style="color: #219fd5; font-style: italic;">then</span>
    print_info <span style="color: #a44185;">"No se encontraron procesos con nombres sospechosos."</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar procesos ocultos (con caracteres especiales o espacios en blanco)</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Buscando procesos con nombres ocultos o sospechosos:${NC}"</span>
  ps aux | grep -E <span style="color: #a44185;">'[ ]{2,}[^ ]+$|[.][^ ]|^ '</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Procesos sin binarios en disco (posible indicaci&#243;n de malware en memoria)</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Procesos sin binarios en disco (posible malware en memoria):${NC}"</span>
  <span style="color: #219fd5; font-style: italic;">for</span> pid<span style="color: #219fd5; font-style: italic;"> in</span> $(<span style="color: #219fd5; font-weight: bold;">ls /proc/ | grep -E '^[0-9]+$'</span>); <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #219fd5; font-style: italic;">if</span> [ -d <span style="color: #a44185;">"/proc/$pid"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
      <span style="color: #1857a4;">BINARY</span>=$(<span style="color: #219fd5; font-weight: bold;">ls -l /proc/$pid/exe 2&gt;/dev/null | awk '{print $NF}'</span>)
      <span style="color: #219fd5; font-style: italic;">if</span> [[ <span style="color: #a44185;">"$BINARY"</span> == *<span style="color: #a44185;">"(deleted)"</span>* || -z <span style="color: #a44185;">"$BINARY"</span> ]]; <span style="color: #219fd5; font-style: italic;">then</span>
        <span style="color: #1857a4;">PROCESS_NAME</span>=$(<span style="color: #219fd5; font-weight: bold;">cat /proc/$pid/comm 2&gt;/dev/null</span>)
        <span style="color: #1857a4;">CMDLINE</span>=$(<span style="color: #219fd5; font-weight: bold;">cat /proc/$pid/cmdline 2&gt;/dev/null | tr '\0' ' '</span>)
        <span style="color: #219fd5; font-style: italic;">if</span> [ -n <span style="color: #a44185;">"$PROCESS_NAME"</span> ] &amp;&amp; [ <span style="color: #a44185;">"$PROCESS_NAME"</span> != <span style="color: #a44185;">"ps"</span> ] &amp;&amp; [ <span style="color: #a44185;">"$PROCESS_NAME"</span> != <span style="color: #a44185;">"grep"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
          print_warning <span style="color: #a44185;">"Proceso sin binario en disco: PID=$pid NOMBRE=$PROCESS_NAME CMDLINE=$CMDLINE"</span>
        <span style="color: #219fd5; font-style: italic;">fi</span>
      <span style="color: #219fd5; font-style: italic;">fi</span>
    <span style="color: #219fd5; font-style: italic;">fi</span>
  <span style="color: #219fd5; font-style: italic;">done</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">2. Comprobar conexiones de red sospechosas</span>
<span style="color: #dc3eb7;">check_suspicious_connections</span>() {
  print_header <span style="color: #a44185;">"Comprobando conexiones de red sospechosas"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Listar todas las conexiones</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${CYAN}Todas las conexiones activas:${NC}"</span>
  netstat -tunapl

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Conexiones establecidas</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Conexiones establecidas:${NC}"</span>
  netstat -tunapl | grep ESTABLISHED

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Puertos en escucha</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Puertos en escucha:${NC}"</span>
  netstat -tunapl | grep LISTEN

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Puertos com&#250;nmente asociados con botnets y malware</span>
  <span style="color: #1857a4;">SUSPICIOUS_PORTS</span>=(4444 5555 6666 6667 6697 8080 9999 1080 11111 1337 31337 34567 65535)

  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Buscando puertos sospechosos:${NC}"</span>
  <span style="color: #1857a4;">FOUND</span>=0
  <span style="color: #219fd5; font-style: italic;">for</span> port<span style="color: #219fd5; font-style: italic;"> in</span> <span style="color: #a44185;">"${SUSPICIOUS_PORTS[@]}"</span>; <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #1857a4;">RESULT</span>=$(<span style="color: #219fd5; font-weight: bold;">netstat -tunapl | grep ":$port "</span>)
    <span style="color: #219fd5; font-style: italic;">if</span> [ -n <span style="color: #a44185;">"$RESULT"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
      print_alert <span style="color: #a44185;">"Puerto sospechoso $port en uso: $RESULT"</span>
      <span style="color: #1857a4;">FOUND</span>=1
    <span style="color: #219fd5; font-style: italic;">fi</span>
  <span style="color: #219fd5; font-style: italic;">done</span>

  <span style="color: #219fd5; font-style: italic;">if</span> [ $<span style="color: #1857a4;">FOUND</span> -eq 0 ]; <span style="color: #219fd5; font-style: italic;">then</span>
    print_info <span style="color: #a44185;">"No se encontraron puertos sospechosos comunes en uso."</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Comprobar conexiones a IPs sospechosas (servidores C&amp;C conocidos)</span>
  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Esta lista deber&#237;a ser actualizada peri&#243;dicamente con IPs conocidas de C&amp;C</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Comprobando conexiones a posibles servidores C&amp;C:${NC}"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Ejemplo simple - en una implementaci&#243;n real, esta lista deber&#237;a ser m&#225;s extensa</span>
  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">y actualizada desde una fuente confiable</span>
  <span style="color: #1857a4;">SUSPICIOUS_IPS</span>=(<span style="color: #a44185;">"185.26.205."</span> <span style="color: #a44185;">"91.121."</span> <span style="color: #a44185;">"212.83."</span> <span style="color: #a44185;">"88.208."</span>)

  <span style="color: #1857a4;">FOUND</span>=0
  <span style="color: #219fd5; font-style: italic;">for</span> ip_pattern<span style="color: #219fd5; font-style: italic;"> in</span> <span style="color: #a44185;">"${SUSPICIOUS_IPS[@]}"</span>; <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #1857a4;">RESULT</span>=$(<span style="color: #219fd5; font-weight: bold;">netstat -tunapl | grep "$ip_pattern"</span>)
    <span style="color: #219fd5; font-style: italic;">if</span> [ -n <span style="color: #a44185;">"$RESULT"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
      print_alert <span style="color: #a44185;">"Conexi&#243;n a posible servidor C&amp;C detectada: $RESULT"</span>
      <span style="color: #1857a4;">FOUND</span>=1
    <span style="color: #219fd5; font-style: italic;">fi</span>
  <span style="color: #219fd5; font-style: italic;">done</span>

  <span style="color: #219fd5; font-style: italic;">if</span> [ $<span style="color: #1857a4;">FOUND</span> -eq 0 ]; <span style="color: #219fd5; font-style: italic;">then</span>
    print_info <span style="color: #a44185;">"No se encontraron conexiones a servidores C&amp;C conocidos."</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Analizar cantidad de conexiones por IP</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}IPs con m&#250;ltiples conexiones (posible comunicaci&#243;n con C&amp;C):${NC}"</span>
  netstat -ntu | awk <span style="color: #a44185;">'{print $5}'</span> | cut -d: -f1 | sort | uniq -c | sort -nr | head -n 10

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar conexiones salientes inusuales</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Conexiones salientes posiblemente sospechosas:${NC}"</span>
  <span style="color: #1857a4;">OUTBOUND</span>=$(<span style="color: #219fd5; font-weight: bold;">netstat -tun | grep -v "127.0.0.1" | grep -v "LISTEN" | grep "ESTABLISHED"</span>)
  <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"$OUTBOUND"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">An&#225;lisis de tr&#225;fico en tiempo real (muestra limitada)</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Captura de tr&#225;fico en tiempo real (10 segundos):${NC}"</span>
  timeout 10 tcpdump -nn -c 100 2&gt;/dev/null || print_warning <span style="color: #a44185;">"No se pudo ejecutar tcpdump"</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">3. Comprobar archivos y directorios sospechosos</span>
<span style="color: #dc3eb7;">check_suspicious_files</span>() {
  print_header <span style="color: #a44185;">"Comprobando archivos y directorios sospechosos"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Archivos modificados recientemente</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${CYAN}Archivos del sistema modificados en las &#250;ltimas 24 horas:${NC}"</span>
  find /bin /usr/bin /sbin /usr/sbin -type f -mtime -1 -ls | grep -v <span style="color: #a44185;">"\.git"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Buscar archivos setuid/setgid (potencialmente peligrosos)</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Archivos con permisos SUID/SGID (verificar si son leg&#237;timos):${NC}"</span>
  find / -type f <span style="color: #a44185;">\(</span> -perm -4000 -o -perm -2000 <span style="color: #a44185;">\)</span> -ls 2&gt;/dev/null | grep -v -E <span style="color: #a44185;">"/snap/|/var/lib/snapd/"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Buscar archivos ejecutables en /tmp y /var/tmp</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Archivos ejecutables en directorios temporales:${NC}"</span>
  find /tmp /var/tmp /dev/shm -type f -perm -100 -ls 2&gt;/dev/null

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Buscar scripts de inicio sospechosos</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Scripts de inicio potencialmente sospechosos:${NC}"</span>
  <span style="color: #219fd5; font-style: italic;">for</span> dir<span style="color: #219fd5; font-style: italic;"> in</span> /etc/init.d /etc/init /etc/rc*.d /etc/systemd/system /usr/lib/systemd/system; <span style="color: #219fd5; font-style: italic;">do</span>
    find <span style="color: #a44185;">"$dir"</span> -type f -mtime -7 -ls 2&gt;/dev/null
  <span style="color: #219fd5; font-style: italic;">done</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Buscar archivos ocultos en el directorio home</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Archivos ocultos recientes en directorios home:${NC}"</span>
  find /home -type f -name <span style="color: #a44185;">".*"</span> -mtime -7 -ls 2&gt;/dev/null | grep -v -E <span style="color: #a44185;">"\.cache|\.config|\.local|\.dbus|\.mozilla|\.bash_history"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Buscar archivos con nombres sospechosos</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Archivos con nombres potencialmente sospechosos:${NC}"</span>
  find / -type f -name <span style="color: #a44185;">"*backdoor*"</span> -o -name <span style="color: #a44185;">"*rootkit*"</span> -o -name <span style="color: #a44185;">"*trojan*"</span> -o -name <span style="color: #a44185;">"*miner*"</span> -o -name <span style="color: #a44185;">"*xmr*"</span> -o -name <span style="color: #a44185;">"*monero*"</span> 2&gt;/dev/null
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">4. Comprobar tareas programadas</span>
<span style="color: #dc3eb7;">check_scheduled_tasks</span>() {
  print_header <span style="color: #a44185;">"Comprobando tareas programadas"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Crontabs del sistema</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${CYAN}Crontabs del sistema:${NC}"</span>
  <span style="color: #219fd5; font-style: italic;">for</span> user<span style="color: #219fd5; font-style: italic;"> in</span> $(<span style="color: #219fd5; font-weight: bold;">cut -f1 -d: /etc/passwd</span>); <span style="color: #219fd5; font-style: italic;">do</span>
    crontab -l -u <span style="color: #a44185;">"$user"</span> 2&gt;/dev/null
    <span style="color: #219fd5; font-style: italic;">if</span> [ $<span style="color: #1857a4;">?</span> -eq 0 ]; <span style="color: #219fd5; font-style: italic;">then</span>
      <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"Crontab del usuario $user:"</span>
      crontab -l -u <span style="color: #a44185;">"$user"</span>
      <span style="color: #dc3eb7;">echo</span>
    <span style="color: #219fd5; font-style: italic;">fi</span>
  <span style="color: #219fd5; font-style: italic;">done</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Otros archivos cron</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Otros archivos cron:${NC}"</span>
  <span style="color: #219fd5; font-style: italic;">for</span> dir<span style="color: #219fd5; font-style: italic;"> in</span> /etc/cron.d /etc/cron.daily /etc/cron.hourly /etc/cron.monthly /etc/cron.weekly; <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"Contenido de $dir:"</span>
    ls -la <span style="color: #a44185;">"$dir"</span> 2&gt;/dev/null
    <span style="color: #dc3eb7;">echo</span>
  <span style="color: #219fd5; font-style: italic;">done</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Comprobar /etc/crontab</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Contenido de /etc/crontab:${NC}"</span>
  cat /etc/crontab

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Comprobar systemd timers</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Systemd timers:${NC}"</span>
  systemctl list-timers --all
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">5. Comprobar usuarios y permisos</span>
<span style="color: #dc3eb7;">check_users_and_permissions</span>() {
  print_header <span style="color: #a44185;">"Comprobando usuarios y permisos"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Listar usuarios</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${CYAN}Lista de usuarios en el sistema:${NC}"</span>
  cut -d: -f1,3,7 /etc/passwd | sort

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Usuarios con UID 0 (root)</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Usuarios con privilegios de root (UID 0):${NC}"</span>
  grep <span style="color: #a44185;">":0:"</span> /etc/passwd

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Usuarios que pueden usar sudo</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Usuarios que pueden usar sudo:${NC}"</span>
  grep -Po <span style="color: #a44185;">'^sudo.+:\K.*$'</span> /etc/group
  cat /etc/sudoers.d/* /etc/sudoers 2&gt;/dev/null | grep -v <span style="color: #a44185;">"^#"</span> | grep -v <span style="color: #a44185;">"^$"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">&#218;ltimos inicios de sesi&#243;n</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}&#218;ltimos inicios de sesi&#243;n:${NC}"</span>
  last | head -20

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Sesiones activas</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Sesiones activas:${NC}"</span>
  w
  who

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Comprobar usuarios conectados por SSH</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Usuarios conectados por SSH:${NC}"</span>
  netstat -tnpa | grep <span style="color: #a44185;">"ESTABLISHED.*sshd"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Archivos de autorizaci&#243;n SSH</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Archivos authorized_keys (verificar claves no autorizadas):${NC}"</span>
  find /home -name <span style="color: #a44185;">"authorized_keys"</span> -exec ls -la {} <span style="color: #a44185;">\;</span> -exec cat {} <span style="color: #a44185;">\;</span> 2&gt;/dev/null
  find /root -name <span style="color: #a44185;">"authorized_keys"</span> -exec ls -la {} <span style="color: #a44185;">\;</span> -exec cat {} <span style="color: #a44185;">\;</span> 2&gt;/dev/null
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">6. Comprobar servicios y daemons</span>
<span style="color: #dc3eb7;">check_services</span>() {
  print_header <span style="color: #a44185;">"Comprobando servicios y daemons"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Servicios activos</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${CYAN}Servicios systemd activos:${NC}"</span>
  systemctl list-units --type=service --state=running

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Todos los servicios</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Todos los servicios systemd:${NC}"</span>
  systemctl list-unit-files --type=service

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Servicios iniciados recientemente</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Servicios iniciados en los &#250;ltimos 3 d&#237;as:${NC}"</span>
  find /etc/systemd/system /usr/lib/systemd/system -type f -name <span style="color: #a44185;">"*.service"</span> -mtime -3 -ls

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Servicios no est&#225;ndar</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Servicios potencialmente no est&#225;ndar:${NC}"</span>
  systemctl list-units --type=service | grep -v -E <span style="color: #a44185;">"systemd|dbus|getty|ssh|network|ifup|rpc|nfs|syslog|cron|anacron|atd|udev|acpid|rsyslog|logind|getty|apache|nginx|mariadb|mysql|postgresql"</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">7. Realizar escaneos con herramientas de seguridad</span>
<span style="color: #dc3eb7;">security_scans</span>() {
  print_header <span style="color: #a44185;">"Ejecutando escaneos de seguridad"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Ejecutar rkhunter para buscar rootkits</span>
  <span style="color: #219fd5; font-style: italic;">if </span><span style="color: #dc3eb7;">command</span> -v rkhunter &amp;&gt; /dev/null; <span style="color: #219fd5; font-style: italic;">then</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${CYAN}Ejecutando rkhunter (escaneo de rootkits):${NC}"</span>
    rkhunter --check --sk || print_warning <span style="color: #a44185;">"rkhunter fall&#243; o encontr&#243; problemas"</span>
  <span style="color: #219fd5; font-style: italic;">else</span>
    print_warning <span style="color: #a44185;">"rkhunter no est&#225; instalado"</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Ejecutar chkrootkit</span>
  <span style="color: #219fd5; font-style: italic;">if </span><span style="color: #dc3eb7;">command</span> -v chkrootkit &amp;&gt; /dev/null; <span style="color: #219fd5; font-style: italic;">then</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Ejecutando chkrootkit:${NC}"</span>
    chkrootkit -q || print_warning <span style="color: #a44185;">"chkrootkit fall&#243; o encontr&#243; problemas"</span>
  <span style="color: #219fd5; font-style: italic;">else</span>
    print_warning <span style="color: #a44185;">"chkrootkit no est&#225; instalado"</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Ejecutar lynis para auditor&#237;a de seguridad</span>
  <span style="color: #219fd5; font-style: italic;">if </span><span style="color: #dc3eb7;">command</span> -v lynis &amp;&gt; /dev/null; <span style="color: #219fd5; font-style: italic;">then</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Ejecutando lynis (auditor&#237;a b&#225;sica):${NC}"</span>
    lynis audit system --quick || print_warning <span style="color: #a44185;">"lynis fall&#243; o encontr&#243; problemas"</span>
  <span style="color: #219fd5; font-style: italic;">else</span>
    print_warning <span style="color: #a44185;">"lynis no est&#225; instalado"</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Ejecutar ClamAV para buscar malware</span>
  <span style="color: #219fd5; font-style: italic;">if </span><span style="color: #dc3eb7;">command</span> -v clamscan &amp;&gt; /dev/null; <span style="color: #219fd5; font-style: italic;">then</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Ejecutando ClamAV en directorios cr&#237;ticos:${NC}"</span>
    clamscan --recursive --suppress-ok-results /etc /tmp /var/tmp /home/*/.ssh /root || print_warning <span style="color: #a44185;">"clamscan fall&#243; o encontr&#243; problemas"</span>
  <span style="color: #219fd5; font-style: italic;">else</span>
    print_warning <span style="color: #a44185;">"ClamAV no est&#225; instalado"</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">8. Comprobar registros del sistema</span>
<span style="color: #dc3eb7;">check_logs</span>() {
  print_header <span style="color: #a44185;">"Analizando registros del sistema"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar intentos de inicio de sesi&#243;n fallidos</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${CYAN}Intentos de inicio de sesi&#243;n fallidos:${NC}"</span>
  grep <span style="color: #a44185;">"Failed password"</span> /var/log/auth.log* | tail -n 20

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Comprobaci&#243;n de conexiones rechazadas</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Conexiones rechazadas:${NC}"</span>
  grep -i <span style="color: #a44185;">"connection refused\|failed to connect"</span> /var/log/syslog* | tail -n 20

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Mensajes de error cr&#237;ticos</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Mensajes de error cr&#237;ticos:${NC}"</span>
  grep -i <span style="color: #a44185;">"error\|critical\|warning\|fail"</span> /var/log/syslog* | tail -n 50

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Buscar IPs que intentan m&#250;ltiples inicios de sesi&#243;n</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}IPs con m&#250;ltiples intentos de inicio de sesi&#243;n:${NC}"</span>
  grep <span style="color: #a44185;">"Failed password"</span> /var/log/auth.log* | grep -E -o <span style="color: #a44185;">"([0-9]{1,3}[\.]){3}[0-9]{1,3}"</span> | sort | uniq -c | sort -nr | head -n 10
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">9. Comprobar volumen de tr&#225;fico de red</span>
<span style="color: #dc3eb7;">check_network_traffic</span>() {
  print_header <span style="color: #a44185;">"Analizando tr&#225;fico de red"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Estad&#237;sticas de uso de red</span>
  <span style="color: #219fd5; font-style: italic;">if </span><span style="color: #dc3eb7;">command</span> -v vnstat &amp;&gt; /dev/null; <span style="color: #219fd5; font-style: italic;">then</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${CYAN}Estad&#237;sticas de tr&#225;fico de red:${NC}"</span>
    vnstat
  <span style="color: #219fd5; font-style: italic;">else</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${CYAN}Estad&#237;sticas de interfaces de red:${NC}"</span>
    ip -s link
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Mostrar tabla de rutas</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Tabla de rutas:${NC}"</span>
  ip route

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Mostrar puertos abiertos</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Puertos abiertos:${NC}"</span>
  ss -tuln

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Capturar y analizar una muestra de tr&#225;fico</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}An&#225;lisis de muestra de tr&#225;fico (5 segundos):${NC}"</span>
  timeout 5 tcpdump -nn -q -i any 2&gt;/dev/null || print_warning <span style="color: #a44185;">"No se pudo ejecutar tcpdump"</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">10. Comprobaci&#243;n del rendimiento del sistema</span>
<span style="color: #dc3eb7;">check_system_performance</span>() {
  print_header <span style="color: #a44185;">"Analizando rendimiento del sistema"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Uso de CPU y memoria</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${CYAN}Uso de CPU y memoria:${NC}"</span>
  top -bn 1 | head -20

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Comprobaci&#243;n de la carga del sistema</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Carga del sistema:${NC}"</span>
  uptime

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Uso de disco</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Uso de disco:${NC}"</span>
  df -h

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Directorios que ocupan m&#225;s espacio</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Directorios que ocupan m&#225;s espacio:${NC}"</span>
  du -sh /* 2&gt;/dev/null | sort -hr | head -10

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Comprobar swap</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Uso de swap:${NC}"</span>
  free -h
  swapon --show

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Comprobar si hay procesos zombies</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}Procesos zombie:${NC}"</span>
  ps aux | awk <span style="color: #a44185;">'$8=="Z"'</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">11. Generar resumen e informe final</span>
<span style="color: #dc3eb7;">generate_summary</span>() {
  print_header <span style="color: #a44185;">"RESUMEN DE LA DETECCI&#211;N"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Comprobar indicadores clave de compromiso</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${CYAN}Indicadores clave revisados:${NC}"</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">1. Procesos sospechosos</span>
  <span style="color: #1857a4;">SUSPICIOUS_PROCS</span>=$(<span style="color: #219fd5; font-weight: bold;">ps aux | grep -E 'miner|xmr|monero|cryptonight|stratum' | grep -v grep | wc -l</span>)
  <span style="color: #219fd5; font-style: italic;">if</span> [ <span style="color: #a44185;">"$SUSPICIOUS_PROCS"</span> -gt 0 ]; <span style="color: #219fd5; font-style: italic;">then</span>
    print_alert <span style="color: #a44185;">"&#9888;&#65039; Se encontraron $SUSPICIOUS_PROCS procesos con nombres sospechosos"</span>
  <span style="color: #219fd5; font-style: italic;">else</span>
    print_info <span style="color: #a44185;">"&#10003; No se encontraron procesos con nombres asociados a miner&#237;a/botnet"</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">2. Puertos sospechosos</span>
  <span style="color: #1857a4;">SUSPICIOUS_PORTS_COUNT</span>=$(<span style="color: #219fd5; font-weight: bold;">netstat -tunapl 2&gt;/dev/null | grep -E ':(4444|5555|6666|6667|8080|9999|1080|1337|31337</span><span style="color: #a44185;">)'</span> | grep -v <span style="color: #a44185;">"127.0.0.1"</span> | wc -l)
  <span style="color: #219fd5; font-style: italic;">if</span> [ <span style="color: #a44185;">"$SUSPICIOUS_PORTS_COUNT"</span> -gt 0 ]; <span style="color: #219fd5; font-style: italic;">then</span>
    print_alert <span style="color: #a44185;">"&#9888;&#65039; Se encontraron $SUSPICIOUS_PORTS_COUNT puertos sospechosos en uso"</span>
  <span style="color: #219fd5; font-style: italic;">else</span>
    print_info <span style="color: #a44185;">"&#10003; No se encontraron puertos com&#250;nmente asociados con malware"</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">3. Archivos sospechosos</span>
  <span style="color: #1857a4;">SUSPICIOUS_FILES</span>=$(<span style="color: #219fd5; font-weight: bold;">find /tmp /var/tmp /dev/shm -type f -perm -100 2&gt;/dev/null | wc -l</span>)
  <span style="color: #219fd5; font-style: italic;">if</span> [ <span style="color: #a44185;">"$SUSPICIOUS_FILES"</span> -gt 3 ]; <span style="color: #219fd5; font-style: italic;">then</span>
    print_warning <span style="color: #a44185;">"&#9888;&#65039; Se encontraron $SUSPICIOUS_FILES archivos ejecutables en directorios temporales"</span>
  <span style="color: #219fd5; font-style: italic;">else</span>
    print_info <span style="color: #a44185;">"&#10003; N&#250;mero normal de ejecutables en directorios temporales"</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">4. Tareas cron sospechosas</span>
  <span style="color: #1857a4;">SUSPICIOUS_CRON</span>=$(<span style="color: #219fd5; font-weight: bold;">grep -r "curl\|wget\|nc\|netcat\|bash -i\|python -c\|perl -e" /etc/cron* /var/spool/cron/ 2&gt;/dev/null | wc -l</span>)
  <span style="color: #219fd5; font-style: italic;">if</span> [ <span style="color: #a44185;">"$SUSPICIOUS_CRON"</span> -gt 0 ]; <span style="color: #219fd5; font-style: italic;">then</span>
    print_alert <span style="color: #a44185;">"&#9888;&#65039; Se encontraron $SUSPICIOUS_CRON tareas cron potencialmente sospechosas"</span>
  <span style="color: #219fd5; font-style: italic;">else</span>
    print_info <span style="color: #a44185;">"&#10003; No se encontraron tareas cron sospechosas"</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">5. Usuarios con UID 0 distintos de root</span>
  <span style="color: #1857a4;">ROOT_USERS</span>=$(<span style="color: #219fd5; font-weight: bold;">grep ":0:" /etc/passwd | grep -v "^root:" | wc -l</span>)
  <span style="color: #219fd5; font-style: italic;">if</span> [ <span style="color: #a44185;">"$ROOT_USERS"</span> -gt 0 ]; <span style="color: #219fd5; font-style: italic;">then</span>
    print_alert <span style="color: #a44185;">"&#9888;&#65039; Se encontraron $ROOT_USERS usuarios adicionales con privilegios de root (UID 0)"</span>
  <span style="color: #219fd5; font-style: italic;">else</span>
    print_info <span style="color: #a44185;">"&#10003; Solo el usuario root tiene UID 0"</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Evaluaci&#243;n final</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${BLUE}EVALUACI&#211;N FINAL:${NC}"</span>

  <span style="color: #1857a4;">TOTAL_ALERTS</span>=$(<span style="color: #219fd5; font-weight: bold;">grep -c "\[ALERTA\]" "$REPORT_FILE"</span>)
  <span style="color: #1857a4;">TOTAL_WARNINGS</span>=$(<span style="color: #219fd5; font-weight: bold;">grep -c "\[ADVERTENCIA\]" "$REPORT_FILE"</span>)

  <span style="color: #219fd5; font-style: italic;">if</span> [ <span style="color: #a44185;">"$TOTAL_ALERTS"</span> -gt 0 ]; <span style="color: #219fd5; font-style: italic;">then</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${RED}&#9888;&#65039; Se encontraron $TOTAL_ALERTS alertas y $TOTAL_WARNINGS advertencias que requieren investigaci&#243;n inmediata.${NC}"</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${RED}El sistema podr&#237;a estar comprometido. Revise el informe completo y tome medidas.${NC}"</span>
  <span style="color: #219fd5; font-style: italic;">elif</span> [ <span style="color: #a44185;">"$TOTAL_WARNINGS"</span> -gt 3 ]; <span style="color: #219fd5; font-style: italic;">then</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${YELLOW}&#9888;&#65039; Se encontraron $TOTAL_WARNINGS advertencias que requieren atenci&#243;n.${NC}"</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${YELLOW}El sistema podr&#237;a tener actividad sospechosa. Revise el informe completo.${NC}"</span>
  <span style="color: #219fd5; font-style: italic;">else</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${GREEN}&#10003; No se encontraron indicios claros de compromiso en el sistema.${NC}"</span>
    <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"${GREEN}Contin&#250;e monitoreando regularmente.${NC}"</span>
  <span style="color: #219fd5; font-style: italic;">fi</span>

  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Recomendaciones</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${CYAN}RECOMENDACIONES:${NC}"</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"1. Ejecute este script peri&#243;dicamente para monitorear cambios"</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"2. Configure un sistema de monitoreo de integridad (como AIDE o Tripwire)"</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"3. Actualice regularmente el sistema y las aplicaciones"</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"4. Configure correctamente el firewall"</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"5. Implemente detecci&#243;n de intrusiones con herramientas como Snort o Suricata"</span>
  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"6. Siga las pr&#225;cticas recomendadas de seguridad para servidores Linux"</span>

  <span style="color: #dc3eb7;">echo</span> -e <span style="color: #a44185;">"\n${BLUE}Informe completo guardado en: $REPORT_FILE${NC}"</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Ejecutar todas las comprobaciones</span>
<span style="color: #dc3eb7;">main</span>() {
  check_tools
  check_suspicious_processes
  check_suspicious_connections
  check_suspicious_files
  check_scheduled_tasks
  check_users_and_permissions
  check_services
  security_scans
  check_logs
  check_network_traffic
  check_system_performance
  generate_summary

  print_header <span style="color: #a44185;">"FINALIZADO"</span>
  <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"An&#225;lisis completado: $(</span><span style="color: #219fd5; font-weight: bold;">date</span><span style="color: #a44185;">)"</span>
  <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Informe guardado en: $REPORT_FILE"</span>
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Ejecutar el script principal</span>
main
</pre>
</div>
</div>
</div>
<div id="outline-container-org809f40b" class="outline-2">
<h2 id="org809f40b">¿Cómo funciona el script?</h2>
<div class="outline-text-2" id="text-org809f40b">
<p>
El script realiza una serie de verificaciones exhaustivas para detectar posibles signos de compromiso en el sistema:
</p>


<figure id="org3d97007">
<img src="images/botnet_detection_flow.png" alt="botnet_detection_flow.png">

</figure>

<p>
<a href="images/botnet_detection_flow.png">botnet<sub>detection</sub><sub>flow.png</sub></a>
</p>
</div>
<div id="outline-container-org86a7253" class="outline-3">
<h3 id="org86a7253">Descripción de los módulos principales</h3>
<div class="outline-text-3" id="text-org86a7253">
</div>
<div id="outline-container-orgd5586e7" class="outline-4">
<h4 id="orgd5586e7">1. Verificación de procesos sospechosos</h4>
<div class="outline-text-4" id="text-orgd5586e7">
<p>
Este módulo examina los procesos en ejecución para detectar:
</p>
<ul class="org-ul">
<li>Procesos con alto consumo de CPU o memoria</li>
<li>Procesos con nombres asociados a minería de criptomonedas o malware</li>
<li>Procesos sin archivos binarios en disco (posible indicación de malware en memoria)</li>
<li>Procesos con nombres ocultos o irreconocibles</li>
</ul>
</div>
</div>
<div id="outline-container-orgdcf512d" class="outline-4">
<h4 id="orgdcf512d">2. Análisis de conexiones de red</h4>
<div class="outline-text-4" id="text-orgdcf512d">
<p>
Esta sección examina las conexiones de red para identificar:
</p>
<ul class="org-ul">
<li>Puertos conocidos por ser utilizados por botnets y malware</li>
<li>Conexiones a direcciones IP asociadas con servidores de comando y control (C&amp;C)</li>
<li>Patrones de tráfico inusuales o sospechosos</li>
<li>Comunicaciones no autorizadas con el exterior</li>
</ul>
</div>
</div>
<div id="outline-container-org99de2e1" class="outline-4">
<h4 id="org99de2e1">3. Verificación de archivos y directorios</h4>
<div class="outline-text-4" id="text-org99de2e1">
<p>
El script busca:
</p>
<ul class="org-ul">
<li>Archivos ejecutables en ubicaciones temporales</li>
<li>Archivos del sistema modificados recientemente</li>
<li>Archivos con permisos SUID/SGID sospechosos</li>
<li>Archivos ocultos con nombres o comportamientos inusuales</li>
</ul>
</div>
</div>
<div id="outline-container-org8f7335d" class="outline-4">
<h4 id="org8f7335d">4. Análisis de tareas programadas</h4>
<div class="outline-text-4" id="text-org8f7335d">
<p>
Se examinan:
</p>
<ul class="org-ul">
<li>Tareas cron para todos los usuarios</li>
<li>Archivos cron del sistema</li>
<li>Timers de systemd</li>
<li>Scripts de inicio modificados recientemente</li>
</ul>
</div>
</div>
<div id="outline-container-orgec5c79c" class="outline-4">
<h4 id="orgec5c79c">5. Verificación de usuarios y permisos</h4>
<div class="outline-text-4" id="text-orgec5c79c">
<p>
El script revisa:
</p>
<ul class="org-ul">
<li>Usuarios con privilegios elevados (UID 0)</li>
<li>Usuarios que pueden ejecutar comandos con sudo</li>
<li>Sesiones SSH activas y recientes</li>
<li>Claves de autorización SSH no autorizadas</li>
</ul>
</div>
</div>
<div id="outline-container-org10d55d8" class="outline-4">
<h4 id="org10d55d8">6. Análisis de servicios</h4>
<div class="outline-text-4" id="text-org10d55d8">
<p>
Esta sección examina:
</p>
<ul class="org-ul">
<li>Servicios activos en el sistema</li>
<li>Servicios configurados para iniciar automáticamente</li>
<li>Servicios no estándar o sospechosos</li>
<li>Servicios añadidos o modificados recientemente</li>
</ul>
</div>
</div>
<div id="outline-container-orge7b98b4" class="outline-4">
<h4 id="orge7b98b4">7. Escaneos de seguridad</h4>
<div class="outline-text-4" id="text-orge7b98b4">
<p>
El script utiliza herramientas especializadas:
</p>
<ul class="org-ul">
<li>RKHunter para detectar rootkits</li>
<li>ChkRootkit como método adicional de detección</li>
<li>Lynis para auditoría de seguridad general</li>
<li>ClamAV para escaneo de malware</li>
</ul>
</div>
</div>
<div id="outline-container-orgf2337f8" class="outline-4">
<h4 id="orgf2337f8">8. Análisis de logs</h4>
<div class="outline-text-4" id="text-orgf2337f8">
<p>
Se analizan los registros del sistema para identificar:
</p>
<ul class="org-ul">
<li>Intentos de inicio de sesión fallidos</li>
<li>Conexiones rechazadas</li>
<li>Mensajes de error críticos</li>
<li>Patrones de actividad sospechosa</li>
</ul>
</div>
</div>
<div id="outline-container-org587a9f4" class="outline-4">
<h4 id="org587a9f4">9. Análisis de tráfico de red</h4>
<div class="outline-text-4" id="text-org587a9f4">
<p>
El script examina:
</p>
<ul class="org-ul">
<li>Estadísticas de uso de red</li>
<li>Tabla de rutas para identificar redirecciones sospechosas</li>
<li>Puertos abiertos y servicios escuchando</li>
<li>Muestras de tráfico de red en tiempo real</li>
</ul>
</div>
</div>
<div id="outline-container-org36b4d21" class="outline-4">
<h4 id="org36b4d21">10. Verificación del rendimiento</h4>
<div class="outline-text-4" id="text-org36b4d21">
<p>
Se analiza:
</p>
<ul class="org-ul">
<li>Uso de CPU y memoria</li>
<li>Carga del sistema</li>
<li>Uso de disco</li>
<li>Procesos zombie y otros indicadores de actividad anómala</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org4280415" class="outline-3">
<h3 id="org4280415">Informe y resumen final</h3>
<div class="outline-text-3" id="text-org4280415">
<p>
Al finalizar todas las verificaciones, el script genera un informe detallado y un resumen que clasifica el estado del sistema en tres categorías:
</p>

<ol class="org-ol">
<li><b>Sistema comprometido</b>: Se detectaron alertas graves que indican alta probabilidad de infección.</li>
<li><b>Actividad sospechosa</b>: Se encontraron advertencias que requieren investigación adicional.</li>
<li><b>Sistema limpio</b>: No se detectaron indicios claros de compromiso.</li>
</ol>

<p>
El informe completo se guarda en el directorio <code>/var/log/security_checks/</code> con una marca de tiempo para referencia futura y análisis comparativo.
</p>
</div>
</div>
</div>
<div id="outline-container-orge5ca4b9" class="outline-2">
<h2 id="orge5ca4b9">Uso práctico del script</h2>
<div class="outline-text-2" id="text-orge5ca4b9">
</div>
<div id="outline-container-org0822fa2" class="outline-3">
<h3 id="org0822fa2">Requisitos previos</h3>
<div class="outline-text-3" id="text-org0822fa2">
<p>
Antes de ejecutar el script, asegúrate de tener:
</p>

<ul class="org-ul">
<li>Un sistema Linux (preferiblemente Ubuntu o una distribución basada en Debian)</li>
<li>Acceso root o permisos de sudo</li>
<li>Conexión a Internet (para instalar las herramientas faltantes)</li>
</ul>
</div>
</div>
<div id="outline-container-orgf2a779e" class="outline-3">
<h3 id="orgf2a779e">Instalación y ejecución</h3>
<div class="outline-text-3" id="text-orgf2a779e">
<ol class="org-ol">
<li>Copia el script completo en un archivo llamado <code>botnet_detector.sh</code></li>
<li>Dale permisos de ejecución:</li>
</ol>

<div class="org-src-container">
<pre class="src src-bash">chmod +x botnet_detector.sh
</pre>
</div>

<ol class="org-ol">
<li>Ejecuta el script como root:</li>
</ol>

<div class="org-src-container">
<pre class="src src-bash">sudo ./botnet_detector.sh
</pre>
</div>

<ol class="org-ol">
<li>El script automáticamente instalará las herramientas necesarias si no están presentes.</li>
</ol>
</div>
</div>
<div id="outline-container-org44bf35d" class="outline-3">
<h3 id="org44bf35d">Automatización</h3>
<div class="outline-text-3" id="text-org44bf35d">
<p>
Para monitorear regularmente tu sistema, puedes configurar el script como una tarea programada:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Editar crontab</span>
sudo crontab -e

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">A&#241;adir una l&#237;nea para ejecutar el script semanalmente (por ejemplo, cada domingo a las 3:00 AM)</span>
0 3 * * 0 /ruta/al/botnet_detector.sh
</pre>
</div>

<p>
El informe se guardará con la fecha y hora de ejecución, permitiéndote comparar resultados a lo largo del tiempo.
</p>
</div>
</div>
</div>
<div id="outline-container-orgf1658e2" class="outline-2">
<h2 id="orgf1658e2">Signos comunes de infección por botnet</h2>
<div class="outline-text-2" id="text-orgf1658e2">
<p>
Además de las verificaciones realizadas por el script, estos son signos adicionales que podrían indicar que tu sistema está comprometido:
</p>
</div>
<div id="outline-container-orgbda72d6" class="outline-3">
<h3 id="orgbda72d6">Signos a nivel de sistema</h3>
<div class="outline-text-3" id="text-orgbda72d6">
<ul class="org-ul">
<li>Tiempos de arranque o apagado inusualmente largos</li>
<li>El sistema se vuelve significativamente más lento sin razón aparente</li>
<li>Crasheos frecuentes o pantallas azules (en Windows)</li>
<li>Programas que se cierran o abren solos</li>
<li>Cambios en la página de inicio del navegador o redirecciones web</li>
</ul>
</div>
</div>
<div id="outline-container-orgd5a4509" class="outline-3">
<h3 id="orgd5a4509">Signos a nivel de red</h3>
<div class="outline-text-3" id="text-orgd5a4509">
<ul class="org-ul">
<li>Uso de red elevado incluso cuando no estás utilizando activamente Internet</li>
<li>Quejas de tu proveedor de Internet sobre tráfico sospechoso</li>
<li>Tu dirección IP aparece en listas negras de spam</li>
<li>Tu router tiene configuraciones que no recuerdas haber cambiado</li>
</ul>
</div>
</div>
<div id="outline-container-org39bebc1" class="outline-3">
<h3 id="org39bebc1">Signos a nivel de usuario</h3>
<div class="outline-text-3" id="text-org39bebc1">
<ul class="org-ul">
<li>Cuentas de correo electrónico enviando spam sin tu conocimiento</li>
<li>Actividad en tus cuentas que no reconoces</li>
<li>Nuevos programas o extensiones del navegador que no instalaste</li>
<li>Antivirus o firewalls desactivados sin tu intervención</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-orgc7e6089" class="outline-2">
<h2 id="orgc7e6089">Mejores prácticas para prevenir infecciones</h2>
<div class="outline-text-2" id="text-orgc7e6089">
<p>
La prevención es siempre la mejor estrategia. Estas son algunas recomendaciones para mantener tu sistema seguro:
</p>

<ol class="org-ol">
<li><b>Mantén tu sistema actualizado</b>
<ul class="org-ul">
<li>Aplica parches de seguridad tan pronto como estén disponibles</li>
<li>Actualiza regularmente todas las aplicaciones</li>
</ul></li>

<li><b>Configura un firewall robusto</b>
<ul class="org-ul">
<li><p>
Utiliza UFW (Uncomplicated Firewall) en Ubuntu:
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo ufw enable
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow ssh
</pre>
</div></li>
</ul></li>

<li><b>Implementa un sistema de detección de intrusiones</b>
<ul class="org-ul">
<li>Considera herramientas como Snort, Suricata o OSSEC</li>
</ul></li>

<li><b>Monitorea la integridad del sistema</b>
<ul class="org-ul">
<li><p>
Instala AIDE (Advanced Intrusion Detection Environment):
</p>
<div class="org-src-container">
<pre class="src src-bash">sudo apt install aide
sudo aideinit
</pre>
</div></li>
</ul></li>

<li><b>Refuerza la seguridad SSH</b>
<ul class="org-ul">
<li>Desactiva el login como root</li>
<li>Utiliza autenticación por clave en lugar de contraseñas</li>
<li>Cambia el puerto por defecto</li>
</ul></li>

<li><b>Implementa el principio de mínimo privilegio</b>
<ul class="org-ul">
<li>Crea usuarios con los permisos mínimos necesarios</li>
<li>Utiliza sudo para tareas específicas en lugar de login como root</li>
</ul></li>

<li><b>Realiza backups regularmente</b>
<ul class="org-ul">
<li>Mantén copias de seguridad offline o en ubicaciones aisladas</li>
<li>Verifica periódicamente que los backups funcionen correctamente</li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-org6629fa8" class="outline-2">
<h2 id="org6629fa8">Qué hacer si encuentras un sistema comprometido</h2>
<div class="outline-text-2" id="text-org6629fa8">
<p>
Si el script detecta signos de compromiso o tienes razones para creer que tu sistema es parte de una botnet:
</p>

<ol class="org-ol">
<li><b>No apagues el sistema inmediatamente</b>
<ul class="org-ul">
<li>El análisis forense podría requerir información volátil en memoria</li>
</ul></li>

<li><b>Aísla el sistema de la red</b>
<ul class="org-ul">
<li>Desconecta físicamente el cable de red o desactiva la wifi</li>
</ul></li>

<li><b>Documenta todo</b>
<ul class="org-ul">
<li>Toma notas detalladas de lo que observas</li>
<li>Guarda los informes generados por el script</li>
</ul></li>

<li><b>Preserva evidencia</b>
<ul class="org-ul">
<li>Crea una imagen forense si es posible</li>
<li>Guarda logs y archivos relevantes</li>
</ul></li>

<li><b>Evalúa el impacto</b>
<ul class="org-ul">
<li>Determina qué datos o sistemas podrían estar comprometidos</li>
<li>Verifica cuentas y servicios críticos</li>
</ul></li>

<li><b>Reconstruye desde cero</b>
<ul class="org-ul">
<li>La reinstalación completa es generalmente más segura que intentar limpiar</li>
<li>Restaura datos desde backups verificados como limpios</li>
</ul></li>

<li><b>Aprende y mejora</b>
<ul class="org-ul">
<li>Analiza cómo ocurrió la intrusión</li>
<li>Implementa medidas adicionales para prevenir futuros incidentes</li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-org67c2ae6" class="outline-2">
<h2 id="org67c2ae6">Conclusión</h2>
<div class="outline-text-2" id="text-org67c2ae6">
<p>
La seguridad informática es un proceso continuo, no un estado final. Este script puede ayudarte a detectar posibles compromisos en tu sistema Linux, pero debe ser parte de una estrategia de seguridad más amplia que incluya buenas prácticas preventivas, monitoreo regular, y planes de respuesta a incidentes.
</p>

<p>
Utilizando Emacs y org-mode, puedes adaptar y mejorar este script según tus necesidades específicas, programar su ejecución regular, y documentar y analizar sus resultados de manera organizada.
</p>

<p>
Recuerda que ninguna herramienta automatizada puede reemplazar el conocimiento y la vigilancia humana. Mantente informado sobre nuevas amenazas y técnicas de ataque, y adapta tus defensas en consecuencia.
</p>


<p>
<a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-15-gu-a-pr-ctica-configuraci-n-de-ufw-en-ubuntu-con-scripts-y-org-mode">2025-04-15-gu-a-pr-ctica-configuraci-n-de-ufw-en-ubuntu-con-scripts-y-org-mode</a> <br>
</p>

<p>
<a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-16--fortaleciendo-la-seguridad-inform-tica-con-snort-y-aide-gu-a-completa">2025-04-16&#x2013;fortaleciendo-la-seguridad-inform-tica-con-snort-y-aide-gu-a-completa</a>
</p>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-seguridad.html">seguridad</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">linux</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-botnet.html">botnet</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-malware.html">malware</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-scripting.html">scripting</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-emacs.html">emacs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutoriales.html">tutoriales</a> </div>]]></description>
  <category><![CDATA[seguridad]]></category>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[botnet]]></category>
  <category><![CDATA[malware]]></category>
  <category><![CDATA[scripting]]></category>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[tutoriales]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-15--detectando-actividad-maliciosa-en-nuestro-sistema-linux-somos-parte-de-una-botnet-.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-15--detectando-actividad-maliciosa-en-nuestro-sistema-linux-somos-parte-de-una-botnet-.html</guid>
  <pubDate>Tue, 15 Apr 2025 08:20:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Analizando Vulnerabilidades como un Pro: Un Script Potenciado para Emacs Org-mode (ii)]]></title>
  <description><![CDATA[
<div id="outline-container-org5870351" class="outline-2">
<h2 id="org5870351">Introducción</h2>
<div class="outline-text-2" id="text-org5870351">
<p>
¿Alguna vez te has preguntado qué tan seguro está tu laptop? En este post, te llevo de la mano para transformar un script básico de detección de vulnerabilidades en una herramienta poderosa que no solo encuentra CVEs, sino que también evalúa amenazas y las presenta en el glorioso formato Org-mode de Emacs. ¡Prepárate para darle esteroides a tu análisis de seguridad!
</p>

<p>
El reto comenzó con un script que escaneaba paquetes en busca de vulnerabilidades usando la API de Vulners. Pero queríamos más: un reporte detallado con niveles de amenaza y estadísticas, todo listo para brillar en Emacs. Aquí te cuento cómo lo hice, cómo usarlo y qué resultados obtendrás.
</p>
</div>
</div>
<div id="outline-container-org5a48d84" class="outline-2">
<h2 id="org5a48d84">El Punto de Partida</h2>
<div class="outline-text-2" id="text-org5a48d84">
<p>
Primero, teníamos este script básico:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #219fd5; font-style: italic;">while</span> <span style="color: #1857a4;">IFS</span>= read -r line; <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #1857a4;">nombre</span>=$(<span style="color: #219fd5; font-weight: bold;">echo "$line" | awk '{print $1}'</span>)
    <span style="color: #1857a4;">version</span>=$(<span style="color: #219fd5; font-weight: bold;">echo "$line" | awk '{print $2}'</span>)
    <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"[+] Buscando CVEs para: $nombre $version"</span>
    <span style="color: #1857a4;">query</span>=<span style="color: #a44185;">"${nombre}%20${version}"</span>
    <span style="color: #1857a4;">response</span>=$(<span style="color: #219fd5; font-weight: bold;">curl -s "https://vulners.com/api/v3/search/lucene/?query=$query&amp;size=3"</span>)
    <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">... resto del script ...</span>
<span style="color: #219fd5; font-style: italic;">done</span> &lt; <span style="color: #a44185;">"$PACKAGE_LIST"</span>
</pre>
</div>

<p>
Este script lee una lista de paquetes, busca CVEs y genera un archivo con resultados. Funciona, pero le falta punch: no clasifica amenazas ni da detalles jugosos. ¡Hora de mejorarlo!
</p>
</div>
</div>
<div id="outline-container-org9083bb6" class="outline-2">
<h2 id="org9083bb6">Creación del Nuevo Script: Un Monstruo de Seguridad</h2>
<div class="outline-text-2" id="text-org9083bb6">
<p>
Tomé el output del script original y creé un nuevo beast que procesa los CVEs encontrados. Aquí está el resultado:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>
<span style="color: #1857a4;">OUTPUT</span>=<span style="color: #a44185;">"vulnerability_report.org"</span>
<span style="color: #1857a4;">INPUT_FILE</span>=<span style="color: #a44185;">"$1"</span>

<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"#+TITLE: Reporte de Amenazas Actuales"</span> &gt; <span style="color: #a44185;">"$OUTPUT"</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"#+DATE: $(</span><span style="color: #219fd5; font-weight: bold;">date '+%Y-%m-%d %H:%M'</span><span style="color: #a44185;">)"</span> &gt;&gt; <span style="color: #a44185;">"$OUTPUT"</span>

<span style="color: #219fd5; font-style: italic;">while</span> <span style="color: #1857a4;">IFS</span>= read -r line; <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #219fd5; font-style: italic;">if</span> [[ <span style="color: #a44185;">"$line"</span> =~ ^<span style="color: #a44185;">\*\*</span> ]]; <span style="color: #219fd5; font-style: italic;">then</span>
        <span style="color: #1857a4;">package_info</span>=$(<span style="color: #219fd5; font-weight: bold;">echo "$line" | sed 's/\*\* //'</span>)
        <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"** Paquete: $package_info"</span> &gt;&gt; <span style="color: #a44185;">"$OUTPUT"</span>
        <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"   :PROPERTIES:"</span> &gt;&gt; <span style="color: #a44185;">"$OUTPUT"</span>
        <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"   :ANALISIS: $(</span><span style="color: #219fd5; font-weight: bold;">date '+%Y-%m-%d'</span><span style="color: #a44185;">)"</span> &gt;&gt; <span style="color: #a44185;">"$OUTPUT"</span>
        <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"   :END:"</span> &gt;&gt; <span style="color: #a44185;">"$OUTPUT"</span>
    <span style="color: #219fd5; font-style: italic;">elif</span> [[ <span style="color: #a44185;">"$line"</span> =~ ^\s*-.*CVE-[0-9]{4}-[0-9]+ ]]; <span style="color: #219fd5; font-style: italic;">then</span>
        <span style="color: #1857a4;">cve</span>=$(<span style="color: #219fd5; font-weight: bold;">echo "$line" | grep -o 'CVE-[0-9]\{4\}-[0-9]\+'</span>)
        <span style="color: #1857a4;">response</span>=$(<span style="color: #219fd5; font-weight: bold;">curl -s "https://vulners.com/api/v3/search/id/?id=$cve"</span>)
        <span style="color: #1857a4;">severity</span>=$(<span style="color: #219fd5; font-weight: bold;">echo "$response" | grep -oP '"cvss_score":\s*"\K[0-9.]+' || echo "N/A"</span>)
        <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">... l&#243;gica de amenaza y detalles ...</span>
    <span style="color: #219fd5; font-style: italic;">fi</span>
    sleep 1
<span style="color: #219fd5; font-style: italic;">done</span> &lt; <span style="color: #a44185;">"$INPUT_FILE"</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Estad&#237;sticas</span>
<span style="color: #1857a4;">critical</span>=$(<span style="color: #219fd5; font-weight: bold;">grep -c "CR&#205;TICA" "$OUTPUT"</span>)
<span style="color: #1857a4;">medium</span>=$(<span style="color: #219fd5; font-weight: bold;">grep -c "MEDIA" "$OUTPUT"</span>)
<span style="color: #1857a4;">low</span>=$(<span style="color: #219fd5; font-weight: bold;">grep -c "BAJA" "$OUTPUT"</span>)
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"* Estad&#237;sticas"</span> &gt;&gt; <span style="color: #a44185;">"$OUTPUT"</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"- Amenazas Cr&#237;ticas: $critical"</span> &gt;&gt; <span style="color: #a44185;">"$OUTPUT"</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"- Amenazas Medias: $medium"</span> &gt;&gt; <span style="color: #a44185;">"$OUTPUT"</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"- Amenazas Bajas: $low"</span> &gt;&gt; <span style="color: #a44185;">"$OUTPUT"</span>
</pre>
</div>
</div>
<div id="outline-container-org1138057" class="outline-3">
<h3 id="org1138057">¿Qué hace este script?**</h3>
<div class="outline-text-3" id="text-org1138057">
<ol class="org-ol">
<li>Toma el archivo generado por el script original como entrada.</li>
<li>Consulta detalles de cada CVE usando la API de Vulners.</li>
<li>Clasifica amenazas según el puntaje CVSS:
<ul class="org-ul">
<li>≥ 7.0: <b>CRÍTICA</b></li>
<li>≥ 4.0: <b>MEDIA</b></li>
<li>&lt; 4.0: <b>BAJA</b></li>
</ul></li>
<li>Genera un reporte en Org-mode con secciones, propiedades y estadísticas.</li>
</ol>
</div>
</div>
</div>
<div id="outline-container-org514a1ad" class="outline-2">
<h2 id="org514a1ad">Cómo Usarlo</h2>
<div class="outline-text-2" id="text-org514a1ad">
<p>
Es tan fácil que hasta tu abuela podría ejecutarlo (si usa Emacs, claro):
</p>

<ol class="org-ol">
<li><p>
<b><b>Ejecuta el script original</b></b> para generar tu lista de vulnerabilidades:
</p>
<div class="org-src-container">
<pre class="src src-bash">./scan_vulnerabilities.sh &gt; vuln_output.txt
</pre>
</div></li>

<li><p>
<b><b>Lanza el nuevo script</b></b> pasándole el archivo generado:
</p>
<div class="org-src-container">
<pre class="src src-bash">./threat_analysis.sh vuln_output.txt
</pre>
</div></li>

<li><p>
<b><b>Abre el resultado en Emacs</b></b>:
</p>
<div class="org-src-container">
<pre class="src src-bash">emacs vulnerability_report.org
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-org945543c" class="outline-2">
<h2 id="org945543c">Características Estelares</h2>
<div class="outline-text-2" id="text-org945543c">
<ul class="org-ul">
<li><b><b>Formato Org-mode Nativo</b></b>: Listo para navegar con <code>C-c C-n</code> o exportar a HTML/PDF.</li>
<li><b><b>Clasificación de Amenazas</b></b>: Separa lo crítico de lo trivial.</li>
<li><b><b>Detalles Ricos</b></b>: Severidad, fechas, descripciones por CVE.</li>
<li><b><b>Estadísticas</b></b>: Resumen claro de cuántas amenazas enfrentas.</li>
<li><b><b>Personalizable</b></b>: Ajusta los umbrales de CVSS o añade más campos según necesites.</li>
</ul>
</div>
</div>
<div id="outline-container-org08709cc" class="outline-2">
<h2 id="org08709cc">Resultados que Obtendrás</h2>
<div class="outline-text-2" id="text-org08709cc">
<p>
El output es un archivo <code>vulnerability_report.org</code> que luce así:
</p>

<p>
#+BEGIN<sub>SRC</sub> org
</p>
</div>
</div>
<div id="outline-container-org9a0c987" class="outline-2">
<h2 id="org9a0c987">Resumen de Amenazas</h2>
<div class="outline-text-2" id="text-org9a0c987">
</div>
<div id="outline-container-org1389943" class="outline-3">
<h3 id="org1389943">Paquete: openssl 1.1.1</h3>
<div class="outline-text-3" id="text-org1389943">
<ul class="org-ul">
<li>CVE Analizado: CVE-2023-1234
<ul class="org-ul">
<li>Nivel de Amenaza: CRÍTICA</li>
<li>Severidad CVSS: 7.8</li>
<li>Publicado: 2023-05-01</li>
<li>Descripción: Remote code execution&#x2026;</li>
</ul></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org1977b47" class="outline-2">
<h2 id="org1977b47">Estadísticas</h2>
<div class="outline-text-2" id="text-org1977b47">
<ul class="org-ul">
<li>Amenazas Críticas: 1</li>
<li>Amenazas Medias: 0</li>
<li>Amenazas Bajas: 0</li>
</ul>
<p>
#+END<sub>SRC</sub>
</p>

<p>
En Emacs, puedes colapsar secciones con <code>TAB</code>, buscar con <code>C-s</code>, o incluso ejecutar comandos desde el buffer con <code>org-babel</code>. ¡Es seguridad con estilo!
</p>
</div>
</div>
<div id="outline-container-org03f123b" class="outline-2">
<h2 id="org03f123b">Conclusión</h2>
<div class="outline-text-2" id="text-org03f123b">
<p>
Con este script, transformamos un escaneo básico en un análisis profesional que vive feliz en Emacs. Ya no solo sabes qué vulnerabilidades tienes, sino qué tan malas son y qué hacer al respecto. ¿Listo para poner tu laptop a prueba? Descarga el script, dale caña y comparte tus resultados en los comentarios.
</p>

<blockquote>
<p>
"La seguridad no es un destino, es un viaje&#x2026; con Org-mode" - Grok 3
</p>
</blockquote>
</div>
</div>
<div id="outline-container-org5b0b31e" class="outline-2">
<h2 id="org5b0b31e">Recursos</h2>
<div class="outline-text-2" id="text-org5b0b31e">
<ul class="org-ul">
<li>[API de Vulners](<a href="https://vulners.com/api/">https://vulners.com/api/</a>)</li>
<li>[Manual de Org-mode](<a href="https://orgmode.org/manual/">https://orgmode.org/manual/</a>)</li>
</ul>

<p>
<a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-08-detecci%C3%B3n-de-vulnerabilidades-en-linux-con-bash-y-org-mode">2025-04-08-detección-de-vulnerabilidades-en-linux-con-bash-y-org-mode</a>
</p>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-seguridad.html">seguridad</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-emacs.html">emacs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-script.html">script</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-org-mode.html">org-mode</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutoriales.html">tutoriales</a> </div>]]></description>
  <category><![CDATA[seguridad]]></category>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[script]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[org-mode]]></category>
  <category><![CDATA[tutoriales]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-09-analizando-vulnerabilidades-como-un-pro:-un-script-potenciado-para-emacs-org-mode-(ii).html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-09-analizando-vulnerabilidades-como-un-pro:-un-script-potenciado-para-emacs-org-mode-(ii).html</guid>
  <pubDate>Wed, 09 Apr 2025 09:45:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Detección de Vulnerabilidades en Linux con Bash y Org Mode]]></title>
  <description><![CDATA[
<div id="outline-container-org9ce4c31" class="outline-2">
<h2 id="org9ce4c31">Introducción</h2>
<div class="outline-text-2" id="text-org9ce4c31">
<p>
En la administración de sistemas Linux, una de las tareas más críticas es mantener actualizado el sistema y mitigar cualquier <b>vulnerabilidad</b> presente. Una vulnerabilidad es una debilidad en el sistema que puede ser explotada para ganar acceso no autorizado, ejecutar código malicioso o afectar la disponibilidad y confidencialidad del sistema.
</p>

<p>
Este artículo documenta un método simple pero efectivo para identificar vulnerabilidades conocidas (CVE) en paquetes instalados en una distribución basada en Debian/Ubuntu, utilizando:
</p>

<ul class="org-ul">
<li>Herramientas de línea de comandos (Bash, `dpkg`, `curl`)</li>
<li>Consulta a la API de Vulners.com</li>
<li>Documentación automática en formato Org Mode para su exportación a PDF o HTML</li>
</ul>
</div>
</div>
<div id="outline-container-org57862a5" class="outline-2">
<h2 id="org57862a5">Herramientas necesarias</h2>
<div class="outline-text-2" id="text-org57862a5">
<p>
Antes de comenzar, asegúrate de tener instaladas las siguientes utilidades:
</p>

<ul class="org-ul">
<li>`dpkg` (instalado por defecto en Ubuntu)</li>
<li>`curl` para realizar peticiones web</li>
<li>Editor Emacs con soporte para Org Mode</li>
</ul>

<p>
Puedes instalar `curl` así:
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt update
sudo apt install curl
</pre>
</div>
</div>
</div>
<div id="outline-container-orgf2320d0" class="outline-2">
<h2 id="orgf2320d0">Extracción del listado de software instalado</h2>
<div class="outline-text-2" id="text-orgf2320d0">
<p>
Primero generamos un listado de los paquetes instalados con sus versiones:
</p>

<div class="org-src-container">
<pre class="src src-bash">dpkg-query -W -f=<span style="color: #005F00;">'${binary:Package} ${Version}\n'</span> &gt; paquetes_instalados.txt
</pre>
</div>

<p>
Este archivo será leído por nuestro script de análisis de vulnerabilidades.
</p>
</div>
</div>
<div id="outline-container-org76a2eb3" class="outline-2">
<h2 id="org76a2eb3">Script de análisis con Bash</h2>
<div class="outline-text-2" id="text-org76a2eb3">
<p>
A continuación, presentamos el script en Bash que se encarga de:
</p>

<ol class="org-ol">
<li>Leer el archivo de paquetes instalados</li>
<li>Buscar cada paquete en la API pública de <a href="https://vulners.com">Vulners</a></li>
<li>Extraer posibles CVEs relacionados</li>
<li>Generar automáticamente un informe en formato Org Mode</li>
</ol>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #4E4E4E; font-style: italic;">#</span><span style="color: #4E4E4E; font-style: italic;">!/bin/</span><span style="color: #D70000;">bash</span>

<span style="color: #004651;">OUTPUT</span>=<span style="color: #005F00;">"vulnerabilidades.org"</span>
<span style="color: #004651;">PACKAGE_LIST</span>=<span style="color: #005F00;">"paquetes_instalados.txt"</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Verifica dependencias</span>
<span style="color: #D70000;">if ! </span><span style="color: #1F55A0;">command</span> -v curl &amp;&gt; /dev/null; <span style="color: #D70000;">then</span>
    <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"Este script requiere 'curl'. Inst&#225;lalo con: sudo apt install curl"</span>
    <span style="color: #D70000;">exit</span> 1
<span style="color: #D70000;">fi</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">T&#237;tulo del archivo Org</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"#+TITLE: An&#225;lisis de Vulnerabilidades del Sistema"</span> &gt; <span style="color: #005F00;">"$OUTPUT"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"#+DATE: $(</span><span style="color: #1F55A0; font-weight: bold;">date '+%Y-%m-%d'</span><span style="color: #005F00;">)"</span> &gt;&gt; <span style="color: #005F00;">"$OUTPUT"</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"* Resultados de escaneo de vulnerabilidades"</span> &gt;&gt; <span style="color: #005F00;">"$OUTPUT"</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Obtener lista de paquetes instalados</span>
<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"[*] Obteniendo lista de paquetes..."</span>
dpkg-query -W -f=<span style="color: #005F00;">'${binary:Package} ${Version}\n'</span> &gt; <span style="color: #005F00;">"$PACKAGE_LIST"</span>

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Buscar vulnerabilidades por paquete</span>
<span style="color: #D70000;">while</span> <span style="color: #004651;">IFS</span>= read -r line; <span style="color: #D70000;">do</span>
    <span style="color: #004651;">nombre</span>=$(<span style="color: #1F55A0; font-weight: bold;">echo "$line" | awk '{print $1}'</span>)
    <span style="color: #004651;">version</span>=$(<span style="color: #1F55A0; font-weight: bold;">echo "$line" | awk '{print $2}'</span>)
    <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"[+] Buscando CVEs para: $nombre $version"</span>

    <span style="color: #004651;">query</span>=<span style="color: #005F00;">"${nombre}%20${version}"</span>
    <span style="color: #004651;">response</span>=$(<span style="color: #1F55A0; font-weight: bold;">curl -s "https://vulners.com/api/v3/search/lucene/?query=$query&amp;size=3"</span>)

    <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"** $nombre $version"</span> &gt;&gt; <span style="color: #005F00;">"$OUTPUT"</span>

    <span style="color: #D70000;">if </span><span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"$response"</span> | grep -q <span style="color: #005F00;">'"cvelist":'</span>; <span style="color: #D70000;">then</span>
        <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"   &#8594; Vulnerabilidades encontradas."</span>
        <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"   - Vulnerabilidades encontradas:"</span> &gt;&gt; <span style="color: #005F00;">"$OUTPUT"</span>
        <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"$response"</span> | grep -oP <span style="color: #005F00;">'"id":\s*"\K(CVE-[0-9\-]+)'</span> | uniq | sed <span style="color: #005F00;">'s/^/     - /'</span> &gt;&gt; <span style="color: #005F00;">"$OUTPUT"</span>
    <span style="color: #D70000;">else</span>
        <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"   &#8594; Sin vulnerabilidades encontradas."</span>
        <span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"   - Sin vulnerabilidades encontradas."</span> &gt;&gt; <span style="color: #005F00;">"$OUTPUT"</span>
    <span style="color: #D70000;">fi</span>

    sleep 1  <span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Para no sobrecargar el servidor</span>
<span style="color: #D70000;">done</span> &lt; <span style="color: #005F00;">"$PACKAGE_LIST"</span>

<span style="color: #1F55A0;">echo</span> <span style="color: #005F00;">"[&#10004;] An&#225;lisis completado. Archivo generado: $OUTPUT"</span>
</pre>
</div>

<p>
Para usarlo:
</p>

<div class="org-src-container">
<pre class="src src-bash">chmod +x check_vulnerabilities_org.sh
./check_vulnerabilities_org.sh
</pre>
</div>
</div>
</div>
<div id="outline-container-org1e11a39" class="outline-2">
<h2 id="org1e11a39">Ejemplo de resultados</h2>
<div class="outline-text-2" id="text-org1e11a39">
<p>
A continuación se muestra un extracto real generado automáticamente con el script:
</p>

<p>
#+begin<sub>example</sub>
</p>
</div>
<div id="outline-container-orgac93d32" class="outline-3">
<h3 id="orgac93d32">openssl 3.0.2-0ubuntu1.15</h3>
<div class="outline-text-3" id="text-orgac93d32">
<ul class="org-ul">
<li>Vulnerabilidades encontradas:
<ul class="org-ul">
<li>CVE-2022-0778</li>
<li>CVE-2023-0464</li>
<li>CVE-2023-2650</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org5e1cb18" class="outline-3">
<h3 id="org5e1cb18">firefox 124.0</h3>
<div class="outline-text-3" id="text-org5e1cb18">
<ul class="org-ul">
<li>Vulnerabilidades encontradas:
<ul class="org-ul">
<li>CVE-2024-29943</li>
<li>CVE-2024-29944</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org51f7d0f" class="outline-3">
<h3 id="org51f7d0f">vlc 3.0.16</h3>
<div class="outline-text-3" id="text-org51f7d0f">
<ul class="org-ul">
<li>Sin vulnerabilidades encontradas.</li>
</ul>
<p>
#+end<sub>example</sub>
</p>
</div>
</div>
</div>
<div id="outline-container-orgd156269" class="outline-2">
<h2 id="orgd156269">Exportar resultados a PDF o HTML</h2>
<div class="outline-text-2" id="text-orgd156269">
<p>
Desde Emacs, abre el archivo generado `vulnerabilidades.org` y presiona:
</p>

<ul class="org-ul">
<li>`C-c C-e l o` → Exportar a PDF</li>
<li>`C-c C-e h o` → Exportar a HTML</li>
</ul>

<p>
Esto genera un informe profesional que puedes archivar, compartir o añadir a tu blog.
</p>
</div>
</div>
<div id="outline-container-orgcdbb603" class="outline-2">
<h2 id="orgcdbb603">Recomendaciones</h2>
<div class="outline-text-2" id="text-orgcdbb603">
<ul class="org-ul">
<li>Ejecutar este script regularmente como parte de tus tareas de mantenimiento.</li>
<li>Configurar alertas automáticas de CVE con herramientas como `apticron`, `unattended-upgrades` o `lynis`.</li>
<li>Complementar con escáneres más avanzados como <b>OpenVAS</b> o <b>Lynis</b> para auditorías completas.</li>
</ul>
</div>
</div>
<div id="outline-container-orgca61169" class="outline-2">
<h2 id="orgca61169">Conclusión</h2>
<div class="outline-text-2" id="text-orgca61169">
<p>
La seguridad no es un estado, es un proceso. Automatizar la detección de vulnerabilidades con herramientas simples como Bash, APIs públicas y Org Mode nos permite mantenernos al tanto de riesgos sin depender de soluciones comerciales complejas.
</p>

<p>
Este enfoque demuestra el poder de las herramientas libres combinadas: un sistema Linux, un script Bash y la flexibilidad de Emacs.
</p>
</div>
</div>
<div id="outline-container-org574fc33" class="outline-2">
<h2 id="org574fc33">Recursos</h2>
<div class="outline-text-2" id="text-org574fc33">
<ul class="org-ul">
<li><a href="https://vulners.com">Vulners API</a></li>
<li><a href="https://nvd.nist.gov">National Vulnerability Database</a></li>
<li><a href="https://cve.mitre.org">CVE Mitre</a></li>
<li><a href="https://cisofy.com/lynis/">Lynis Auditor</a></li>
<li><a href="https://www.greenbone.net/">Greenbone/OpenVAS</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">linux</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-seguridad.html">seguridad</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-emacs.html">emacs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-orgmode.html">orgmode</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutoriales.html">tutoriales</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[seguridad]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[orgmode]]></category>
  <category><![CDATA[tutoriales]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-08-detecci%C3%B3n-de-vulnerabilidades-en-linux-con-bash-y-org-mode.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-08-detecci%C3%B3n-de-vulnerabilidades-en-linux-con-bash-y-org-mode.html</guid>
  <pubDate>Tue, 08 Apr 2025 04:55:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Scripts de Bash para Ciberseguridad en Linux: Detección y Automatización]]></title>
  <description><![CDATA[
<div id="outline-container-orga413c74" class="outline-2">
<h2 id="orga413c74"><span class="section-number-2">1.</span> Introducción</h2>
<div class="outline-text-2" id="text-1">
<p>
En el ámbito de la ciberseguridad, la automatización de tareas mediante scripts es una habilidad crucial. Los scripts de Bash en Linux ofrecen una poderosa herramienta para realizar análisis de seguridad, detección de amenazas y auditorías de sistemas. En este post, exploraremos varios scripts de Bash diseñados para mejorar la seguridad y automatizar procesos de detección en entornos Linux.
</p>
</div>
</div>
<div id="outline-container-org90a695f" class="outline-2">
<h2 id="org90a695f"><span class="section-number-2">2.</span> Script 1: Detección Básica de Ciberataques</h2>
<div class="outline-text-2" id="text-2">
<p>
Este script realiza una serie de comprobaciones básicas para detectar posibles indicios de un ciberataque en un sistema Linux.
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>

<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Iniciando detecci&#243;n b&#225;sica de ciberataques..."</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar intentos de acceso no v&#225;lidos</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Comprobando intentos de acceso no v&#225;lidos..."</span>
<span style="color: #1857a4;">invalid_attempts</span>=$(<span style="color: #219fd5; font-weight: bold;">grep "Invalid user" /var/log/auth.log | wc -l</span>)
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Se han detectado $invalid_attempts intentos de acceso no v&#225;lidos."</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar conexiones de red sospechosas</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Comprobando conexiones de red sospechosas..."</span>
<span style="color: #1857a4;">suspicious_connections</span>=$(<span style="color: #219fd5; font-weight: bold;">netstat -tuln | grep ESTABLISHED | wc -l</span>)
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Hay $suspicious_connections conexiones de red establecidas."</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Buscar archivos modificados recientemente</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Buscando archivos modificados en las &#250;ltimas 24 horas..."</span>
<span style="color: #1857a4;">modified_files</span>=$(<span style="color: #219fd5; font-weight: bold;">find /etc -mtime -1 -type f | wc -l</span>)
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Se han modificado $modified_files archivos en /etc en las &#250;ltimas 24 horas."</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar procesos sospechosos</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Comprobando procesos sospechosos..."</span>
<span style="color: #1857a4;">suspicious_processes</span>=$(<span style="color: #219fd5; font-weight: bold;">ps aux | grep -E '(nc|netcat|nmap</span><span style="color: #a44185;">)'</span> | grep -v grep | wc -l)
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Se han encontrado $suspicious_processes procesos potencialmente sospechosos."</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar cambios en archivos cr&#237;ticos del sistema</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Verificando integridad de archivos cr&#237;ticos..."</span>
<span style="color: #219fd5; font-style: italic;">if</span> [ -f /etc/passwd.bak ] &amp;&amp; <span style="color: #219fd5; font-weight: bold;">!</span> cmp -s /etc/passwd /etc/passwd.bak; <span style="color: #219fd5; font-style: italic;">then</span>
    <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"&#161;Alerta! El archivo /etc/passwd ha sido modificado."</span>
<span style="color: #219fd5; font-style: italic;">else</span>
    <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"El archivo /etc/passwd no muestra cambios."</span>
<span style="color: #219fd5; font-style: italic;">fi</span>

<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Detecci&#243;n b&#225;sica completada. Revise los resultados para identificar posibles amenazas."</span>
</pre>
</div>

<p>
Este script realiza las siguientes comprobaciones:
</p>
<ol class="org-ol">
<li>Busca intentos de acceso no válidos en el archivo de registro auth.log.</li>
<li>Verifica el número de conexiones de red establecidas.</li>
<li>Busca archivos modificados en el directorio /etc en las últimas 24 horas.</li>
<li>Comprueba la presencia de procesos potencialmente sospechosos.</li>
<li>Verifica si ha habido cambios en el archivo crítico /etc/passwd.</li>
</ol>
</div>
</div>
<div id="outline-container-org342caf9" class="outline-2">
<h2 id="org342caf9"><span class="section-number-2">3.</span> Script 2: Análisis de Intentos de Acceso No Válidos</h2>
<div class="outline-text-2" id="text-3">
<p>
Este script se enfoca en analizar los intentos de acceso no válidos en un archivo de registro específico.
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>

<span style="color: #dc3eb7;">echo</span> -n <span style="color: #a44185;">"&#191;Qu&#233; archivo deseas consultar?: "</span>
<span style="color: #dc3eb7;">read</span> -e LOG

<span style="color: #219fd5; font-style: italic;">if</span> [ -e $<span style="color: #1857a4;">LOG</span> ] ; <span style="color: #219fd5; font-style: italic;">then</span>
    grep -E <span style="color: #a44185;">'Invalid user'</span> $<span style="color: #1857a4;">LOG</span> | tee invalid_users.log
    <span style="color: #1857a4;">COUNT</span>=$(<span style="color: #219fd5; font-weight: bold;">wc -l invalid_users.log | cut -d" " -f1</span>)
    <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Hay un total de $COUNT intentos desde usuarios no v&#225;lidos."</span>
<span style="color: #219fd5; font-style: italic;">else</span>
    <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"No se ha encontrado el fichero de log."</span>
<span style="color: #219fd5; font-style: italic;">fi</span>
</pre>
</div>

<p>
Este script:
</p>
<ol class="org-ol">
<li>Solicita al usuario el nombre del archivo de registro a analizar.</li>
<li>Verifica la existencia del archivo.</li>
<li>Busca líneas que contienen "Invalid user" y las guarda en un archivo separado.</li>
<li>Cuenta y reporta el número total de intentos de acceso no válidos.</li>
</ol>
</div>
</div>
<div id="outline-container-org3aa3e5d" class="outline-2">
<h2 id="org3aa3e5d"><span class="section-number-2">4.</span> Script 3: Detección de Equipos en la Red Local</h2>
<div class="outline-text-2" id="text-4">
<p>
Este script utiliza el comando ping para detectar equipos activos en la red local.
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>

<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Detectando equipos en la red local..."</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Obtener la direcci&#243;n IP base</span>
<span style="color: #1857a4;">ip_base</span>=$(<span style="color: #219fd5; font-weight: bold;">ip addr | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d'/' -f1 | sed 's/\.[0-9]*$/./'</span>)

<span style="color: #219fd5; font-style: italic;">for</span> i<span style="color: #219fd5; font-style: italic;"> in</span> {1..254}
<span style="color: #219fd5; font-style: italic;">do</span>
   ping -c 1 $<span style="color: #1857a4;">ip_base</span>$<span style="color: #1857a4;">i</span> | grep <span style="color: #a44185;">"64 bytes"</span> | cut -d <span style="color: #a44185;">" "</span> -f 4 | tr -d <span style="color: #a44185;">":"</span> &amp;
<span style="color: #219fd5; font-style: italic;">done</span>

<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Escaneo completado."</span>
</pre>
</div>

<p>
Este script:
</p>
<ol class="org-ol">
<li>Determina automáticamente la dirección IP base de la red local.</li>
<li>Realiza un ping a todas las posibles direcciones IP en esa red.</li>
<li>Muestra las direcciones IP de los equipos que responden al ping.</li>
</ol>
</div>
</div>
<div id="outline-container-orgbad4036" class="outline-2">
<h2 id="orgbad4036"><span class="section-number-2">5.</span> Consideraciones de Seguridad</h2>
<div class="outline-text-2" id="text-5">
<p>
Al utilizar estos scripts, es importante tener en cuenta:
</p>

<ol class="org-ol">
<li>Permisos: Asegúrate de tener los permisos necesarios para ejecutar estos scripts y acceder a los archivos de sistema.</li>
<li>Uso Ético: Utiliza estos scripts solo en sistemas y redes sobre los que tengas autorización explícita.</li>
<li>Falsos Positivos: Los resultados pueden incluir falsos positivos. Siempre verifica manualmente los hallazgos importantes.</li>
<li>Actualizaciones: Mantén los scripts actualizados para adaptarse a nuevas amenazas y cambios en el sistema.</li>
</ol>


<figure id="org2152095">
<img src="post_diagram.png" alt="post_diagram.png">

</figure>


<figure id="org2c66bac">
<img src="images/post_diagram.png" alt="post_diagram.png">

</figure>
</div>
</div>
<div id="outline-container-org611afd0" class="outline-2">
<h2 id="org611afd0"><span class="section-number-2">6.</span> Conclusión</h2>
<div class="outline-text-2" id="text-6">
<p>
Los scripts de Bash son herramientas poderosas para la automatización de tareas de seguridad en Linux. Desde la detección básica de amenazas hasta el análisis de redes, estos scripts pueden mejorar significativamente la eficiencia de las auditorías de seguridad y la respuesta a incidentes. Sin embargo, es crucial utilizarlos de manera responsable y en conjunto con otras prácticas de seguridad robustas.
</p>
</div>
</div>
<div id="outline-container-org9e70459" class="outline-2">
<h2 id="org9e70459"><span class="section-number-2">7.</span> Referencias</h2>
<div class="outline-text-2" id="text-7">
<ol class="org-ol">
<li>Centro de Investigaciones Sociológicas (CIS). (2024). Barómetro mensual. <a href="https://www.cis.es/">https://www.cis.es/</a></li>
<li>RedesZone. (2017). Security Bash Scripts, un repositorio con scripts de seguridad y pentesting. <a href="https://www.redeszone.net/2017/02/20/security-bash-scripts-un-repositorio-con-scripts-de-seguridad-y-pentesting/">https://www.redeszone.net/2017/02/20/security-bash-scripts-un-repositorio-con-scripts-de-seguridad-y-pentesting/</a></li>
<li>iEspai. (2023). Explorando la Seguridad: Un Script Bash para Analizar Intentos de Acceso No Válidos en Archivos de Registro. <a href="https://www.iespai.com/2023/10/10/explorando-la-seguridad-un-script-bash-para-analizar-intentos-de-acceso-no-validos-en-archivos-de-registro/">https://www.iespai.com/2023/10/10/explorando-la-seguridad-un-script-bash-para-analizar-intentos-de-acceso-no-validos-en-archivos-de-registro/</a></li>
<li>LinkedIn Learning. (2024). Seguridad ofensiva: Bash para pentesting. <a href="https://es.linkedin.com/learning/seguridad-ofensiva-bash-para-pentesting/creacion-de-scripts-de-bash-para-la-explotacion-de-vulnerabilidades-especificas">https://es.linkedin.com/learning/seguridad-ofensiva-bash-para-pentesting/creacion-de-scripts-de-bash-para-la-explotacion-de-vulnerabilidades-especificas</a></li>
</ol>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-ciberseguridad.html">ciberseguridad</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutoriales.html">tutoriales</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-script.html">script</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">linux</a> </div>]]></description>
  <category><![CDATA[ciberseguridad]]></category>
  <category><![CDATA[tutoriales]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[script]]></category>
  <category><![CDATA[linux]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-19-scripts-de-bash-para-ciberseguridad-en-linux:-detecci%C3%B3n-y-automatizaci%C3%B3n.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-19-scripts-de-bash-para-ciberseguridad-en-linux:-detecci%C3%B3n-y-automatizaci%C3%B3n.html</guid>
  <pubDate>Wed, 19 Mar 2025 15:36:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Tutorial de Seguridad en Linux: Mínimo de Protección ante Ataques Informáticos (II)]]></title>
  <description><![CDATA[
<div id="outline-container-org8b21ed4" class="outline-2">
<h2 id="org8b21ed4">Capítulo 2: Automatización y Análisis Avanzado</h2>
<div class="outline-text-2" id="text-org8b21ed4">
</div>
<div id="outline-container-orgc67696a" class="outline-3">
<h3 id="orgc67696a">Objetivos</h3>
<div class="outline-text-3" id="text-orgc67696a">
<ul class="org-ul">
<li>Automatizar tareas de seguridad con scripts.</li>
<li>Analizar logs para detectar patrones sospechosos.</li>
<li>Generar reportes de seguridad.</li>
</ul>
</div>
</div>
<div id="outline-container-orgd0bea96" class="outline-3">
<h3 id="orgd0bea96">Paso 1: Automatizar Tareas con Scripts en Bash</h3>
<div class="outline-text-3" id="text-orgd0bea96">
<p>
Crea un script para automatizar la revisión de logs y el bloqueo de IPs sospechosas.
</p>

<ol class="org-ol">
<li><p>
Script `security<sub>monitor.sh</sub>`:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>
<span style="color: #1857a4;">LOG_FILE</span>=<span style="color: #a44185;">"/var/log/auth.log"</span>
<span style="color: #1857a4;">BAN_LIST</span>=<span style="color: #a44185;">"/etc/fail2ban/jail.local"</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Buscar IPs con m&#250;ltiples intentos fallidos</span>
<span style="color: #1857a4;">SUSPICIOUS_IPS</span>=$(<span style="color: #219fd5; font-weight: bold;">grep "Failed password" $LOG_FILE | awk '{print $(NF-3</span><span style="color: #a44185;">)}'</span> | sort | uniq -c | awk <span style="color: #a44185;">'$1 &gt; 3 {print $2}'</span>)

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Bloquear IPs sospechosas</span>
<span style="color: #219fd5; font-style: italic;">for</span> IP<span style="color: #219fd5; font-style: italic;"> in</span> $<span style="color: #1857a4;">SUSPICIOUS_IPS</span>; <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Bloqueando IP: $IP"</span>
    sudo fail2ban-client set sshd banip $<span style="color: #1857a4;">IP</span>
<span style="color: #219fd5; font-style: italic;">done</span>
</pre>
</div></li>

<li><p>
Ejecutar el script diariamente con `cron`:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo crontab -e
</pre>
</div>
<p>
Añade la siguiente línea:
</p>
<div class="org-src-container">
<pre class="src src-nil">0 0 * * * /ruta/al/script/security_monitor.sh
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-orgd476327" class="outline-3">
<h3 id="orgd476327">Paso 2: Analizar Logs con Python</h3>
<div class="outline-text-3" id="text-orgd476327">
<p>
Crea un script en Python para analizar logs y generar reportes.
</p>

<ol class="org-ol">
<li><p>
Script `log<sub>analyzer.py</sub>`:
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/usr/bin/env python3</span>
<span style="color: #219fd5; font-style: italic;">import</span> re
<span style="color: #219fd5; font-style: italic;">from</span> collections <span style="color: #219fd5; font-style: italic;">import</span> Counter

<span style="color: #1857a4;">LOG_FILE</span> = <span style="color: #a44185;">"/var/log/auth.log"</span>
<span style="color: #1857a4;">REPORT_FILE</span> = <span style="color: #a44185;">"/var/log/security_report.txt"</span>

<span style="color: #219fd5; font-style: italic;">def</span> <span style="color: #dc3eb7;">analyze_logs</span>():
    <span style="color: #219fd5; font-style: italic;">with</span> <span style="color: #dc3eb7;">open</span>(LOG_FILE, <span style="color: #a44185;">"r"</span>) <span style="color: #219fd5; font-style: italic;">as</span> <span style="color: #dc3eb7;">file</span>:
        <span style="color: #1857a4;">logs</span> = <span style="color: #dc3eb7;">file</span>.readlines()

    <span style="color: #1857a4;">failed_attempts</span> = Counter()
    <span style="color: #219fd5; font-style: italic;">for</span> log <span style="color: #219fd5; font-style: italic;">in</span> logs:
        <span style="color: #219fd5; font-style: italic;">if</span> <span style="color: #a44185;">"Failed password"</span> <span style="color: #219fd5; font-style: italic;">in</span> log:
            <span style="color: #1857a4;">ip</span> = re.search(r<span style="color: #a44185;">"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b"</span>, log).group()
            <span style="color: #1857a4;">failed_attempts</span>[ip] += 1

    <span style="color: #219fd5; font-style: italic;">with</span> <span style="color: #dc3eb7;">open</span>(REPORT_FILE, <span style="color: #a44185;">"w"</span>) <span style="color: #219fd5; font-style: italic;">as</span> report:
        report.write(<span style="color: #a44185;">"Reporte de Seguridad</span><span style="color: #2f86d2;">\n</span><span style="color: #a44185;">"</span>)
        report.write(<span style="color: #a44185;">"===================</span><span style="color: #2f86d2;">\n</span><span style="color: #a44185;">"</span>)
        <span style="color: #219fd5; font-style: italic;">for</span> ip, count <span style="color: #219fd5; font-style: italic;">in</span> failed_attempts.most_common():
            report.write(f<span style="color: #a44185;">"IP: </span>{ip}<span style="color: #a44185;"> - Intentos fallidos: </span>{count}<span style="color: #2f86d2;">\n</span><span style="color: #a44185;">"</span>)

<span style="color: #219fd5; font-style: italic;">if</span> <span style="color: #dc3eb7;">__name__</span> == <span style="color: #a44185;">"__main__"</span>:
    analyze_logs()
</pre>
</div></li>

<li><p>
Ejecutar el script:
</p>
<div class="org-src-container">
<pre class="src src-sh">python3 /ruta/al/script/log_analyzer.py
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-orgb0c2406" class="outline-3">
<h3 id="orgb0c2406">Paso 3: Generar Reportes de Seguridad</h3>
<div class="outline-text-3" id="text-orgb0c2406">
<p>
Usa los scripts anteriores para generar reportes diarios.
</p>

<ol class="org-ol">
<li><p>
Combinar ambos scripts en un solo archivo:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>
/ruta/al/script/security_monitor.sh
python3 /ruta/al/script/log_analyzer.py
</pre>
</div></li>

<li><p>
Programar la ejecución con `cron`:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo crontab -e
</pre>
</div>
<p>
Añade la siguiente línea:
</p>
<div class="org-src-container">
<pre class="src src-nil">0 1 * * * /ruta/al/script/security_report.sh
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-org963fd93" class="outline-3">
<h3 id="org963fd93">Resultados Esperados</h3>
<div class="outline-text-3" id="text-org963fd93">
<ul class="org-ul">
<li>Tareas de seguridad automatizadas.</li>
<li>Logs analizados en busca de patrones sospechosos.</li>
<li>Reportes de seguridad generados diariamente.</li>
</ul>

<p>
&#x2014;
</p>
</div>
</div>
</div>
<div id="outline-container-org35e397b" class="outline-2">
<h2 id="org35e397b">Conclusión</h2>
<div class="outline-text-2" id="text-org35e397b">
<p>
Con estos dos capítulos, has implementado un mínimo de seguridad en tu entorno Linux. Desde la configuración básica del firewall hasta la automatización de tareas y el análisis avanzado de logs, este tutorial te proporciona las herramientas necesarias para proteger tu sistema ante ataques informáticos. ¡Ahora es tu turno de adaptar y mejorar estas técnicas según tus necesidades!
</p>
</div>
</div>
<div id="outline-container-org358fc11" class="outline-2">
<h2 id="org358fc11">Recursos Adicionales</h2>
<div class="outline-text-2" id="text-org358fc11">
<ul class="org-ul">
<li><a href="https://help.ubuntu.com/community/UFW">Documentación de UFW</a></li>
<li><a href="https://www.fail2ban.org/">Documentación de Fail2Ban</a></li>
<li><a href="https://docs.python.org/3/">Documentación de Python</a></li>
</ul>

<p>
```
</p>

<p>
&#x2014;
</p>

<p>
### Características del Tutorial
</p>

<ol class="org-ol">
<li><b><b>Estructura Clara</b></b>: Dividido en 2 capítulos con objetivos, pasos y resultados.</li>
<li><b><b>Scripts Prácticos</b></b>: Incluye scripts en Bash y Python para automatizar tareas.</li>
<li><b><b>Logs y Reportes</b></b>: Enseña a monitorear logs y generar reportes de seguridad.</li>
<li><b><b>Recursos Adicionales</b></b>: Proporciona enlaces a documentación oficial.</li>
</ol>

<p>
&#x2014;
</p>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-seguridad.html">seguridad</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">linux</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-python.html">python</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-firewall.html">firewall</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-logs.html">logs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutoriales.html">tutoriales</a> </div>]]></description>
  <category><![CDATA[seguridad]]></category>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[python]]></category>
  <category><![CDATA[firewall]]></category>
  <category><![CDATA[logs]]></category>
  <category><![CDATA[tutoriales]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-18-tutorial-de-seguridad-en-linux:-m%C3%ADnimo-de-protecci%C3%B3n-ante-ataques-inform%C3%A1ticos-(ii).html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-18-tutorial-de-seguridad-en-linux:-m%C3%ADnimo-de-protecci%C3%B3n-ante-ataques-inform%C3%A1ticos-(ii).html</guid>
  <pubDate>Tue, 18 Mar 2025 20:43:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Tutorial de Seguridad en Linux: Mínimo de Protección ante Ataques Informáticos (I)]]></title>
  <description><![CDATA[
<p>
AUTHOR: Tu Nombre
</p>
<div id="outline-container-orgac7d834" class="outline-2">
<h2 id="orgac7d834">Capítulo 1: Configuración Básica de Seguridad</h2>
<div class="outline-text-2" id="text-orgac7d834">
</div>
<div id="outline-container-org6aed3b4" class="outline-3">
<h3 id="org6aed3b4">Objetivos</h3>
<div class="outline-text-3" id="text-org6aed3b4">
<ul class="org-ul">
<li>Configurar un firewall básico.</li>
<li>Deshabilitar servicios innecesarios.</li>
<li>Monitorear logs del sistema.</li>
<li>Detectar intentos de acceso no autorizados.</li>
</ul>
</div>
</div>
<div id="outline-container-org6232592" class="outline-3">
<h3 id="org6232592">Paso 1: Configurar un Firewall Básico con `ufw`</h3>
<div class="outline-text-3" id="text-org6232592">
<p>
`ufw` (Uncomplicated Firewall) es una herramienta sencilla para gestionar reglas de firewall en Linux.
</p>

<ol class="org-ol">
<li><p>
Instalar `ufw`:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo apt update &amp;&amp; sudo apt install ufw -y
</pre>
</div></li>

<li><p>
Habilitar el firewall:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo ufw enable
</pre>
</div></li>

<li>Configurar reglas básicas:
<ul class="org-ul">
<li><p>
Permitir SSH:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo ufw allow ssh
</pre>
</div></li>
<li><p>
Permitir HTTP/HTTPS:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo ufw allow http
sudo ufw allow https
</pre>
</div></li>
<li><p>
Denegar todo el tráfico por defecto:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo ufw default deny incoming
sudo ufw default allow outgoing
</pre>
</div></li>
</ul></li>

<li><p>
Verificar el estado del firewall:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo ufw status verbose
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-orga4c3880" class="outline-3">
<h3 id="orga4c3880">Paso 2: Deshabilitar Servicios Innecesarios</h3>
<div class="outline-text-3" id="text-orga4c3880">
<p>
Los servicios innecesarios pueden ser un vector de ataque. Deshabilita los que no uses.
</p>

<ol class="org-ol">
<li><p>
Listar servicios activos:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl list-unit-files --type=service | grep enabled
</pre>
</div></li>

<li><p>
Deshabilitar un servicio (por ejemplo, `apache2`):
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl stop apache2
sudo systemctl disable apache2
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-org00217f7" class="outline-3">
<h3 id="org00217f7">Paso 3: Monitorear Logs del Sistema</h3>
<div class="outline-text-3" id="text-org00217f7">
<p>
Los logs son esenciales para detectar actividad sospechosa.
</p>

<ol class="org-ol">
<li><p>
Ver logs de autenticación:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo tail -f /var/log/auth.log
</pre>
</div></li>

<li><p>
Ver logs del firewall:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo tail -f /var/log/ufw.log
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-org91d8990" class="outline-3">
<h3 id="org91d8990">Paso 4: Detectar Intentos de Acceso No Autorizados</h3>
<div class="outline-text-3" id="text-org91d8990">
<p>
Usa `fail2ban` para bloquear IPs que realicen intentos de acceso fallidos.
</p>

<ol class="org-ol">
<li><p>
Instalar `fail2ban`:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo apt install fail2ban -y
</pre>
</div></li>

<li><p>
Configurar `fail2ban` para SSH:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo nano /etc/fail2ban/jail.local
</pre>
</div>
<p>
Añade lo siguiente:
</p>
<div class="org-src-container">
<pre class="src src-nil">[sshd]
enabled = true
maxretry = 3
bantime = 3600
</pre>
</div></li>

<li><p>
Reiniciar `fail2ban`:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl restart fail2ban
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-orgf3602c2" class="outline-3">
<h3 id="orgf3602c2">Resultados Esperados</h3>
<div class="outline-text-3" id="text-orgf3602c2">
<ul class="org-ul">
<li>Firewall activo y configurado.</li>
<li>Servicios innecesarios deshabilitados.</li>
<li>Logs monitoreados en tiempo real.</li>
<li>Intentos de acceso no autorizados bloqueados.</li>
</ul>

<p>
&#x2014;
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-seguridad.html">seguridad</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">linux</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-python.html">python</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-firewall.html">firewall</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-logs.html">logs</a> </div>]]></description>
  <category><![CDATA[seguridad]]></category>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[python]]></category>
  <category><![CDATA[firewall]]></category>
  <category><![CDATA[logs]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-18-tutorial-de-seguridad-en-linux:-m%C3%ADnimo-de-protecci%C3%B3n-ante-ataques-inform%C3%A1ticos-(i).html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-18-tutorial-de-seguridad-en-linux:-m%C3%ADnimo-de-protecci%C3%B3n-ante-ataques-inform%C3%A1ticos-(i).html</guid>
  <pubDate>Tue, 18 Mar 2025 20:40:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Configuración Mínima de Seguridad con Scripts Bash y Python]]></title>
  <description><![CDATA[
<p>
Por Qwen AI
</p>
<div id="outline-container-org5ffb64a" class="outline-2">
<h2 id="org5ffb64a">Introducción</h2>
<div class="outline-text-2" id="text-org5ffb64a">
<p>
Este documento describe cómo configurar una seguridad mínima en un sistema Linux utilizando scripts escritos en <b><b>Bash</b></b> y <b><b>Python</b></b>. Las medidas incluyen:
</p>
<ul class="org-ul">
<li>Configuración básica de un <b><b>firewall</b></b> con IPTables.</li>
<li>Bloqueo de IPs sospechosas (anti-botnet).</li>
<li>Protección contra escaneos de puertos.</li>
<li>Configuración de políticas de red seguras.</li>
</ul>
</div>
</div>
<div id="outline-container-orgc1fc759" class="outline-2">
<h2 id="orgc1fc759">Configuración Básica del Firewall con IPTables (Bash)</h2>
<div class="outline-text-2" id="text-orgc1fc759">
<p>
El siguiente script configura un firewall básico utilizando IPTables para permitir solo el tráfico necesario.
</p>

<p>
<b><b>Script Bash:</b></b>
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Limpiar todas las reglas existentes</span>
iptables -F
iptables -X

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Pol&#237;tica por defecto: Denegar todo el tr&#225;fico entrante y saliente</span>
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT ACCEPT

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Permitir tr&#225;fico local (loopback)</span>
iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Permitir conexiones establecidas o relacionadas</span>
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Permitir SSH (puerto 22) desde una IP espec&#237;fica (opcional)</span>
<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Reemplaza "TU_IP" con tu direcci&#243;n IP p&#250;blica</span>
iptables -A INPUT -p tcp --dport 22 -s TU_IP -j ACCEPT

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Permitir HTTP (puerto 80) y HTTPS (puerto 443)</span>
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Registrar intentos de acceso no autorizados</span>
iptables -A INPUT -j LOG --log-prefix <span style="color: #a44185;">"IPTables-Dropped: "</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Guardar las reglas de IPTables</span>
iptables-save &gt; /etc/iptables/rules.v4
</pre>
</div>

<p>
<b><b>Notas:</b></b>
</p>
<ul class="org-ul">
<li>Asegúrate de tener permisos de superusuario (`sudo`) para ejecutar este script.</li>
<li>Si bloqueas accidentalmente el acceso SSH, puedes perder el control remoto del servidor.</li>
</ul>
</div>
</div>
<div id="outline-container-orgc0d97ed" class="outline-2">
<h2 id="orgc0d97ed">Bloqueo de IPs Sospechosas (Anti-Botnet)</h2>
<div class="outline-text-2" id="text-orgc0d97ed">
<p>
El siguiente script bloquea IPs sospechosas utilizando una lista negra predefinida.
</p>

<p>
<b><b>Script Bash:</b></b>
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Descargar una lista negra de IPs conocidas (por ejemplo, Emerging Threats)</span>
wget -q https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt -O /tmp/blocked_ips.txt

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Leer el archivo y bloquear cada IP</span>
<span style="color: #219fd5; font-style: italic;">while </span><span style="color: #dc3eb7;">read</span> -r ip; <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #219fd5; font-style: italic;">if</span> [[ $<span style="color: #1857a4;">ip</span> =~ ^[0-9]+<span style="color: #a44185;">\.</span>[0-9]+<span style="color: #a44185;">\.</span>[0-9]+<span style="color: #a44185;">\.</span>[0-9]+$ ]]; <span style="color: #219fd5; font-style: italic;">then</span>
        iptables -A INPUT -s <span style="color: #a44185;">"$ip"</span> -j DROP
        <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Bloqueada IP: $ip"</span>
    <span style="color: #219fd5; font-style: italic;">fi</span>
<span style="color: #219fd5; font-style: italic;">done</span> &lt; /tmp/blocked_ips.txt

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Guardar las reglas de IPTables</span>
iptables-save &gt; /etc/iptables/rules.v4
</pre>
</div>

<p>
<b><b>Notas:</b></b>
</p>
<ul class="org-ul">
<li>La lista negra puede actualizarse periódicamente para mantenerse al día con nuevas amenazas.</li>
<li>Puedes personalizar la fuente de la lista negra según tus necesidades.</li>
</ul>
</div>
</div>
<div id="outline-container-orgd6dd9af" class="outline-2">
<h2 id="orgd6dd9af">Protección Contra Escaneos de Puertos (Python)</h2>
<div class="outline-text-2" id="text-orgd6dd9af">
<p>
El siguiente script utiliza Python para monitorear intentos de escaneo de puertos y bloquear IPs sospechosas.
</p>

<p>
<b><b>Script Python:</b></b>
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #219fd5; font-style: italic;">import</span> os
<span style="color: #219fd5; font-style: italic;">import</span> time
<span style="color: #219fd5; font-style: italic;">from</span> collections <span style="color: #219fd5; font-style: italic;">import</span> defaultdict

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Diccionario para rastrear intentos de conexi&#243;n por IP</span>
<span style="color: #1857a4;">connection_attempts</span> = defaultdict(<span style="color: #dc3eb7;">int</span>)

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Umbral de intentos sospechosos</span>
<span style="color: #1857a4;">THRESHOLD</span> = 5
<span style="color: #1857a4;">BLOCK_TIME</span> = 60  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Tiempo en segundos para bloquear una IP</span>

<span style="color: #219fd5; font-style: italic;">def</span> <span style="color: #dc3eb7;">block_ip</span>(ip):
    <span style="color: #60a8a1; font-style: italic;">"""Bloquea una IP usando IPTables."""</span>
    os.system(f<span style="color: #a44185;">"iptables -A INPUT -s </span>{ip}<span style="color: #a44185;"> -j DROP"</span>)
    <span style="color: #dc3eb7;">print</span>(f<span style="color: #a44185;">"Bloqueada IP sospechosa: </span>{ip}<span style="color: #a44185;">"</span>)

<span style="color: #219fd5; font-style: italic;">def</span> <span style="color: #dc3eb7;">monitor_logs</span>():
    <span style="color: #60a8a1; font-style: italic;">"""Monitorea los logs del sistema en busca de intentos de conexi&#243;n."""</span>
    <span style="color: #219fd5; font-style: italic;">with</span> <span style="color: #dc3eb7;">open</span>(<span style="color: #a44185;">"/var/log/auth.log"</span>, <span style="color: #a44185;">"r"</span>) <span style="color: #219fd5; font-style: italic;">as</span> log_file:
        log_file.seek(0, 2)  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Ir al final del archivo</span>
        <span style="color: #219fd5; font-style: italic;">while</span> <span style="color: #2f86d2;">True</span>:
            <span style="color: #1857a4;">line</span> = log_file.readline()
            <span style="color: #219fd5; font-style: italic;">if</span> <span style="color: #a44185;">"Failed password"</span> <span style="color: #219fd5; font-style: italic;">in</span> line:
                <span style="color: #1857a4;">ip</span> = line.split(<span style="color: #a44185;">"from "</span>)[1].split(<span style="color: #a44185;">" port"</span>)[0]
                <span style="color: #1857a4;">connection_attempts</span>[ip] += 1
                <span style="color: #dc3eb7;">print</span>(f<span style="color: #a44185;">"Intento de conexi&#243;n desde: </span>{ip}<span style="color: #a44185;"> (</span>{connection_attempts[ip]}<span style="color: #a44185;"> intentos)"</span>)

                <span style="color: #219fd5; font-style: italic;">if</span> connection_attempts[ip] &gt;= THRESHOLD:
                    block_ip(ip)
                    time.sleep(BLOCK_TIME)
                    <span style="color: #1857a4;">connection_attempts</span>[ip] = 0  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Reiniciar contador</span>
            time.sleep(1)

<span style="color: #219fd5; font-style: italic;">if</span> <span style="color: #dc3eb7;">__name__</span> == <span style="color: #a44185;">"__main__"</span>:
    monitor_logs()
</pre>
</div>

<p>
<b><b>Notas:</b></b>
</p>
<ul class="org-ul">
<li>Este script requiere acceso a los logs del sistema (`/var/log/auth.log`).</li>
<li>Asegúrate de tener instalado Python y permisos de superusuario.</li>
</ul>
</div>
</div>
<div id="outline-container-orgd2ddd5a" class="outline-2">
<h2 id="orgd2ddd5a">Configuración de Políticas de Red Seguras (Bash)</h2>
<div class="outline-text-2" id="text-orgd2ddd5a">
<p>
El siguiente script configura políticas adicionales para mejorar la seguridad de la red.
</p>

<p>
<b><b>Script Bash:</b></b>
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Deshabilitar el redireccionamiento IP</span>
<span style="color: #dc3eb7;">echo</span> 0 &gt; /proc/sys/net/ipv4/conf/all/send_redirects
<span style="color: #dc3eb7;">echo</span> 0 &gt; /proc/sys/net/ipv4/conf/default/send_redirects

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Habilitar protecci&#243;n contra SYN Flood</span>
<span style="color: #dc3eb7;">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_syncookies

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Deshabilitar el reenv&#237;o de paquetes IPv4</span>
<span style="color: #dc3eb7;">echo</span> 0 &gt; /proc/sys/net/ipv4/ip_forward

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Habilitar protecci&#243;n contra IP Spoofing</span>
<span style="color: #219fd5; font-style: italic;">for</span> interface<span style="color: #219fd5; font-style: italic;"> in</span> $(<span style="color: #219fd5; font-weight: bold;">ls /sys/class/net | grep -v lo</span>); <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #dc3eb7;">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/$<span style="color: #1857a4;">interface</span>/rp_filter
<span style="color: #219fd5; font-style: italic;">done</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Guardar cambios en sysctl.conf</span>
cat &lt;&lt;EOF &gt;&gt; /etc/sysctl.conf
<span style="color: #a44185;">net.ipv4.conf.all.send_redirects = 0</span>
<span style="color: #a44185;">net.ipv4.conf.default.send_redirects = 0</span>
<span style="color: #a44185;">net.ipv4.tcp_syncookies = 1</span>
<span style="color: #a44185;">net.ipv4.ip_forward = 0</span>
<span style="color: #a44185;">EOF</span>

sysctl -p
</pre>
</div>

<p>
<b><b>Notas:</b></b>
</p>
<ul class="org-ul">
<li>Estas configuraciones mejoran la seguridad del sistema contra ataques comunes.</li>
<li>Asegúrate de probar los cambios en un entorno seguro antes de aplicarlos en producción.</li>
</ul>
</div>
</div>
<div id="outline-container-org12afde5" class="outline-2">
<h2 id="org12afde5">Conclusión</h2>
<div class="outline-text-2" id="text-org12afde5">
<p>
Este documento proporciona scripts básicos en Bash y Python para configurar una seguridad mínima en sistemas Linux. Recuerda que estas medidas son solo un punto de partida y deben complementarse con auditorías regulares, actualizaciones de software y mejores prácticas de seguridad.
</p>

<p>
Para más información, consulta la documentación oficial de IPTables y las recomendaciones de seguridad para tu distribución de Linux.
</p>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">linux</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-python.html">python</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-internet.html">internet</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-seguridad.html">seguridad</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutoriales.html">tutoriales</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[python]]></category>
  <category><![CDATA[internet]]></category>
  <category><![CDATA[seguridad]]></category>
  <category><![CDATA[tutoriales]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-18-configuraci%C3%B3n-m%C3%ADnima-de-seguridad-con-scripts-bash-y-python.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-18-configuraci%C3%B3n-m%C3%ADnima-de-seguridad-con-scripts-bash-y-python.html</guid>
  <pubDate>Tue, 18 Mar 2025 16:25:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Opciones para Ordenar Downloads en Linux OSs]]></title>
  <description><![CDATA[
<div id="outline-container-org721ebe2" class="outline-2">
<h2 id="org721ebe2">Introducción</h2>
<div class="outline-text-2" id="text-org721ebe2">
<p>
Este documento ofrece métodos para organizar la carpeta <code>~/Downloads</code> en Ubuntu, renombrando archivos con el prefijo <code>YYMMDD_nombre</code> (YY: últimos 2 dígitos del año, MM: mes 01-12, DD: día de modificación) y otras estrategias de ordenamiento. Las soluciones usan herramientas de terminal y Emacs.
</p>
</div>
</div>
<div id="outline-container-org23afa60" class="outline-2">
<h2 id="org23afa60">Renombrar Archivos con YYMMDD<sub>nombre</sub></h2>
<div class="outline-text-2" id="text-org23afa60">
<p>
Renombrar archivos según su fecha de modificación usando el formato solicitado.
</p>
</div>
<div id="outline-container-orgd908031" class="outline-3">
<h3 id="orgd908031">Usando `find` y `mv` en la Terminal</h3>
<div class="outline-text-3" id="text-orgd908031">
<ul class="org-ul">
<li><b>Descripción</b>: Busca archivos y los renombra con la fecha de modificación.</li>
<li><p>
<b>Comando</b>:
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #dc3eb7;">cd</span> ~/Downloads
find . -type f -exec sh -c <span style="color: #a44185;">'mv "$1" "$(</span><span style="color: #219fd5; font-weight: bold;">date -r "$1" +%y%m%d</span><span style="color: #a44185;">)_$(</span><span style="color: #219fd5; font-weight: bold;">basename "$1"</span><span style="color: #a44185;">)"'</span> _ {} <span style="color: #a44185;">\;</span>
</pre>
</div></li>
<li><b>Explicación</b>:
<ul class="org-ul">
<li><code>find . -type f</code>: Busca solo archivos (no directorios).</li>
<li><code>date -r "$1" +%y%m%d</code>: Extrae la fecha de modificación (YYMMDD).</li>
<li><code>basename "$1"</code>: Conserva el nombre original.</li>
</ul></li>
<li><b>Ejemplo</b>: <code>documento.pdf</code> → <code>250316_documento.pdf</code> (modificado el 16/03/2025).</li>
<li><b>Precaución</b>: Haz una copia de seguridad antes (ej. <code>cp -r ~/Downloads ~/Downloads_backup</code>).</li>
</ul>
</div>
</div>
<div id="outline-container-org1ef59fd" class="outline-3">
<h3 id="org1ef59fd">Script Bash para Mayor Control</h3>
<div class="outline-text-3" id="text-org1ef59fd">
<ul class="org-ul">
<li><b>Descripción</b>: Script reutilizable con manejo de conflictos.</li>
<li><p>
<b>Implementación</b>:
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #dc3eb7;">cd</span> ~/Downloads
<span style="color: #219fd5; font-style: italic;">for</span> file<span style="color: #219fd5; font-style: italic;"> in</span> *; <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #219fd5; font-style: italic;">if</span> [ -f <span style="color: #a44185;">"$file"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
        <span style="color: #1857a4;">prefix</span>=$(<span style="color: #219fd5; font-weight: bold;">stat -c %y "$file" | cut -d' ' -f1 | sed 's/-//g' | cut -c3-8</span>)
        <span style="color: #1857a4;">new_name</span>=<span style="color: #a44185;">"${prefix}_$file"</span>
        <span style="color: #219fd5; font-style: italic;">if</span> [ -e <span style="color: #a44185;">"$new_name"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
            <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Conflicto: $new_name ya existe, omitiendo..."</span>
        <span style="color: #219fd5; font-style: italic;">else</span>
            mv <span style="color: #a44185;">"$file"</span> <span style="color: #a44185;">"$new_name"</span>
        <span style="color: #219fd5; font-style: italic;">fi</span>
    <span style="color: #219fd5; font-style: italic;">fi</span>
<span style="color: #219fd5; font-style: italic;">done</span>
</pre>
</div></li>
<li><b>Uso</b>: Guarda como <code>rename_downloads.sh</code>, da permisos con <code>chmod +x rename_downloads.sh</code>, y ejecuta con <code>./rename_downloads.sh</code>.</li>
<li><b>Beneficio</b>: Evita sobrescribir archivos con nombres duplicados.</li>
</ul>
</div>
</div>
<div id="outline-container-org54158d4" class="outline-3">
<h3 id="org54158d4">Desde Emacs con Dired</h3>
<div class="outline-text-3" id="text-org54158d4">
<ul class="org-ul">
<li><b>Descripción</b>: Usa Dired para renombrar manualmente o con un script.</li>
<li><b>Pasos</b>:
<ol class="org-ol">
<li>Abre Dired: <code>C-x C-f ~/Downloads RET</code>.</li>
<li>Marca archivos con <code>m</code>.</li>
<li>Ejecuta un comando shell en los marcados: <code>! for f in %f; do mv "$f" "$(date -r "$f" +%y%m%d)_$f"; done</code>.</li>
</ol></li>
<li><p>
<b>Alternativa con Elisp</b>:
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #219fd5; font-style: italic;">defun</span> <span style="color: #dc3eb7;">rename-downloads-yymmdd</span> ()
  (<span style="color: #219fd5; font-style: italic;">interactive</span>)
  (dired <span style="color: #a44185;">"~/Downloads"</span>)
  (dired-do-shell-command
   <span style="color: #a44185;">"mv ? $(date -r ? +%y%m%d)_?"</span> nil
   (dired-get-marked-files)))
</pre>
</div>
<ul class="org-ul">
<li>Añade a <code>init.el</code> y ejecuta con <code>M-x rename-downloads-yymmdd</code>.</li>
</ul></li>
<li><b>Beneficio</b>: Integración directa en Emacs.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org8d5f5d7" class="outline-2">
<h2 id="org8d5f5d7">Otras Opciones de Ordenamiento</h2>
<div class="outline-text-2" id="text-org8d5f5d7">
<p>
Alternativas para organizar <code>~/Downloads</code> más allá del renombramiento.
</p>
</div>
<div id="outline-container-org6dc4385" class="outline-3">
<h3 id="org6dc4385">Clasificación por Tipo de Archivo</h3>
<div class="outline-text-3" id="text-org6dc4385">
<ul class="org-ul">
<li><b>Descripción</b>: Mover archivos a subcarpetas según extensión.</li>
<li><p>
<b>Comando</b>:
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #dc3eb7;">cd</span> ~/Downloads
mkdir -p Documents Images Videos Other
find . -maxdepth 1 -type f -name <span style="color: #a44185;">"*.pdf"</span> -exec mv {} Documents/ <span style="color: #a44185;">\;</span>
find . -maxdepth 1 -type f -name <span style="color: #a44185;">"*.jpg"</span> -o -name <span style="color: #a44185;">"*.png"</span> -exec mv {} Images/ <span style="color: #a44185;">\;</span>
find . -maxdepth 1 -type f -name <span style="color: #a44185;">"*.mp4"</span> -o -name <span style="color: #a44185;">"*.mkv"</span> -exec mv {} Videos/ <span style="color: #a44185;">\;</span>
find . -maxdepth 1 -type f -not -path <span style="color: #a44185;">"./*/*"</span> -exec mv {} Other/ <span style="color: #a44185;">\;</span>
</pre>
</div></li>
<li><b>Beneficio</b>: Orden visual por categoría (ej. PDFs en <code>Documents/</code>).</li>
</ul>
</div>
</div>
<div id="outline-container-org227170d" class="outline-3">
<h3 id="org227170d">Orden por Fecha en Subcarpetas</h3>
<div class="outline-text-3" id="text-org227170d">
<ul class="org-ul">
<li><b>Descripción</b>: Crear carpetas YYMMDD y mover archivos según modificación.</li>
<li><p>
<b>Comando</b>:
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="color: #dc3eb7;">cd</span> ~/Downloads
find . -type f -exec sh -c <span style="color: #a44185;">'mkdir -p "$(</span><span style="color: #219fd5; font-weight: bold;">date -r "$1" +%y%m%d</span><span style="color: #a44185;">)"; mv "$1" "$(</span><span style="color: #219fd5; font-weight: bold;">date -r "$1" +%y%m%d</span><span style="color: #a44185;">)/"'</span> _ {} <span style="color: #a44185;">\;</span>
</pre>
</div></li>
<li><b>Ejemplo</b>: Archivos del 16/03/2025 van a <code>250316/</code>.</li>
<li><b>Beneficio</b>: Agrupación cronológica sin renombrar.</li>
</ul>
</div>
</div>
<div id="outline-container-orga62937e" class="outline-3">
<h3 id="orga62937e">Automatización con `inotifywait`</h3>
<div class="outline-text-3" id="text-orga62937e">
<ul class="org-ul">
<li><b>Descripción</b>: Monitorear descargas nuevas y organizarlas automáticamente.</li>
<li><b>Implementación</b>:
<ol class="org-ol">
<li>Instala <code>inotify-tools</code>: <code>sudo apt install inotify-tools</code>.</li>
<li><p>
Script:
</p>
<div class="org-src-container">
<pre class="src src-bash">inotifywait -m ~/Downloads -e create -e moved_to |
    <span style="color: #219fd5; font-style: italic;">while </span><span style="color: #dc3eb7;">read</span> path action file; <span style="color: #219fd5; font-style: italic;">do</span>
        <span style="color: #1857a4;">prefix</span>=$(<span style="color: #219fd5; font-weight: bold;">date -r "$path$file" +%y%m%d</span>)
        mv <span style="color: #a44185;">"$path$file"</span> <span style="color: #a44185;">"$path${prefix}_$file"</span>
    <span style="color: #219fd5; font-style: italic;">done</span>
</pre>
</div></li>
<li>Ejecuta con <code>./watch_downloads.sh &amp; disown</code> para que corra en segundo plano.</li>
</ol></li>
<li><b>Beneficio</b>: Orden en tiempo real.</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org74358fe" class="outline-2">
<h2 id="org74358fe">Recomendaciones Generales</h2>
<div class="outline-text-2" id="text-org74358fe">
<ul class="org-ul">
<li><b>Copia de seguridad</b>: <code>tar -czf ~/downloads_backup.tar.gz ~/Downloads</code> antes de pruebas.</li>
<li><b>Prueba primero</b>: Usa <code>echo</code> en lugar de <code>mv</code> para simular (ej. <code>echo mv "$file" "$new_name"</code>).</li>
<li><b>Integración con Emacs</b>: Usa <code>M-x shell</code> o <code>eshell</code> para ejecutar comandos desde Emacs.</li>
</ul>
</div>
</div>
<div id="outline-container-orgfaafff4" class="outline-2">
<h2 id="orgfaafff4">Conclusión</h2>
<div class="outline-text-2" id="text-orgfaafff4">
<p>
La opción 1.1 (<code>find</code> y <code>mv</code>) es la más simple y directa para renombrar con <code>YYMMDD</code>. Para automatización, usa 2.3 (<code>inotifywait</code>). Si prefieres carpetas, opta por 2.1 o 2.2. Combina según tus necesidades: renombrar + clasificar es una solución robusta.
</p>



<hr>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">linux</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-script.html">script</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-ordenar.html">ordenar</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutoriales.html">tutoriales</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[script]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[ordenar]]></category>
  <category><![CDATA[tutoriales]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-17-opciones-para-ordenar-downloads-en-linux-oss.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-17-opciones-para-ordenar-downloads-en-linux-oss.html</guid>
  <pubDate>Mon, 17 Mar 2025 08:35:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Renombrando Archivos PDF con Fecha de Modificación en Linux]]></title>
  <description><![CDATA[
<div id="outline-container-orgbc57c70" class="outline-2">
<h2 id="orgbc57c70">Renombrando Archivos PDF con Fecha de Modificación en Linux</h2>
<div class="outline-text-2" id="text-orgbc57c70">
<p>
¿Tienes una colección de archivos PDF desorganizados y quieres renombrarlos automáticamente con un formato específico? En este post, te mostraré cómo crear un script en <b><b>Bash</b></b> que selecciona un directorio, encuentra todos los archivos `.pdf` que no tengan el prefijo `YYMMDD-nombre.pdf`, y los renombra usando la fecha de modificación del archivo. Este formato es útil para organizar documentos de manera cronológica.
</p>
</div>
<div id="outline-container-org9c480a5" class="outline-3">
<h3 id="org9c480a5">Requisitos</h3>
<div class="outline-text-3" id="text-org9c480a5">
<ul class="org-ul">
<li>Un sistema Linux (Ubuntu, Debian, Fedora, etc.).</li>
<li>Conocimientos básicos de terminal y Bash.</li>
<li>Permisos de escritura en el directorio que deseas procesar.</li>
</ul>
</div>
</div>
<div id="outline-container-org742de16" class="outline-3">
<h3 id="org742de16">Introducción</h3>
<div class="outline-text-3" id="text-org742de16">
<p>
En este post, comparto un script en Bash que automatiza el renombrado de archivos PDF en un directorio específico. El objetivo es identificar aquellos archivos que no tienen el prefijo `YYMMDD-` (donde `YY` son los últimos dos dígitos del año, `MM` el mes de 01 a 12, y `DD` el día de 01 a 31) y renombrarlos usando su fecha de modificación en ese formato. Esto es útil para organizar documentos, como trabajos finales o reportes, manteniendo un estándar claro basado en metadatos del archivo.
</p>
</div>
</div>
<div id="outline-container-org5589855" class="outline-3">
<h3 id="org5589855">El Script</h3>
<div class="outline-text-3" id="text-org5589855">
<p>
Aquí está el script Bash que realiza esta tarea:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Script para renombrar archivos PDF con fecha de modificaci&#243;n en formato YYMMDD-nombre.pdf</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar si se proporcion&#243; un directorio como argumento</span>
<span style="color: #219fd5; font-style: italic;">if</span> [ $<span style="color: #1857a4;">#</span> -ne 1 ]; <span style="color: #219fd5; font-style: italic;">then</span>
    <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Uso: $0 &lt;directorio&gt;"</span>
    <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Ejemplo: $0 /ruta/a/tus/pdfs"</span>
    <span style="color: #219fd5; font-style: italic;">exit</span> 1
<span style="color: #219fd5; font-style: italic;">fi</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Asignar el directorio proporcionado</span>
<span style="color: #1857a4;">DIRECTORY</span>=<span style="color: #a44185;">"$1"</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar si el directorio existe</span>
<span style="color: #219fd5; font-style: italic;">if</span> [ <span style="color: #219fd5; font-weight: bold;">!</span> -d <span style="color: #a44185;">"$DIRECTORY"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
    <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Error: El directorio '$DIRECTORY' no existe."</span>
    <span style="color: #219fd5; font-style: italic;">exit</span> 1
<span style="color: #219fd5; font-style: italic;">fi</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Cambiar al directorio especificado</span>
<span style="color: #dc3eb7;">cd</span> <span style="color: #a44185;">"$DIRECTORY"</span> || {
    <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Error: No se pudo acceder al directorio '$DIRECTORY'."</span>
    <span style="color: #219fd5; font-style: italic;">exit</span> 1
}

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Contador para archivos procesados</span>
<span style="color: #1857a4;">COUNT</span>=0

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Buscar archivos PDF y procesarlos</span>
<span style="color: #219fd5; font-style: italic;">for</span> file<span style="color: #219fd5; font-style: italic;"> in</span> *.pdf; <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar si hay archivos PDF en el directorio</span>
    <span style="color: #219fd5; font-style: italic;">if</span> [ <span style="color: #219fd5; font-weight: bold;">!</span> -e <span style="color: #a44185;">"$file"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
        <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"No se encontraron archivos PDF en '$DIRECTORY'."</span>
        <span style="color: #219fd5; font-style: italic;">exit</span> 0
    <span style="color: #219fd5; font-style: italic;">fi</span>

    <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Comprobar si el nombre ya tiene el prefijo YYMMDD-</span>
    <span style="color: #219fd5; font-style: italic;">if</span> [[ <span style="color: #a44185;">"$file"</span> =~ ^[0-9]{6}-.*<span style="color: #a44185;">\.</span>pdf$ ]]; <span style="color: #219fd5; font-style: italic;">then</span>
        <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Saltando '$file': ya tiene el formato YYMMDD-."</span>
        <span style="color: #219fd5; font-style: italic;">continue</span>
    <span style="color: #219fd5; font-style: italic;">fi</span>

    <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Obtener la fecha de modificaci&#243;n del archivo (YYMMDD)</span>
    <span style="color: #1857a4;">MOD_DATE</span>=$(<span style="color: #219fd5; font-weight: bold;">stat -c %y "$file" | cut -d' ' -f1 | sed 's/-//g' | cut -c3-8</span>)

    <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Construir el nuevo nombre con la fecha</span>
    <span style="color: #1857a4;">NEW_NAME</span>=<span style="color: #a44185;">"${MOD_DATE}-${file}"</span>

    <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Renombrar el archivo</span>
    <span style="color: #219fd5; font-style: italic;">if</span> mv -n <span style="color: #a44185;">"$file"</span> <span style="color: #a44185;">"$NEW_NAME"</span>; <span style="color: #219fd5; font-style: italic;">then</span>
        <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Renombrado: '$file' -&gt; '$NEW_NAME'"</span>
        ((COUNT++))
    <span style="color: #219fd5; font-style: italic;">else</span>
        <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Error al renombrar '$file'. Puede que '$NEW_NAME' ya exista."</span>
    <span style="color: #219fd5; font-style: italic;">fi</span>
<span style="color: #219fd5; font-style: italic;">done</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Resumen final</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Proceso completado. Archivos renombrados: $COUNT."</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org70c44bb" class="outline-3">
<h3 id="org70c44bb">Explicación del Script</h3>
<div class="outline-text-3" id="text-org70c44bb">
<ul class="org-ul">
<li><b><b>Línea inicial</b></b>: `#!/bin/bash` indica que es un script Bash.</li>
<li><b><b>Verificación de argumentos</b></b>: Comprueba que se pase un directorio como parámetro (`$1`), mostrando un mensaje de uso si falta.</li>
<li><b><b>Validación del directorio</b></b>: Asegura que el directorio exista y sea accesible.</li>
<li><b><b>Bucle sobre PDFs</b></b>: Itera sobre todos los archivos `.pdf` en el directorio:
<ul class="org-ul">
<li>Si no hay PDFs, informa y termina.</li>
<li>Si el archivo ya tiene el prefijo `YYMMDD-` (ej. `250315-documento.pdf`), lo salta.</li>
<li>Usa `stat -c %y` para obtener la fecha de modificación (formato `YYYY-MM-DD`), extrae `YYMMDD` con `sed` y `cut`.</li>
<li>Renombra con `mv -n` (sin sobrescribir si ya existe).</li>
</ul></li>
<li><b><b>Contador</b></b>: Lleva la cuenta de archivos renombrados y muestra un resumen.</li>
</ul>
</div>
</div>
<div id="outline-container-org4e42bb5" class="outline-3">
<h3 id="org4e42bb5">Uso del Script</h3>
<div class="outline-text-3" id="text-org4e42bb5">
<ol class="org-ol">
<li>Guarda el script como `rename<sub>pdfs.sh</sub>`.</li>
<li><p>
Dale permisos de ejecución:
</p>
<div class="org-src-container">
<pre class="src src-bash">chmod +x rename_pdfs.sh
</pre>
</div></li>
<li><p>
Ejecútalo especificando un directorio:
</p>
<div class="org-src-container">
<pre class="src src-bash">./rename_pdfs.sh /ruta/a/tus/pdfs
</pre>
</div>
<p>
Ejemplo de salida:
</p>
<pre class="example" id="orgdedfa26">
Saltando '250314-informe.pdf': ya tiene el formato YYMMDD-.
Renombrado: 'documento.pdf' -&gt; '250315-documento.pdf'
Proceso completado. Archivos renombrados: 1.
</pre></li>
</ol>
</div>
</div>
<div id="outline-container-org6a27cd0" class="outline-3">
<h3 id="org6a27cd0">Notas y Precauciones</h3>
<div class="outline-text-3" id="text-org6a27cd0">
<ul class="org-ul">
<li><b><b>Fecha de modificación</b></b>: Depende de la última vez que el archivo fue modificado, no de su creación. Si necesitas la fecha de creación, ajusta usando `stat -c %w` (si el sistema lo soporta).</li>
<li><b><b>Colisiones</b></b>: Usa `-n` en `mv` para evitar sobrescribir archivos existentes; revisa manualmente si hay errores.</li>
<li><b><b>Portabilidad</b></b>: Probado en sistemas Linux con `stat` de GNU coreutils. En macOS, cambia `stat -c %y` por `stat -f %Sm`.</li>
</ul>
</div>
</div>
<div id="outline-container-orgacad518" class="outline-3">
<h3 id="orgacad518">Conclusión</h3>
<div class="outline-text-3" id="text-orgacad518">
<p>
Este script es una herramienta práctica para mantener tus PDFs organizados con un estándar basado en fechas. Puedes adaptarlo para otros formatos (`.docx`, `.txt`) cambiando `*.pdf` por el patrón deseado. ¡Automatiza y simplifica tu gestión de archivos en Linux!
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">Linux</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-script.html">script</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-pdf.html">pdf</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-renombrar.html">renombrar</a> </div>]]></description>
  <category><![CDATA[Linux]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[script]]></category>
  <category><![CDATA[pdf]]></category>
  <category><![CDATA[renombrar]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-15-renombrando-archivos-pdf-con-fecha-de-modificaci%C3%B3n-en-linux.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-15-renombrando-archivos-pdf-con-fecha-de-modificaci%C3%B3n-en-linux.html</guid>
  <pubDate>Sat, 15 Mar 2025 19:35:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Cómo limpiar archivos y carpetas vacías en Linux con un script Bash]]></title>
  <description><![CDATA[
<div id="outline-container-org47dd05b" class="outline-2">
<h2 id="org47dd05b">Introducción</h2>
<div class="outline-text-2" id="text-org47dd05b">
<p>
¿Alguna vez te has encontrado con archivos o carpetas vacías en tu sistema que ocupan espacio innecesario? En este post, te mostraré cómo crear un script en <b><b>Bash</b></b> que te permita limpiar automáticamente todos los archivos y carpetas con 0 bytes desde ayer hacia atrás. Este script es ideal para mantener tu sistema organizado y liberar espacio en disco.
</p>
</div>
</div>
<div id="outline-container-org0368371" class="outline-2">
<h2 id="org0368371">Requisitos</h2>
<div class="outline-text-2" id="text-org0368371">
<ul class="org-ul">
<li>Un sistema Linux (Ubuntu, Debian, Fedora, etc.).</li>
<li>Conocimientos básicos de terminal y Bash.</li>
<li>Permisos de escritura en el directorio que deseas limpiar.</li>
</ul>
</div>
</div>
<div id="outline-container-orgc528c0e" class="outline-2">
<h2 id="orgc528c0e">El Script</h2>
<div class="outline-text-2" id="text-orgc528c0e">
<p>
A continuación, te presento el script en Bash que realiza la limpieza. Puedes copiarlo y pegarlo directamente en tu terminal o guardarlo en un archivo `.sh` para ejecutarlo más tarde.
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Pide al usuario que ingrese el directorio a limpiar</span>
<span style="color: #dc3eb7;">read</span> -p <span style="color: #a44185;">"Introduce la ruta del directorio que deseas limpiar: "</span> DIRECTORIO

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verifica si el directorio existe</span>
<span style="color: #219fd5; font-style: italic;">if</span> [ <span style="color: #219fd5; font-weight: bold;">!</span> -d <span style="color: #a44185;">"$DIRECTORIO"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
  <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"El directorio $DIRECTORIO no existe."</span>
  <span style="color: #219fd5; font-style: italic;">exit</span> 1
<span style="color: #219fd5; font-style: italic;">fi</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Busca y elimina archivos vac&#237;os (0 bytes) desde ayer hacia atr&#225;s</span>
find <span style="color: #a44185;">"$DIRECTORIO"</span> -type f -size 0 -mtime +0 -exec rm -v {} <span style="color: #a44185;">\;</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Busca y elimina carpetas vac&#237;as desde ayer hacia atr&#225;s</span>
find <span style="color: #a44185;">"$DIRECTORIO"</span> -type d -empty -mtime +0 -exec rmdir -v {} <span style="color: #a44185;">\;</span>

<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Limpieza completada. Archivos y carpetas vac&#237;as eliminados."</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org1e83a4e" class="outline-2">
<h2 id="org1e83a4e">Explicación del Script</h2>
<div class="outline-text-2" id="text-org1e83a4e">
<ol class="org-ol">
<li><b><b>Pide el directorio</b></b>: El script comienza solicitando al usuario que introduzca la ruta del directorio que desea limpiar.</li>
<li><b><b>Verifica el directorio</b></b>: Se verifica si el directorio existe. Si no existe, el script termina con un mensaje de error.</li>
<li><b><b>Busca archivos vacíos</b></b>: Usa el comando `find` para buscar archivos con 0 bytes (`-size 0`) que hayan sido modificados hace más de un día (`-mtime +0`). Luego, los elimina con `rm`.</li>
<li><b><b>Busca carpetas vacías</b></b>: También usa `find` para buscar carpetas vacías (`-type d -empty`) que hayan sido modificadas hace más de un día (`-mtime +0`). Luego, las elimina con `rmdir`.</li>
<li><b><b>Mensaje de finalización</b></b>: Al terminar, el script muestra un mensaje indicando que la limpieza ha sido completada.</li>
</ol>
</div>
</div>
<div id="outline-container-orgb1fe513" class="outline-2">
<h2 id="orgb1fe513">Cómo Usar el Script</h2>
<div class="outline-text-2" id="text-orgb1fe513">
<ol class="org-ol">
<li>Copia el script en un archivo, por ejemplo, `clean<sub>empty</sub><sub>files.sh</sub>`.</li>
<li>Haz que el script sea ejecutable:
```bash
chmod +x clean<sub>empty</sub><sub>files.sh</sub></li>
</ol>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">linux</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-script.html">script</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bytes.html">bytes</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-deepseek.html">deepseek</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutoriales.html">tutoriales</a> </div>]]></description>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[script]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[bytes]]></category>
  <category><![CDATA[deepseek]]></category>
  <category><![CDATA[tutoriales]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-15-c%C3%B3mo-limpiar-archivos-y-carpetas-vac%C3%ADas-en-linux-con-un-script-bash.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-15-c%C3%B3mo-limpiar-archivos-y-carpetas-vac%C3%ADas-en-linux-con-un-script-bash.html</guid>
  <pubDate>Sat, 15 Mar 2025 19:05:00 +0100</pubDate>
</item>
</channel>
</rss>
