<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Emacs con esteroides - blogging]]></title>
<description><![CDATA[Emacs con esteroides - blogging]]></description>
<link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI//tag-blogging.html</link>
<lastBuildDate>Fri, 20 Jun 2025 17:41:36 +0200</lastBuildDate>
<item>
  <title><![CDATA[Cómo Construir un Blog con Netlify y Emacs en Menos de una Hora]]></title>
  <description><![CDATA[
<div id="outline-container-orgd6ae07a" class="outline-2">
<h2 id="orgd6ae07a">Introducción</h2>
<div class="outline-text-2" id="text-orgd6ae07a">
<p>
Crear un blog moderno y eficiente no requiere herramientas complicadas. Con <b><b>Netlify</b></b> para alojamiento y <b><b>Emacs</b></b> como editor, puedes configurar un blog estático en menos de una hora. Este tutorial está diseñado para bloggers técnicos que prefieren un entorno potente como Emacs para escribir y gestionar contenido. Usaremos Hugo como generador de sitios estáticos, Emacs con Org-mode o Markdown para escribir, y Netlify para despliegues automáticos. ¡Vamos a ello!
</p>
</div>
</div>
<div id="outline-container-org77bb69d" class="outline-2">
<h2 id="org77bb69d">Por qué elegir Netlify y Emacs</h2>
<div class="outline-text-2" id="text-org77bb69d">
<p>
Esta combinación es ideal por varias razones:
</p>
<ul class="org-ul">
<li><b><b>Emacs</b></b>: Un editor altamente personalizable con soporte para Markdown y Org-mode, perfecto para escribir y organizar contenido.</li>
<li><b><b>Netlify</b></b>: Ofrece alojamiento gratuito, despliegues automáticos vía Git y escalabilidad sin esfuerzo.</li>
<li><b><b>Sitios estáticos</b></b>: Rápidos, seguros y fáciles de mantener, ideales para blogs técnicos.</li>
<li><b><b>Eficiencia</b></b>: Todo el proceso, desde la configuración hasta el primer post, se puede completar en menos de 60 minutos.</li>
</ul>
</div>
</div>
<div id="outline-container-orga0964d0" class="outline-2">
<h2 id="orga0964d0">Requisitos previos</h2>
<div class="outline-text-2" id="text-orga0964d0">
<p>
Para seguir este tutorial, necesitarás:
</p>
<ul class="org-ul">
<li>Una cuenta de GitHub (gratis).</li>
<li>Emacs instalado con paquetes como <code>org-mode</code> o <code>markdown-mode</code> (recomendamos <code>ox-hugo</code> para exportar Org-mode a Hugo).</li>
<li>Conocimientos básicos de Git y la terminal.</li>
<li>Node.js instalado (opcional, para previsualizar localmente).</li>
<li>Hugo instalado (instrucciones a continuación).</li>
</ul>
</div>
</div>
<div id="outline-container-org2370824" class="outline-2">
<h2 id="org2370824">Configurando Emacs para blogging</h2>
<div class="outline-text-2" id="text-org2370824">
<p>
Antes de empezar, asegúrate de que Emacs esté configurado:
</p>
<ol class="org-ol">
<li><p>
Instala <code>markdown-mode</code> para editar archivos Markdown:
</p>
<div class="org-src-container">
<pre class="src src-elisp"><code>(<span style="color: #219fd5; font-style: italic;">use-package</span> <span style="color: #2f86d2;">markdown-mode</span>
  <span style="color: #dc3eb7;">:ensure</span> t
  <span style="color: #dc3eb7;">:mode</span> (<span style="color: #a44185;">"\\.md\\'"</span> . markdown-mode))
</code></pre>
</div></li>
<li><p>
Opcional: Instala <code>ox-hugo</code> para usar Org-mode con Hugo:
</p>
<div class="org-src-container">
<pre class="src src-elisp"><code>(<span style="color: #219fd5; font-style: italic;">use-package</span> <span style="color: #2f86d2;">ox-hugo</span>
  <span style="color: #dc3eb7;">:ensure</span> t
  <span style="color: #dc3eb7;">:after</span> ox)
</code></pre>
</div></li>
<li><p>
Configura atajos útiles en <code>.emacs</code> o <code>init.el</code> para crear posts rápidamente:
</p>
<div class="org-src-container">
<pre class="src src-elisp"><code>(global-set-key (kbd <span style="color: #a44185;">"C-c n"</span>) (<span style="color: #219fd5; font-style: italic;">lambda</span> () (<span style="color: #219fd5; font-style: italic;">interactive</span>) (find-file <span style="color: #a44185;">"~/mi-blog/content/posts/"</span>)))
</code></pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-orgcef991b" class="outline-2">
<h2 id="orgcef991b">Paso a paso: Configurando tu blog</h2>
<div class="outline-text-2" id="text-orgcef991b">
</div>
<div id="outline-container-org8afb511" class="outline-3">
<h3 id="org8afb511">Paso 1: Instalar Hugo</h3>
<div class="outline-text-3" id="text-org8afb511">
<p>
Hugo es un generador de sitios estáticos rápido. Instálalo así:
</p>
<ol class="org-ol">
<li><p>
En macOS:
</p>
<div class="org-src-container">
<pre class="src src-sh"><code>brew install hugo
</code></pre>
</div></li>
<li><p>
En Windows (con Chocolatey):
</p>
<div class="org-src-container">
<pre class="src src-sh"><code>choco install hugo-extended
</code></pre>
</div></li>
<li>En Linux, descarga desde <a href="https://gohugo.io/getting-started/installing/">la página oficial de Hugo</a>.</li>
<li><p>
Verifica la instalación:
</p>
<div class="org-src-container">
<pre class="src src-sh"><code>hugo version
</code></pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-orge80275a" class="outline-3">
<h3 id="orge80275a">Paso 2: Crear un nuevo sitio con Hugo</h3>
<div class="outline-text-3" id="text-orge80275a">
<ol class="org-ol">
<li><p>
Crea un directorio para tu blog:
</p>
<div class="org-src-container">
<pre class="src src-sh"><code>hugo new site mi-blog
<span style="color: #dc3eb7;">cd</span> mi-blog
</code></pre>
</div></li>
<li><p>
Inicializa un repositorio Git:
</p>
<div class="org-src-container">
<pre class="src src-sh"><code>git init
</code></pre>
</div></li>
<li><p>
Añade un tema de Hugo (por ejemplo, <code>Ananke</code>):
</p>
<div class="org-src-container">
<pre class="src src-sh"><code>git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke
</code></pre>
</div></li>
<li><p>
Configura el tema en <code>config.toml</code>:
</p>
<div class="org-src-container">
<pre class="src src-toml"><code><span style="color: #1857a4;">theme</span> = <span style="color: #a44185;">"ananke"</span>
<span style="color: #1857a4;">baseURL</span> = <span style="color: #a44185;">"https://tu-sitio.netlify.app/"</span>
<span style="color: #1857a4;">languageCode</span> = <span style="color: #a44185;">"es-ES"</span>
<span style="color: #1857a4;">title</span> = <span style="color: #a44185;">"Mi Blog con Emacs"</span>
</code></pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-orgcb5b359" class="outline-3">
<h3 id="orgcb5b359">Paso 3: Crear tu primer post en Emacs</h3>
<div class="outline-text-3" id="text-orgcb5b359">
<ol class="org-ol">
<li><p>
Genera un nuevo post con Hugo:
</p>
<div class="org-src-container">
<pre class="src src-sh"><code>hugo new posts/mi-primer-post.md
</code></pre>
</div></li>
<li>Abre el archivo <code>content/posts/mi-primer-post.md</code> en Emacs (<code>C-x C-f content/posts/mi-primer-post.md</code>).</li>
<li><p>
Escribe tu post en Markdown o usa Org-mode con <code>ox-hugo</code>. Ejemplo en Markdown:
</p>
<div class="org-src-container">
<pre class="src src-markdown"><code><span style="color: #637c9d;">---</span>
<span style="color: #ef5350;">title</span><span style="color: #637c9d;">: </span><span style="color: #a44185;">"Mi Primer Post"</span>
<span style="color: #ef5350;">date</span><span style="color: #637c9d;">: </span><span style="color: #a44185;">2025-06-19T15:00:00+02:00</span>
<span style="color: #ef5350;">draft</span><span style="color: #637c9d;">: </span><span style="color: #a44185;">false</span>
<span style="color: #637c9d;">---</span>
&#161;Bienvenidos a mi blog! Este post fue escrito en Emacs y publicado con Netlify.
</code></pre>
</div></li>
<li><p>
Si usas Org-mode con <code>ox-hugo</code>, crea un archivo <code>blog.org</code>:
</p>
<div class="org-src-container">
<pre class="src src-org"><code><span style="color: #60a8a1;">#+HUGO_BASE_DIR: ~/mi-blog</span>
<span style="color: #60a8a1;">#+HUGO_SECTION: posts</span>

<span style="color: #2f86d2; font-weight: bold;">* Mi Primer Post</span>
<span style="color: #8195b0;">:PROPERTIES:</span>
<span style="color: #60a8a1;">:EXPORT_FILE_NAME:</span> <span style="color: #60a8a1;">mi-primer-post</span>
<span style="color: #60a8a1;">:EXPORT_DATE:</span> <span style="color: #60a8a1;">2025-06-19</span>
<span style="color: #8195b0;">:END:</span>
&#161;Bienvenidos a mi blog! Este post fue escrito en Org-mode y exportado con ox-hugo.
</code></pre>
</div>
<p>
Exporta con <code>C-c C-e H A</code> (para todos los posts) o <code>C-c C-e H h</code> (para un solo post).
</p></li>
<li><p>
Previsualiza localmente:
</p>
<div class="org-src-container">
<pre class="src src-sh"><code>hugo server
</code></pre>
</div>
<p>
Abre <a href="http://localhost:1313">http://localhost:1313</a> en tu navegador.
</p></li>
</ol>
</div>
</div>
<div id="outline-container-orgb261c1e" class="outline-3">
<h3 id="orgb261c1e">Paso 4: Conectar tu blog a GitHub</h3>
<div class="outline-text-3" id="text-orgb261c1e">
<ol class="org-ol">
<li>Crea un repositorio en GitHub (<code>mi-blog</code>).</li>
<li><p>
Sube tu proyecto:
</p>
<div class="org-src-container">
<pre class="src src-sh"><code>git add .
git commit -m <span style="color: #a44185;">"Inicializa blog con Hugo y Emacs"</span>
git remote add origin https://github.com/tu-usuario/mi-blog.git
git push -u origin main
</code></pre>
</div></li>
<li>En Emacs, usa <code>magit</code> para gestionar Git:
<ul class="org-ul">
<li><code>C-x g</code> para abrir Magit.</li>
<li><code>c c</code> para crear un commit.</li>
<li><code>P p</code> para empujar al repositorio remoto.</li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-org993927b" class="outline-3">
<h3 id="org993927b">Paso 5: Desplegar en Netlify</h3>
<div class="outline-text-3" id="text-org993927b">
<ol class="org-ol">
<li>Inicia sesión en <a href="https://app.netlify.com/">Netlify</a>.</li>
<li>Selecciona <b>New site from Git</b> y conecta tu repositorio de GitHub (<code>mi-blog</code>).</li>
<li>Configura el despliegue:
<ul class="org-ul">
<li><b><b>Build command</b></b>: <code>hugo</code></li>
<li><b><b>Publish directory</b></b>: <code>public</code></li>
<li>Deja la versión de Hugo en blanco.</li>
</ul></li>
<li>Haz clic en <b>Deploy site</b>. Netlify asignará una URL (por ejemplo, <code>https://tu-sitio.netlify.app</code>).</li>
<li>Opcional: Configura un dominio personalizado en <b>Domain settings</b>.</li>
</ol>
</div>
</div>
<div id="outline-container-org86f822c" class="outline-3">
<h3 id="org86f822c">Paso 6: Publicar nuevos posts desde Emacs</h3>
<div class="outline-text-3" id="text-org86f822c">
<ol class="org-ol">
<li>Crea un nuevo post (<code>hugo new posts/nuevo-post.md</code> o usa Org-mode).</li>
<li>Edita en Emacs y guarda los cambios.</li>
<li><p>
Sube a GitHub con Magit o la terminal:
</p>
<div class="org-src-container">
<pre class="src src-sh"><code>git add .
git commit -m <span style="color: #a44185;">"A&#241;ade nuevo post"</span>
git push
</code></pre>
</div>
<p>
Netlify desplegará los cambios automáticamente.
</p></li>
</ol>
</div>
</div>
</div>
<div id="outline-container-orga6be983" class="outline-2">
<h2 id="orga6be983">Personalización adicional</h2>
<div class="outline-text-2" id="text-orga6be983">
<ul class="org-ul">
<li><b><b>Temas</b></b>: Explora <a href="https://themes.gohugo.io/">Hugo Themes</a> para cambiar el diseño.</li>
<li><b><b>SEO</b></b>: Añade <code>description</code> y <code>keywords</code> en el front-matter de los posts.</li>
<li><b><b>Netlify CMS</b></b>: Integra <a href="https://www.netlifycms.org/">Netlify CMS</a> para gestionar contenido sin Emacs.</li>
<li><b><b>Org-mode avanzado</b></b>: Usa <code>org-publish</code> para exportar múltiples posts a Hugo.</li>
<li><b><b>Analytics</b></b>: Conecta Google Analytics desde Netlify.</li>
</ul>
</div>
</div>
<div id="outline-container-org4d3a553" class="outline-2">
<h2 id="org4d3a553">Solución de problemas</h2>
<div class="outline-text-2" id="text-org4d3a553">
<ul class="org-ul">
<li><b><b>Despliegue falla en Netlify</b></b>: Verifica que <code>public</code> se genere (<code>hugo</code>) y que el comando de build sea correcto.</li>
<li><b><b>Tema no carga</b></b>: Ejecuta <code>git submodule update --init --recursive</code>.</li>
<li><b><b>Errores en Org-mode</b></b>: Asegúrate de que <code>ox-hugo</code> esté configurado correctamente (<code>:HUGO_BASE_DIR</code> apunta a tu proyecto).</li>
<li><b><b>Imágenes no se muestran</b></b>: Usa rutas relativas en <code>static/</code> (por ejemplo, <code>/images/mi-imagen.jpg</code>).</li>
</ul>
</div>
</div>
<div id="outline-container-org05384aa" class="outline-2">
<h2 id="org05384aa">Conclusión</h2>
<div class="outline-text-2" id="text-org05384aa">
<p>
¡Listo! Ahora tienes un blog estático en Netlify, gestionado desde Emacs con Markdown o Org-mode. Este flujo combina la potencia de Emacs con la simplicidad de Netlify, ideal para bloggers técnicos. Comparte tu blog o tus preguntas en <a href="https://x.com">X</a> o en los comentarios.
</p>
</div>
</div>
<div id="outline-container-orgba7e057" class="outline-2">
<h2 id="orgba7e057">Recursos adicionales</h2>
<div class="outline-text-2" id="text-orgba7e057">
<ul class="org-ul">
<li><a href="https://gohugo.io/documentation/">Documentación de Hugo</a></li>
<li><a href="https://docs.netlify.com/">Guías de Netlify</a></li>
<li><a href="https://ox-hugo.scripter.co/">Documentación de ox-hugo</a></li>
<li><a href="https://www.emacswiki.org/">Recursos de Emacs</a></li>
<li><a href="https://bloggingconemacsyai.netlify.app/">Vuelve al blog para más tutoriales</a></li>
</ul>

<div class="call-to-action">
  <p>¿Listo para lanzar tu blog con Emacs y Netlify? ¡Sigue este tutorial y comparte tu sitio!</p>
  <a href="https://app.netlify.com/start" class="btn">Comienza con Netlify</a>
</div>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-blogging.html">blogging</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-netlify.html">netlify</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-emacs.html">emacs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutorial.html">tutorial</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-desarrollo-web.html">desarrollo-web</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-blog-estático.html">blog-estático</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-markdown.html">markdown</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-org-mode.html">org-mode</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutoriales.html">tutoriales</a> </div>]]></description>
  <category><![CDATA[blogging]]></category>
  <category><![CDATA[netlify]]></category>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[tutorial]]></category>
  <category><![CDATA[desarrollo-web]]></category>
  <category><![CDATA[blog-estático]]></category>
  <category><![CDATA[markdown]]></category>
  <category><![CDATA[org-mode]]></category>
  <category><![CDATA[tutoriales]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-06-19-c%C3%B3mo-construir-un-blog-con-netlify-y-emacs-en-una-hora.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-06-19-c%C3%B3mo-construir-un-blog-con-netlify-y-emacs-en-una-hora.html</guid>
  <pubDate>Thu, 19 Jun 2025 15:09:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Mi Blog con Emacs y Esteroides: Una Aventura Potenciada por Código y IA]]></title>
  <description><![CDATA[
<div id="outline-container-org0eb157c" class="outline-2">
<h2 id="org0eb157c"><span class="section-number-2">1.</span> Bienvenidos a Mi Blog con Emacs y Esteroides</h2>
<div class="outline-text-2" id="text-1">
<p>
¡Hola, lector! Si has llegado hasta aquí, probablemente compartas mi pasión por la tecnología, el código y la libertad creativa que ofrecen herramientas como Emacs. Este blog, titulado <b>"Mi Blog con Emacs y Esteroides"</b>, no es solo un espacio para compartir ideas, sino una declaración en favor a un editor legendario y una exploración de cómo la inteligencia artificial generativa lo lleva a otro nivel. ¿Listo para el viaje? ¡Sube a bordo!
</p>
</div>
</div>
<div id="outline-container-org30a9dcc" class="outline-2">
<h2 id="org30a9dcc"><span class="section-number-2">2.</span> Emacs: El Corazón de mi Flujo de Trabajo</h2>
<div class="outline-text-2" id="text-2">
<p>
Cuando pienso en Emacs, no veo solo un editor de texto. Veo una navaja suiza digital, un compañero fiel que ha estado en los paquetes estándar de Linux desde tiempos inmemoriales. No es una herramienta pasajera ni una moda; es un pilar de la cultura del software libre, robusto y flexible como pocos. Lo uso para todo: desde escribir código en Python o Lisp hasta tomar notas en Org-mode (¡como este post!), gestionar mi correo con Gnus o incluso relajarme jugando un poco de Tetris cuando el día se pone duro.
</p>

<p>
Mi interés por Emacs nació de su promesa de control total. En un mundo lleno de interfaces rígidas, Emacs me deja moldearlo a mi gusto. ¿Quieres un atajo nuevo? Lo configuras. ¿Una función personalizada? La escribes. ¿Un entorno de escritura que se adapte a tus rarezas? Org-mode te cubre. Y lo mejor: está ahí, listo para instalarse con un simple `sudo apt install emacs` en mi distribución Linux favorita. Es como si el universo del software libre me dijera: "Aquí tienes las llaves, conduce tú".
</p>
</div>
</div>
<div id="outline-container-org9da0a53" class="outline-2">
<h2 id="org9da0a53"><span class="section-number-2">3.</span> Esteroides: El Poder de la IA Generativa</h2>
<div class="outline-text-2" id="text-3">
<p>
Pero, ¿qué pasa con lo de "Esteroides"? Aquí es donde la cosa se pone emocionante. No me conformo con un Emacs estándar (por muy poderoso que sea). He decidido inyectarle una dosis de esteroides digitales mediante la IA generativa. ¿Qué significa esto? Que uso herramientas como modelos de lenguaje avanzados para acelerar mi configuración de Emacs y generar contenido con una chispa extra.
</p>

<p>
Por ejemplo, ¿necesito un script en Emacs Lisp para crear múltiples buffers scratch? En lugar de pasar horas depurando, le pido a la IA que me dé una base sólida y luego la ajusto a mi gusto. ¿Quiero un diseño personalizado para `org-static-blog` (la magia detrás de este sitio)? La IA me ayuda a generar CSS elegante y funcional en minutos. Y cuando se trata de escribir, como este mismo post, la IA me asiste con ideas, estructuras y hasta un toque de estilo, dejándome libre para enfocarme en lo que importa: mis pensamientos.
</p>

<p>
Los "esteroides" son esa capa de potencia que transforma Emacs de un editor excelente a un compañero creativo imparable. Es como si le pusiera un motor turbo a una bicicleta clásica: sigue siendo la misma máquina que amo, pero ahora vuela.
</p>
</div>
</div>
<div id="outline-container-org3749f80" class="outline-2">
<h2 id="org3749f80"><span class="section-number-2">4.</span> Un Blog con Alma y Tecnología</h2>
<div class="outline-text-2" id="text-4">
<p>
Este blog es el resultado de esa combinación. Aquí encontrarás reflexiones sobre Emacs, tutoriales para sacarle el máximo provecho, y experimentos con IA generativa que dan vida a mis palabras. Uso `org-static-blog` para publicar todo desde archivos Org-mode, lo que significa que cada post empieza como un documento vivo en mi Emacs, lleno de notas, enlaces y ajustes, antes de convertirse en las páginas que ves.
</p>

<p>
¿Por qué "Mi Blog con Emacs y Esteroides"? Porque refleja mi viaje: un editor clásico que nunca envejece, potenciado por las herramientas del futuro. Es mi rincón para compartir, aprender y, con suerte, inspirar a otros a explorar este universo de posibilidades.
</p>
</div>
</div>
<div id="outline-container-orgabfad28" class="outline-2">
<h2 id="orgabfad28"><span class="section-number-2">5.</span> ¿Qué viene después?</h2>
<div class="outline-text-2" id="text-5">
<p>
Si te apasiona Emacs, Linux, o la IA, este es tu lugar. Próximamente hablaré de cómo configuro mi `init.el` con ayuda de IA, trucos de Org-mode para la productividad, y quizás alguna locura como generar poesía con Lisp y modelos de lenguaje. ¿Tienes ideas o sugerencias? Escríbeme a <a href="mailto:mybloggingnotes@gmail.com">mybloggingnotes@gmail.com</a>; este blog también es un diálogo.
</p>

<p>
Así que, ponte cómodo, abre tu Emacs (o instálalo si aún no lo tienes), y acompáñame en esta aventura. ¡Con Emacs y un toque de esteroides, el límite es nuestra imaginación!
</p>

<p style="text-align: center; font-size: 0.9em; color: #777;">
<b>Escrito desde Emacs, potenciado por IA, y publicado con `org-static-blog`.</b>
</p>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-emacs.html">emacs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-blogging.html">blogging</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[blogging]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-02-26-mi-blog-con-emacs-y-esteroides:-una-aventura-potenciada-por-c%C3%B3digo-y-ia.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-02-26-mi-blog-con-emacs-y-esteroides:-una-aventura-potenciada-por-c%C3%B3digo-y-ia.html</guid>
  <pubDate>Wed, 26 Feb 2025 15:16:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Gestionando Dos Blogs Diferentes con org-static-blog en Emacs]]></title>
  <description><![CDATA[
<div id="outline-container-org80378d5" class="outline-2">
<h2 id="org80378d5"><span class="section-number-2">1.</span> Introducción</h2>
<div class="outline-text-2" id="text-1">
<p>
`org-static-blog` es una herramienta poderosa para crear blogs estáticos desde Emacs, pero por defecto está diseñada para manejar un solo blog. Si quieres trabajar con dos blogs diferentes (por ejemplo, uno personal y otro profesional), necesitas ajustar tu configuración en Emacs 28 para que soporte múltiples instancias. En este artículo, te guiaré paso a paso para lograrlo.
</p>
</div>
</div>
<div id="outline-container-org86d4db5" class="outline-2">
<h2 id="org86d4db5"><span class="section-number-2">2.</span> Estrategia general</h2>
<div class="outline-text-2" id="text-2">
<p>
La clave para manejar dos blogs con `org-static-blog` es usar configuraciones separadas para cada uno, almacenadas en variables distintas, y luego alternar entre ellas según el blog que estés editando o publicando. Esto implica:
</p>
<ul class="org-ul">
<li>Tener directorios separados para posts y publicaciones.</li>
<li>Definir plantillas y parámetros específicos por blog.</li>
<li>Usar funciones personalizadas en Emacs para cambiar entre configuraciones.</li>
</ul>
</div>
</div>
<div id="outline-container-org3a30d71" class="outline-2">
<h2 id="org3a30d71"><span class="section-number-2">3.</span> Configuración inicial</h2>
<div class="outline-text-2" id="text-3">
<p>
Primero, asegúrate de tener `org-static-blog` instalado en Emacs 28 (instálalo con `M-x package-install RET org-static-blog` si no lo has hecho). Luego, organiza tus directorios. Por ejemplo:
</p>
<ul class="org-ul">
<li>Blog 1 (personal): `~/blog-personal/`</li>
<li>Blog 2 (profesional): `~/blog-profesional/`</li>
</ul>

<p>
Dentro de cada directorio, crea subdirectorios para posts y publicaciones:
</p>
<ul class="org-ul">
<li>`~/blog-personal/posts/` y `~/blog-personal/public/`</li>
<li>`~/blog-profesional/posts/` y `~/blog-profesional/public/`</li>
</ul>
</div>
</div>
<div id="outline-container-org7c27211" class="outline-2">
<h2 id="org7c27211"><span class="section-number-2">4.</span> Configurar las variables para cada blog</h2>
<div class="outline-text-2" id="text-4">
<p>
En tu `init.el`, define las configuraciones de ambos blogs usando variables personalizadas. Aquí un ejemplo:
</p>

<p>
```emacs-lisp
;; Configuración para Blog Personal
(defvar my-blog-personal-settings
  '((org-static-blog-publish-title . "Blog Personal")
    (org-static-blog-publish-url . "<a href="https://mi-blog-personal.com/">https://mi-blog-personal.com/</a>")
    (org-static-blog-publish-directory . "~/blog-personal/public/")
    (org-static-blog-posts-directory . "~/blog-personal/posts/")
    (org-static-blog-drafts-directory . "~/blog-personal/drafts/")
    (org-static-blog-page-header . "&lt;h1&gt;Mi Blog Personal&lt;/h1&gt;")
    (org-static-blog-post-template . "&lt;h1&gt;%title&lt;/h1&gt;&lt;div&gt;%date&lt;/div&gt;%content")))
</p>

<p>
;; Configuración para Blog Profesional
(defvar my-blog-pro-settings
  '((org-static-blog-publish-title . "Blog Profesional")
    (org-static-blog-publish-url . "<a href="https://mi-blog-pro.com/">https://mi-blog-pro.com/</a>")
    (org-static-blog-publish-directory . "~/blog-profesional/public/")
    (org-static-blog-posts-directory . "~/blog-profesional/posts/")
    (org-static-blog-drafts-directory . "~/blog-profesional/drafts/")
    (org-static-blog-page-header . "&lt;h1&gt;Trabajo y Tecnología&lt;/h1&gt;")
    (org-static-blog-post-template . "&lt;h1&gt;%title&lt;/h1&gt;&lt;div&gt;%date&lt;/div&gt;&lt;div&gt;Por un experto&lt;/div&gt;%content")))
</p>

<p>
Cada lista asociativa define las variables esenciales de org-static-blog para un blog específico.
</p>

<p>
Crear funciones para alternar configuraciones Necesitas una manera de aplicar la configuración correcta antes de trabajar en un blog. Define funciones en tu init.el para esto:
</p>

<p>
emacs
(defun my-set-blog-personal ()
  "Activa la configuración del blog personal."
  (interactive)
  (dolist (setting my-blog-personal-settings)
    (set (car setting) (cdr setting)))
  (message "Configuración del Blog Personal activada"))
</p>

<p>
(defun my-set-blog-pro ()
  "Activa la configuración del blog profesional."
  (interactive)
  (dolist (setting my-blog-pro-settings)
    (set (car setting) (cdr setting)))
  (message "Configuración del Blog Profesional activada"))
</p>

<p>
M-x my-set-blog-personal configura Emacs para trabajar con el blog personal.
M-x my-set-blog-pro hace lo mismo para el blog profesional.
</p>

<p>
Crear posts para cada blog Ahora puedes crear posts en los directorios correspondientes. Por ejemplo:
</p>
</div>
<div id="outline-container-org18e7e4d" class="outline-3">
<h3 id="org18e7e4d"><span class="section-number-3">4.1.</span> Post para el Blog Personal (~/blog-personal/posts/2025-02-25-viaje.org):</h3>
<div class="outline-text-3" id="text-4-1">
<p>
org
</p>
</div>
</div>
</div>
<div id="outline-container-orgb43fc7e" class="outline-2">
<h2 id="orgb43fc7e"><span class="section-number-2">5.</span> Reflexiones</h2>
<div class="outline-text-2" id="text-5">
<p>
Hoy escribo sobre un viaje reciente que hice&#x2026;
</p>
</div>
<div id="outline-container-org5d1d03c" class="outline-3">
<h3 id="org5d1d03c"><span class="section-number-3">5.1.</span> Post para el Blog Profesional (~/blog-profesional/posts/2025-02-25-proyecto.org):</h3>
<div class="outline-text-3" id="text-5-1">
<p>
org
</p>
</div>
</div>
</div>
<div id="outline-container-org5311826" class="outline-2">
<h2 id="org5311826"><span class="section-number-2">6.</span> Detalles</h2>
<div class="outline-text-2" id="text-6">
<p>
Este post detalla un proyecto técnico en el que estoy trabajando&#x2026;
</p>

<p>
Publicar cada blog Para publicar:
</p>

<p>
Activa la configuración del blog deseado:
    M-x my-set-blog-personal para el personal.
    M-x my-set-blog-pro para el profesional.
Publica:
    M-x org-static-blog-publish-file RET para un archivo específico.
    M-x org-static-blog-publish para regenerar todo el blog.
</p>

<p>
Los archivos HTML se generarán en el directorio public/ correspondiente a cada blog.
</p>

<p>
Personalizar aún más (opcional)
</p>

<p>
Tags por blog: Usa #+TAGS: en los posts de cada blog según tus necesidades (como expliqué en mi respuesta anterior).
Estilos CSS: Añade un archivo CSS diferente en cada org-static-blog-page-header para distinguir visualmente los blogs.
Atajos de teclado: Asigna las funciones a teclas para mayor rapidez, por ejemplo:
emacs
</p>

<p>
(global-set-key (kbd "C-c b p") 'my-set-blog-personal)
(global-set-key (kbd "C-c b r") 'my-set-blog-pro)
</p>

<p>
Solución de problemas
</p>

<p>
Configuración no cambia: Verifica que las funciones my-set-blog-* estén actualizando las variables correctamente (usa C-h v org-static-blog-publish-directory para inspeccionar).
Posts mezclados: Asegúrate de que los directorios de posts sean distintos y que actives la configuración correcta antes de publicar.
Errores de publicación: Confirma que los directorios existen y tienen permisos adecuados.
</p>

<p>
Conclusión Con este método, puedes gestionar dos blogs diferentes en org-static-blog desde Emacs 28 sin conflictos. Alternar entre configuraciones con funciones personalizadas te da flexibilidad y mantiene todo organizado. Es una solución práctica para quienes, como yo, queremos separar temas personales y profesionales sin abandonar nuestro flujo de trabajo en Org-mode. ¿Qué nombres le pondrías a tus dos blogs?
TODO Próximos pasos
</p>

<p>
Probar publicar ambos blogs en un solo comando con un script Elisp.
Añadir un indicador visual en Emacs para saber qué blog está activo.
Explorar cómo sincronizar cada blog con un repositorio Git diferente.
</p>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-emacs.html">emacs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-blogging.html">blogging</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutoriales.html">tutoriales</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[blogging]]></category>
  <category><![CDATA[tutoriales]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-02-26-gestionando-dos-blogs-diferentes-con-org-static-blog-en-emacs.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-02-26-gestionando-dos-blogs-diferentes-con-org-static-blog-en-emacs.html</guid>
  <pubDate>Wed, 26 Feb 2025 08:37:00 +0100</pubDate>
</item>
</channel>
</rss>
