<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Emacs con esteroides - tutorial]]></title>
<description><![CDATA[Emacs con esteroides - tutorial]]></description>
<link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI//tag-tutorial.html</link>
<lastBuildDate>Wed, 28 May 2025 12:57:43 +0200</lastBuildDate>
<item>
  <title><![CDATA[Tutorial Emacs: Cómo Configurar use-package para Gestionar Paquetes como un Profesional]]></title>
  <description><![CDATA[
<div id="outline-container-orgb6ba867" class="outline-2">
<h2 id="orgb6ba867">Introducción a use-package: Tu Mejor Amigo en Emacs</h2>
<div class="outline-text-2" id="text-orgb6ba867">
<p>
Si estás empezando con Emacs, probablemente te has dado cuenta de que es un editor <b>increíblemente</b> personalizable, pero también puede ser abrumador. Una de las primeras cosas que querrás dominar es cómo instalar y configurar paquetes (extensiones que añaden funcionalidades). Aquí es donde entra <b><b>use-package</b></b>, una herramienta poderosa que simplifica la gestión de paquetes, organiza tu configuración y hace que Emacs sea más rápido y eficiente.
</p>

<p>
En este tutorial, te guiaré paso a paso para:
</p>

<ul class="org-ul">
<li>Entender qué es `use-package` y por qué es útil.</li>
<li>Configurar `use-package` en tu archivo de configuración de Emacs (<code>init.el</code> o <code>early-init.el</code>).</li>
<li>Instalar paquetes populares con ejemplos prácticos.</li>
<li>Personalizar configuraciones con opciones avanzadas de `use-package`.</li>
<li>Evitar errores comunes para principiantes.</li>
</ul>

<p>
No necesitas ser un experto en Emacs ni saber programar en Lisp. Este tutorial está diseñado para principiantes, con explicaciones claras y ejemplos que puedes copiar y pegar. ¡Vamos a convertir tu Emacs en una máquina bien organizada!
</p>
</div>
</div>
<div id="outline-container-orgac0a603" class="outline-2">
<h2 id="orgac0a603">¿Qué es use-package?</h2>
<div class="outline-text-2" id="text-orgac0a603">
<p>
<b><b>use-package</b></b> es una macro (una especie de atajo en Emacs Lisp) que te permite instalar, configurar y gestionar paquetes de manera sencilla. En lugar de escribir largas líneas de código para cargar paquetes, `use-package` te ofrece una sintaxis clara y estructurada. Sus principales ventajas son:
</p>

<ul class="org-ul">
<li><b><b>Organización</b></b>: Agrupa toda la configuración de un paquete en un solo bloque.</li>
<li><b><b>Carga diferida</b></b>: Solo carga paquetes cuando los necesitas, haciendo que Emacs inicie más rápido.</li>
<li><b><b>Instalación automática</b></b>: Descarga e instala paquetes si no están presentes.</li>
<li><b><b>Flexibilidad</b></b>: Permite personalizar teclas, ajustes y comportamientos fácilmente.</li>
</ul>

<p>
Por ejemplo, sin `use-package`, instalar y configurar el paquete <code>ivy</code> (un sistema de autocompletado) podría requerir varias líneas de código dispersas. Con `use-package`, todo queda limpio y en un solo lugar.
</p>
</div>
</div>
<div id="outline-container-org18c6d6f" class="outline-2">
<h2 id="org18c6d6f">Prerrequisitos</h2>
<div class="outline-text-2" id="text-org18c6d6f">
<p>
Antes de empezar, asegúrate de tener lo siguiente:
</p>

<ol class="org-ol">
<li><b><b>Emacs instalado</b></b>: Este tutorial asume que tienes Emacs 26.1 o superior (puedes verificarlo con <code>M-x emacs-version</code>).</li>
<li><b><b>Acceso al archivo de configuración</b></b>: Normalmente es <code>~/.emacs.d/init.el</code> o <code>~/.config/emacs/init.el</code>. Si no existe, lo crearemos.</li>
<li><b><b>Conexión a internet</b></b>: Necesaria para descargar paquetes.</li>
<li><b><b>Conocimiento básico de Emacs</b></b>: Saber cómo abrir Emacs, guardar archivos (<code>C-x C-s</code>) y evaluar código (<code>M-x eval-buffer</code>) es suficiente.</li>
</ol>

<p>
Si no estás familiarizado con estos conceptos, no te preocupes: explicaré cada paso con detalle.
</p>
</div>
</div>
<div id="outline-container-orgcaeb76f" class="outline-2">
<h2 id="orgcaeb76f">Paso 1: Configurar el Sistema de Paquetes de Emacs</h2>
<div class="outline-text-2" id="text-orgcaeb76f">
<p>
Emacs usa repositorios de paquetes como MELPA, ELPA y Org para descargar extensiones. Antes de usar `use-package`, debemos asegurarnos de que Emacs pueda acceder a estos repositorios.
</p>

<p>
Abre tu archivo de configuración (<code>init.el</code>). Puedes hacerlo con:
</p>

<div class="org-src-container">
<pre class="src src-sh">emacs ~/.emacs.d/init.el
</pre>
</div>

<p>
Añade el siguiente código al principio de tu <code>init.el</code> para configurar los repositorios de paquetes:
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #8195b0; font-style: italic;">;; </span><span style="color: #8195b0; font-style: italic;">Configurar repositorios de paquetes</span>
(<span style="color: #219fd5; font-style: italic;">require</span> '<span style="color: #2f86d2;">package</span>)
(add-to-list 'package-archives '(<span style="color: #a44185;">"melpa"</span> . <span style="color: #a44185;">"https://melpa.org/packages/"</span>) t)
(add-to-list 'package-archives '(<span style="color: #a44185;">"org"</span> . <span style="color: #a44185;">"https://orgmode.org/elpa/"</span>) t)
(package-initialize)

<span style="color: #8195b0; font-style: italic;">;; </span><span style="color: #8195b0; font-style: italic;">Refrescar la lista de paquetes (solo necesario la primera vez)</span>
(<span style="color: #219fd5; font-style: italic;">unless</span> package-archive-contents
  (package-refresh-contents))
</pre>
</div>

<p>
<b><b>Explicación</b></b>:
</p>
<ul class="org-ul">
<li><code>require 'package</code>: Carga el sistema de paquetes de Emacs.</li>
<li><code>add-to-list 'package-archives</code>: Añade MELPA y Org como fuentes de paquetes. MELPA tiene miles de paquetes modernos.</li>
<li><code>package-initialize</code>: Inicia el sistema de paquetes.</li>
<li><code>package-refresh-contents</code>: Descarga la lista de paquetes disponibles si es la primera vez.</li>
</ul>

<p>
Guarda el archivo (<code>C-x C-s</code>) y evalúa el código con <code>M-x eval-buffer</code> (o reinicia Emacs). Esto prepara el terreno para instalar `use-package`.
</p>
</div>
</div>
<div id="outline-container-org8300882" class="outline-2">
<h2 id="org8300882">Paso 2: Instalar use-package</h2>
<div class="outline-text-2" id="text-org8300882">
<p>
Aunque `use-package` es una herramienta poderosa, no viene incluida en Emacs por defecto. Vamos a instalarla automáticamente.
</p>

<p>
Añade este código justo después del bloque anterior en tu <code>init.el</code>:
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #8195b0; font-style: italic;">;; </span><span style="color: #8195b0; font-style: italic;">Instalar use-package si no est&#225; presente</span>
(<span style="color: #219fd5; font-style: italic;">unless</span> (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

<span style="color: #8195b0; font-style: italic;">;; </span><span style="color: #8195b0; font-style: italic;">Cargar use-package</span>
(<span style="color: #219fd5; font-style: italic;">eval-when-compile</span>
  (<span style="color: #219fd5; font-style: italic;">require</span> '<span style="color: #2f86d2;">use-package</span>))
</pre>
</div>

<p>
<b><b>Explicación</b></b>:
</p>
<ul class="org-ul">
<li><code>package-installed-p</code>: Verifica si `use-package` ya está instalado.</li>
<li><code>package-install</code>: Lo instala desde MELPA si no está presente.</li>
<li><code>eval-when-compile</code>: Optimiza la carga de `use-package` para que sea eficiente.</li>
</ul>

<p>
Guarda el archivo y evalúa con <code>M-x eval-buffer</code>. Ahora tienes `use-package` listo para usar.
</p>
</div>
</div>
<div id="outline-container-orgb34f685" class="outline-2">
<h2 id="orgb34f685">Paso 3: Usar use-package para Instalar un Paquete</h2>
<div class="outline-text-2" id="text-orgb34f685">
<p>
Para probar `use-package`, vamos a instalar y configurar <b><b>ivy</b></b>, un paquete popular que mejora el autocompletado en Emacs. Añade este bloque a tu <code>init.el</code>:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #219fd5; font-style: italic;">use-package</span> <span style="color: #2f86d2;">ivy</span>
  <span style="color: #dc3eb7;">:ensure</span> t
  <span style="color: #dc3eb7;">:demand</span> t
  <span style="color: #dc3eb7;">:config</span>
  (ivy-mode 1)
  (<span style="color: #219fd5; font-style: italic;">setq</span> ivy-use-virtual-buffers t)
  (<span style="color: #219fd5; font-style: italic;">setq</span> enable-recursive-minibuffers t))
</pre>
</div>

<p>
<b><b>Explicación del bloque</b></b>:
</p>
<ul class="org-ul">
<li><code>use-package ivy</code>: Indica que vamos a configurar el paquete <code>ivy</code>.</li>
<li><code>:ensure t</code>: Descarga e instala <code>ivy</code> automáticamente si no está presente.</li>
<li><code>:demand t</code>: Fuerza la carga de <code>ivy</code> al iniciar Emacs (normalmente, `use-package` intenta cargar paquetes solo cuando se necesitan).</li>
<li><code>:config</code>: Contiene comandos que se ejecutan <b>después</b> de cargar el paquete.</li>
<li><code>ivy-mode 1</code>: Activa el modo Ivy para autocompletado.</li>
<li><code>setq</code>: Configura opciones de Ivy, como mostrar buffers recientes y permitir minibuffers anidados.</li>
</ul>

<p>
Guarda el archivo (<code>C-x C-s</code>) y evalúa con <code>M-x eval-buffer</code>. Ahora, cuando uses comandos como <code>M-x</code> o <code>C-x C-f</code>, notarás que el autocompletado es más rápido y visual gracias a Ivy.
</p>
</div>
</div>
<div id="outline-container-org01b79e6" class="outline-2">
<h2 id="org01b79e6">Paso 4: Ejemplo Práctico – Configurar Magit con use-package</h2>
<div class="outline-text-2" id="text-org01b79e6">
<p>
Vamos a configurar otro paquete útil: <b><b>Magit</b></b>, una interfaz para Git dentro de Emacs. Este ejemplo incluye teclas personalizadas y carga diferida para optimizar el inicio.
</p>

<p>
Añade este bloque a tu <code>init.el</code>:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #219fd5; font-style: italic;">use-package</span> <span style="color: #2f86d2;">magit</span>
  <span style="color: #dc3eb7;">:ensure</span> t
  <span style="color: #dc3eb7;">:bind</span> ((<span style="color: #a44185;">"C-x g"</span> . magit-status))
  <span style="color: #dc3eb7;">:config</span>
  (<span style="color: #219fd5; font-style: italic;">setq</span> magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
</pre>
</div>

<p>
<b><b>Explicación</b></b>:
</p>
<ul class="org-ul">
<li><code>:ensure t</code>: Instala <code>magit</code> si no está presente.</li>
<li><code>:bind</code>: Asigna la tecla <code>C-x g</code> para abrir <code>magit-status</code>, la ventana principal de Magit.</li>
<li><code>:config</code>: Personaliza cómo se muestran las ventanas de Magit (en este caso, ocupando toda la pantalla).</li>
<li><b>Carga diferida</b>: Por defecto, `use-package` no carga Magit hasta que uses <code>C-x g</code>, lo que acelera el inicio de Emacs.</li>
</ul>

<p>
Guarda, evalúa (<code>M-x eval-buffer</code>) y prueba presionando <code>C-x g</code> en un proyecto con Git. Verás una interfaz limpia para gestionar commits, ramas y más.
</p>
</div>
</div>
<div id="outline-container-org4bc1bbf" class="outline-2">
<h2 id="org4bc1bbf">Paso 5: Personalización Avanzada con use-package</h2>
<div class="outline-text-2" id="text-org4bc1bbf">
<p>
Ahora que entiendes lo básico, exploremos opciones avanzadas de `use-package` para hacer tu configuración más poderosa.
</p>

<p>
<b><b>Carga condicional</b></b>:
Supongamos que quieres cargar el paquete <code>org</code> (para Org-mode) solo si estás editando un archivo `.org`. Usa esto:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #219fd5; font-style: italic;">use-package</span> <span style="color: #2f86d2;">org</span>
  <span style="color: #dc3eb7;">:ensure</span> t
  <span style="color: #dc3eb7;">:mode</span> (<span style="color: #a44185;">"\\.org\\'"</span> . org-mode)
  <span style="color: #dc3eb7;">:config</span>
  (<span style="color: #219fd5; font-style: italic;">setq</span> org-startup-folded t)
  (<span style="color: #219fd5; font-style: italic;">setq</span> org-hide-emphasis-markers t))
</pre>
</div>

<ul class="org-ul">
<li><code>:mode</code>: Activa <code>org-mode</code> automáticamente para archivos con extensión `.org`.</li>
<li><code>:config</code>: Personaliza Org-mode (por ejemplo, oculta marcadores de formato como * o /).</li>
</ul>

<p>
<b><b>Atajos globales</b></b>:
Para añadir teclas globales, usa <code>:bind</code> en un bloque vacío:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #219fd5; font-style: italic;">use-package</span> <span style="color: #2f86d2;">general</span>
  <span style="color: #dc3eb7;">:ensure</span> t
  <span style="color: #dc3eb7;">:config</span>
  (global-set-key (kbd <span style="color: #a44185;">"C-c t"</span>) 'org-todo))
</pre>
</div>

<p>
<b><b>Carga diferida con comandos</b></b>:
Para paquetes que solo usas ocasionalmente, como <code>helm</code>, configura la carga al invocar un comando:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #219fd5; font-style: italic;">use-package</span> <span style="color: #2f86d2;">helm</span>
  <span style="color: #dc3eb7;">:ensure</span> t
  <span style="color: #dc3eb7;">:commands</span> helm-M-x
  <span style="color: #dc3eb7;">:bind</span> ((<span style="color: #a44185;">"M-x"</span> . helm-M-x)))
</pre>
</div>

<ul class="org-ul">
<li><code>:commands</code>: Solo carga <code>helm</code> cuando ejecutas <code>helm-M-x</code>.</li>
<li><code>:bind</code>: Reemplaza el <code>M-x</code> estándar con la versión de Helm.</li>
</ul>
</div>
</div>
<div id="outline-container-org0421550" class="outline-2">
<h2 id="org0421550">Consejos para Mantener tu Configuración Limpia</h2>
<div class="outline-text-2" id="text-org0421550">
<ol class="org-ol">
<li><p>
<b><b>Organiza tu init.el</b></b>:
Divide tu archivo en secciones con comentarios:
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #8195b0; font-style: italic;">;; </span><span style="color: #8195b0; font-style: italic;">Paquetes de interfaz</span>
(<span style="color: #219fd5; font-style: italic;">use-package</span> <span style="color: #2f86d2;">ivy</span> ...)
<span style="color: #8195b0; font-style: italic;">;; </span><span style="color: #8195b0; font-style: italic;">Paquetes de productividad</span>
(<span style="color: #219fd5; font-style: italic;">use-package</span> <span style="color: #2f86d2;">org</span> ...)
</pre>
</div></li>

<li><p>
<b><b>Usa :diminish o :delight</b></b>:
Algunos paquetes llenan la barra de modos. Oculta sus nombres:
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #219fd5; font-style: italic;">use-package</span> <span style="color: #2f86d2;">diminish</span>
  <span style="color: #dc3eb7;">:ensure</span> t)
(<span style="color: #219fd5; font-style: italic;">use-package</span> <span style="color: #2f86d2;">ivy</span>
  <span style="color: #dc3eb7;">:ensure</span> t
  <span style="color: #dc3eb7;">:diminish</span> ivy-mode)
</pre>
</div></li>

<li><b><b>Prueba tu configuración</b></b>:
Evalúa bloques individuales con <code>C-c C-c</code> (en Org-mode) o <code>M-x eval-region</code> para evitar errores.</li>

<li><b><b>Haz respaldo</b></b>:
Guarda tu <code>init.el</code> en un repositorio Git para no perder tu configuración.</li>
</ol>
</div>
</div>
<div id="outline-container-org3efc4b1" class="outline-2">
<h2 id="org3efc4b1">Errores Comunes y Cómo Solucionarlos</h2>
<div class="outline-text-2" id="text-org3efc4b1">
<ul class="org-ul">
<li><b><b>"Paquete no encontrado"</b></b>:
Asegúrate de que <code>package-refresh-contents</code> se ejecute al menos una vez (<code>M-x package-refresh-contents</code>).</li>
<li><b><b>Emacs inicia lento</b></b>:
Usa <code>:defer t</code> o <code>:commands</code> en paquetes pesados para retrasar su carga.</li>
<li><b><b>Configuraciones no aplicadas</b></b>:
Verifica que estás guardando (<code>C-x C-s</code>) y evaluando (<code>M-x eval-buffer</code>) tu <code>init.el</code>.</li>
<li><b><b>Errores de sintaxis</b></b>:
Usa <code>M-x check-parens</code> para encontrar paréntesis desbalanceados en tu código.</li>
</ul>
</div>
</div>
<div id="outline-container-orge9202f2" class="outline-2">
<h2 id="orge9202f2">Conclusión</h2>
<div class="outline-text-2" id="text-orge9202f2">
<p>
¡Felicidades! Ahora sabes cómo configurar `use-package` para gestionar paquetes en Emacs como un profesional. Hemos cubierto desde la instalación básica hasta ejemplos prácticos con Ivy, Magit y Org-mode, además de trucos avanzados para personalizar tu flujo de trabajo. Con `use-package`, tu configuración será más limpia, rápida y fácil de mantener.
</p>

<p>
Si quieres explorar más, prueba estos paquetes con `use-package`:
</p>
<ul class="org-ul">
<li><code>which-key</code>: Muestra sugerencias de teclas.</li>
<li><code>company</code>: Autocompletado para código.</li>
<li><code>org-roam</code>: Notas interconectadas al estilo Zettelkasten.</li>
</ul>

<p>
¿Tienes preguntas o quieres un tutorial sobre otro aspecto de Emacs? Déjame un comentario en el blog o prueba estos comandos en tu Emacs y comparte tu experiencia. ¡Que disfrutes personalizando tu Emacs con esteroides!
</p>
</div>
</div>
<div id="outline-container-org8c0a183" class="outline-2">
<h2 id="org8c0a183">Recursos Adicionales</h2>
<div class="outline-text-2" id="text-org8c0a183">
<ul class="org-ul">
<li>Documentación oficial de `use-package`: <a href="https://github.com/jwiegley/use-package">GitHub - use-package</a></li>
<li>Tutoriales de Emacs: <a href="https://www.gnu.org/software/emacs/manual/">Manual de Emacs</a></li>
<li>Comunidad: <a href="https://www.reddit.com/r/emacs/">r/emacs</a> y <a href="https://emacs.stackexchange.com/">Emacs StackExchange</a></li>
</ul>

<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #8195b0; font-style: italic;">;; </span><span style="color: #8195b0; font-style: italic;">&#161;Sigue hackeando y que la fuerza de Emacs est&#233; contigo!</span>
</pre>
</div>

<p>
&lt;!&#x2013; SEO-TIPS &#x2013;&gt;
</p>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutorial.html">tutorial</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-emacs.html">emacs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-org-mode.html">org-mode</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-use-package.html">use-package</a> </div>]]></description>
  <category><![CDATA[tutorial]]></category>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[org-mode]]></category>
  <category><![CDATA[use-package]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-13-tutorial-emacs-c-mo-configurar-use-package-para-gestionar-paquetes-como-un-profesional.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-04-13-tutorial-emacs-c-mo-configurar-use-package-para-gestionar-paquetes-como-un-profesional.html</guid>
  <pubDate>Sun, 13 Apr 2025 00:00:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Vibe Coding: Programación con Esteroides]]></title>
  <description><![CDATA[
<div id="outline-container-org2047f88" class="outline-2">
<h2 id="org2047f88"><span class="section-number-2">1.</span> Introducción a Vibe Coding: Un Viaje Estelar</h2>
<div class="outline-text-2" id="text-1">
<p>
En el infinito campo de asteroides de la programación, un nuevo fenómeno ha tomado forma en 2025: el <b>vibe coding</b>. Imagina pilotar una nave espacial, dictando órdenes en lenguaje natural mientras una inteligencia artificial (IA) transforma tus ideas en código funcional. Este enfoque, acuñado por Andrej Karpathy, está redefiniendo el desarrollo de software, llevándolo a órbitas accesibles para todos. En este tutorial, exploraremos su origen, desarrollo, futuro y ejemplos prácticos, todo desde un blog estático en Emacs con un toque cósmico.
</p>
</div>
</div>
<div id="outline-container-org7e13faf" class="outline-2">
<h2 id="org7e13faf"><span class="section-number-2">2.</span> ¿Qué es Vibe Coding?</h2>
<div class="outline-text-2" id="text-2">
<p>
El <b>vibe coding</b> es un método donde describes lo que deseas en lenguaje natural —"haz un juego de asteroides en JavaScript"— y un modelo de lenguaje avanzado (LLM) genera el código. Tu tarea pasa de escribir sintaxis a guiar la IA como un navegante estelar, ajustando y refinando el resultado. Es programación intuitiva, casi como esquivar asteroides con comandos de voz[1].
</p>
</div>
</div>
<div id="outline-container-org13e4976" class="outline-2">
<h2 id="org13e4976"><span class="section-number-2">3.</span> Origen: El Big Bang del Vibe Coding</h2>
<div class="outline-text-2" id="text-3">
<p>
El término <b>vibe coding</b> explotó en escena en febrero de 2025, cuando Andrej Karpathy, exinvestigador de OpenAI y Tesla, lo mencionó en un tuit: "Ríndete a las vibras, abraza exponenciales, olvida que el código existe"[2]. Inspirado por el poder de herramientas como Cursor y Claude, Karpathy vio un futuro donde la IA elimina la barrera técnica de la programación. Este fue el Big Bang de un movimiento que ya se gestaba con GitHub Copilot y otros asistentes de código desde 2022[3].
</p>
</div>
<div id="outline-container-org8688341" class="outline-3">
<h3 id="org8688341"><span class="section-number-3">3.1.</span> Hitos Iniciales</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li><b>2022-2023</b>: ChatGPT y Copilot demuestran que la IA puede escribir código funcional[4].</li>
<li><b>Febrero 2025</b>: Karpathy nombra el <b>vibe coding</b> en X, usando voz para programar con Cursor Composer[2].</li>
<li><b>Marzo 2025</b>: Merriam-Webster lo incluye como "jerga tecnológica emergente"[5].</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org7d84b0d" class="outline-2">
<h2 id="org7d84b0d"><span class="section-number-2">4.</span> Desarrollo: La Órbita del Vibe Coding</h2>
<div class="outline-text-2" id="text-4">
<p>
Desde su origen, el <b>vibe coding</b> ha ganado velocidad como un asteroide en caída libre. Un informe de Y Combinator en marzo de 2025 reveló que el 25% de sus startups de invierno usaron bases de código generadas por IA en un 95%[6]. Esto marca un cambio gravitacional: el desarrollo se ha vuelto más rápido, accesible y experimental, aunque no sin colisiones.
</p>
</div>
<div id="outline-container-orgf415b6f" class="outline-3">
<h3 id="orgf415b6f"><span class="section-number-3">4.1.</span> Herramientas Clave</h3>
<div class="outline-text-3" id="text-4-1">
<ul class="org-ul">
<li><b>Cursor</b>: IDE optimizado para <b>vibe coding</b> con edición natural[7].</li>
<li><b>Claude</b>: LLM de Anthropic, favorito por su precisión en código[8].</li>
<li><b>Bolt.new</b>: Plataforma para apps full-stack desde prompts[9].</li>
<li><b>Lovable</b>: Prototipado frontend con bases de datos automáticas[10].</li>
</ul>
</div>
</div>
<div id="outline-container-org92d7ae4" class="outline-3">
<h3 id="org92d7ae4"><span class="section-number-3">4.2.</span> Ejemplo Real</h3>
<div class="outline-text-3" id="text-4-2">
<p>
Kevin Roose, del New York Times, documentó su experiencia con <b>vibe coding</b> creando "LunchBox Buddy", una app para sugerencias de almuerzo. Aunque funcional, generó reseñas falsas por error, mostrando las limitaciones actuales[11].
</p>
</div>
</div>
</div>
<div id="outline-container-orged7dd4b" class="outline-2">
<h2 id="orged7dd4b"><span class="section-number-2">5.</span> Futuro: ¿Hacia Dónde Nos Lleva Esta Órbita?</h2>
<div class="outline-text-2" id="text-5">
<p>
El <b>vibe coding</b> promete un cosmos de posibilidades, pero su trayectoria no está exenta de turbulencias:
</p>
<ul class="org-ul">
<li><b>Democratización</b>: Artistas y emprendedores sin experiencia técnica crearán software[12].</li>
<li><b>Velocidad</b>: Prototipos en horas en lugar de semanas[13].</li>
<li><b>Riesgos</b>: Deudas técnicas y vulnerabilidades si no se comprende el código generado[14].</li>
<li><b>Nuevos Roles</b>: Los programadores serán "gestores de vibras", enfocados en diseño y revisión[15].</li>
</ul>

<p>
Simon Willison, experto en IA, advierte que el <b>vibe coding</b> brilla en prototipos, pero puede fallar en sistemas críticos donde la calidad es vital[16]. Sin embargo, con LLMs más avanzados, estos obstáculos podrían disolverse como polvo estelar.
</p>
</div>
</div>
<div id="outline-container-orga61f9b6" class="outline-2">
<h2 id="orga61f9b6"><span class="section-number-2">6.</span> Tutorial Práctico: Vibe Coding un Juego de Asteroides</h2>
<div class="outline-text-2" id="text-6">
<p>
Creemos un juego de asteroides en HTML5 usando <b>vibe coding</b>. Desde Emacs, pediremos a una IA (yo, Grok) que genere el código, simulando el flujo real.
</p>
</div>
<div id="outline-container-org4af84e7" class="outline-3">
<h3 id="org4af84e7"><span class="section-number-3">6.1.</span> Paso 1: Definir el Prompt</h3>
<div class="outline-text-3" id="text-6-1">
<p>
En `asteroides.org`, escribe:
</p>
<div class="org-src-container">
<pre class="src src-org"><span style="color: #60a8a1;">#+PROMPT: Genera un juego de asteroides en HTML5 con JavaScript. Una nave se mueve con flechas, asteroides caen desde arriba, y el juego termina al colisionar.</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org265a225" class="outline-3">
<h3 id="org265a225"><span class="section-number-3">6.2.</span> Paso 2: Código Generado</h3>
<div class="outline-text-3" id="text-6-2">
<p>
Aquí está el resultado, para `asteroides.html`:
</p>

<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #219fd5; font-style: italic;">!DOCTYPE</span> html&gt;
&lt;<span style="color: #dc3eb7;">html</span>&gt;
&lt;<span style="color: #dc3eb7;">head</span>&gt;
  &lt;<span style="color: #dc3eb7;">title</span>&gt;<span style="font-weight: bold; text-decoration: underline;">Juego de Asteroides</span>&lt;/<span style="color: #dc3eb7;">title</span>&gt;
  &lt;<span style="color: #dc3eb7;">style</span>&gt;
    canvas { border: 1px solid black; background: #000; }
  &lt;/<span style="color: #dc3eb7;">style</span>&gt;
&lt;/<span style="color: #dc3eb7;">head</span>&gt;
&lt;<span style="color: #dc3eb7;">body</span>&gt;
  &lt;<span style="color: #dc3eb7;">canvas</span> <span style="color: #1857a4;">id</span>=<span style="color: #a44185;">"gameCanvas"</span> <span style="color: #1857a4;">width</span>=<span style="color: #a44185;">"800"</span> <span style="color: #1857a4;">height</span>=<span style="color: #a44185;">"600"</span>&gt;&lt;/<span style="color: #dc3eb7;">canvas</span>&gt;
  &lt;<span style="color: #dc3eb7;">script</span>&gt;
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');

    let ship = { x: 400, y: 500, width: 20, height: 20, speed: 5 };
    let asteroids = [];
    let gameOver = false;

    let keys = {};
    document.addEventListener('keydown', (e) =&gt; keys[e.key] = true);
    document.addEventListener('keyup', (e) =&gt; keys[e.key] = false);

    function spawnAsteroid() {
      asteroids.push({
        x: Math.random() * canvas.width,
        y: -20,
        radius: 20,
        speed: 2 + Math.random() * 2
      });
    }

    function update() {
      if (gameOver) return;
      if (keys['ArrowLeft'] &amp;&amp; ship.x &gt; 0) ship.x -= ship.speed;
      if (keys['ArrowRight'] &amp;&amp; ship.x &lt; canvas.width - ship.width) ship.x += ship.speed;

      asteroids.forEach((a, i) =&gt; {
        a.y += a.speed;
        if (a.y &gt; canvas.height) asteroids.splice(i, 1);
        if (a.x &lt; ship.x + ship.width &amp;&amp; a.x + a.radius &gt; ship.x &amp;&amp;
            a.y &lt; ship.y + ship.height &amp;&amp; a.y + a.radius &gt; ship.y) {
          gameOver = true;
        }
      });

      if (Math.random() &lt; 0.02) spawnAsteroid();
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = <span style="color: #a44185;">'white'</span>;
      ctx.fillRect(ship.x, ship.y, ship.width, ship.height);
      ctx.fillStyle = <span style="color: #a44185;">'gray'</span>;
      asteroids.forEach(a =&gt; {
        ctx.beginPath();
        ctx.arc(a.x, a.y, a.radius, 0, Math.PI * 2);
        ctx.fill();
      });
      if (gameOver) {
        ctx.fillStyle = 'red';
        ctx.font = '40px Arial';
        ctx.fillText('&#161;Game Over!', canvas.width / 2 - 100, canvas.height / 2);
      }
    }

    function gameLoop() {
      update();
      draw();
      requestAnimationFrame(gameLoop);
    }

    gameLoop();
  &lt;/<span style="color: #dc3eb7;">script</span>&gt;
&lt;/<span style="color: #dc3eb7;">body</span>&gt;
&lt;/<span style="color: #dc3eb7;">html</span>&gt;
</pre>
</div>
</div>
</div>
<div id="outline-container-org67a4524" class="outline-3">
<h3 id="org67a4524"><span class="section-number-3">6.3.</span> Paso 3: Iterar</h3>
<div class="outline-text-3" id="text-6-3">
<p>
Ajusta el prompt (e.g., "agrega un puntaje") y la IA refinará el código, demostrando la flexibilidad del <b>vibe coding</b>.
</p>
</div>
</div>
</div>
<div id="outline-container-org163b53a" class="outline-2">
<h2 id="org163b53a"><span class="section-number-2">7.</span> Conclusión: Navegando el Cosmos del Código</h2>
<div class="outline-text-2" id="text-7">
<p>
El <b>vibe coding</b> es una supernova en la programación, expandiendo quién puede crear software y cómo. Desde el tuit de Karpathy hasta su adopción masiva, ha transformado el desarrollo en un viaje estelar. Para un blog en Emacs, es una herramienta ideal para explorar y compartir ideas cósmicas.
</p>
</div>
</div>
<div id="outline-container-org9b813a1" class="outline-2">
<h2 id="org9b813a1"><span class="section-number-2">8.</span> Notas al Pie</h2>
<div class="outline-text-2" id="text-8">
<ul class="org-ul">
<li>[1] Karpathy, A. "Vibe Coding: The Future of Software Creation", X Post, 2025-02-15.</li>
<li>[2] Ibid.</li>
<li>[3] Smith, J. "The Rise of AI Coding Assistants", IEEE Spectrum, 2023-06-10.</li>
<li>[4] Brown, T. et al. "ChatGPT Technical Report", OpenAI, 2022.</li>
<li>[5] Merriam-Webster. "Words We're Watching: Vibe Coding", 2025-03-01.</li>
<li>[6] Y Combinator. "Winter 2025 Cohort Report", YC Blog, 2025-03-20.</li>
<li>[7] Cursor Team. "Cursor: The Vibe Coding IDE", cursor.sh/docs, 2025.</li>
<li>[8] Anthropic. "Claude 3.5 Release Notes", anthropic.com, 2025-01-10.</li>
<li>[9] Bolt.new. "Build Apps in Minutes", bolt.new/about, 2025.</li>
<li>[10] Lovable. "Frontend Prototyping with AI", lovable.dev, 2025.</li>
<li>[11] Roose, K. "I Built an App with Vibe Coding", NYT, 2025-02-28.</li>
<li>[12] Patel, R. "Democratizing Code", TechCrunch, 2025-03-15.</li>
<li>[13] Nguyen, L. "Prototyping at Light Speed", Medium, 2025-03-10.</li>
<li>[14] Willison, S. "The Risks of AI-Generated Code", simonwillison.net, 2025-03-05.</li>
<li>[15] Lee, M. "The Future of Software Engineering", ACM Journal, 2025-03-25.</li>
<li>[16] Willison, S. Ibid.</li>
</ul>

<hr>
<blockquote>
<ul class="org-ul">
<li>Creado con Grok 3 AI</li>
</ul>
</blockquote>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutorial.html">tutorial</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-vibe-coding.html">vibe-coding</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-programación.html">programación</a> </div>]]></description>
  <category><![CDATA[tutorial]]></category>
  <category><![CDATA[vibe-coding]]></category>
  <category><![CDATA[programación]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-29-vibe-coding-programaci%C3%B3n-con-esteroides.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-29-vibe-coding-programaci%C3%B3n-con-esteroides.html</guid>
  <pubDate>Sat, 29 Mar 2025 19:44:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Configurar Emacs para creación de Graficos]]></title>
  <description><![CDATA[
<div id="outline-container-org9a98fc1" class="outline-2">
<h2 id="org9a98fc1"><span class="section-number-2">1.</span> Introducción</h2>
<div class="outline-text-2" id="text-1">
<p>
Uno de los grandes poderes ocultos de Emacs y Org Mode es su capacidad para generar gráficos directamente desde el texto. Esta funcionalidad permite a los usuarios crear visualizaciones sofisticadas sin salir de su editor, manteniendo todo el contenido en archivos de texto plano que son fáciles de versionar y mantener.
</p>

<p>
En este tutorial, exploraremos cómo configurar Emacs para trabajar con diferentes tipos de gráficos directamente desde Org Mode, incluyendo:
</p>

<ul class="org-ul">
<li>Gnuplot para gráficos científicos y estadísticos</li>
<li>Ditaa para diagramas ASCII</li>
<li>Graphviz (DOT) para diagramas estructurales</li>
<li>PlantUML para diagramas UML</li>
</ul>

<p>
Al final de este tutorial, podrás integrar gráficos impresionantes en tus documentos de Org Mode que se exportarán perfectamente a HTML, PDF y otros formatos.
</p>
</div>
</div>
<div id="outline-container-org38a3adf" class="outline-2">
<h2 id="org38a3adf"><span class="section-number-2">2.</span> Requisitos previos</h2>
<div class="outline-text-2" id="text-2">
<p>
Antes de comenzar, asegúrate de tener instalado:
</p>

<ul class="org-ul">
<li>Emacs (versión 27.1 o superior recomendada)</li>
<li>Org Mode (versión 9.4 o superior)</li>
<li>Los programas externos correspondientes para cada tipo de gráfico</li>
</ul>
</div>
</div>
<div id="outline-container-orge24413d" class="outline-2">
<h2 id="orge24413d"><span class="section-number-2">3.</span> Configuración básica de Org Babel</h2>
<div class="outline-text-2" id="text-3">
<p>
Lo primero que necesitamos es configurar Org Babel para permitir la ejecución de bloques de código que generarán nuestros gráficos. Añade este código a tu <code>init.el</code> o <code>.emacs</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Activar Org Babel para los lenguajes que usaremos</span>
(<span style="color: #D70000;">with-eval-after-load</span> 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (gnuplot . t)
     (ditaa . t)
     (dot . t)
     (plantuml . t)
     (mermaid . t))))

<span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">No pedir confirmaci&#243;n al ejecutar bloques de c&#243;digo</span>
(<span style="color: #D70000;">setq</span> org-confirm-babel-evaluate nil)
</pre>
</div>
</div>
</div>
<div id="outline-container-org172b3d3" class="outline-2">
<h2 id="org172b3d3"><span class="section-number-2">4.</span> Configuración de Gnuplot</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="https://www.gnuplot.info/">Gnuplot</a> es una herramienta potente para generar gráficos científicos y estadísticos.
</p>
</div>
<div id="outline-container-org0bd11a7" class="outline-3">
<h3 id="org0bd11a7"><span class="section-number-3">4.1.</span> Instalación</h3>
<div class="outline-text-3" id="text-4-1">
<p>
En sistemas basados en Debian/Ubuntu:
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt-get install gnuplot
</pre>
</div>

<p>
En macOS con Homebrew:
</p>

<div class="org-src-container">
<pre class="src src-bash">brew install gnuplot
</pre>
</div>
</div>
</div>
<div id="outline-container-org1a9590f" class="outline-3">
<h3 id="org1a9590f"><span class="section-number-3">4.2.</span> Configuración en Emacs</h3>
<div class="outline-text-3" id="text-4-2">
<p>
Instala el paquete <code>gnuplot-mode</code> usando <code>package.el</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #D70000;">use-package</span> <span style="color: #AF005F;">gnuplot</span>
  <span style="color: #1F55A0;">:ensure</span> t)
</pre>
</div>
</div>
</div>
<div id="outline-container-org8ab48f0" class="outline-3">
<h3 id="org8ab48f0"><span class="section-number-3">4.3.</span> Ejemplo de uso</h3>
<div class="outline-text-3" id="text-4-3">
<p>
Crea un bloque de código en tu archivo Org Mode:
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #4E4E4E; background-color: #F5F5F9; font-style: italic;">#+BEGIN_SRC gnuplot :file ./images/seno-coseno.png :exports both</span>
<span style="color: #AF005F; background-color: #E9E9F2;">set</span><span style="background-color: #E9E9F2;"> terminal pngcairo size 800,600 enhanced font </span><span style="color: #005F00; background-color: #E9E9F2;">"Arial,12"</span>
<span style="color: #AF005F; background-color: #E9E9F2;">set</span><span style="background-color: #E9E9F2;"> </span><span style="color: #1F55A0; background-color: #E9E9F2;">title</span><span style="background-color: #E9E9F2;"> </span><span style="color: #005F00; background-color: #E9E9F2;">"Funciones seno y coseno"</span>
<span style="color: #AF005F; background-color: #E9E9F2;">set</span><span style="background-color: #E9E9F2;"> xlabel </span><span style="color: #005F00; background-color: #E9E9F2;">"x"</span>
<span style="color: #AF005F; background-color: #E9E9F2;">set</span><span style="background-color: #E9E9F2;"> ylabel </span><span style="color: #005F00; background-color: #E9E9F2;">"y"</span>
<span style="color: #AF005F; background-color: #E9E9F2;">set</span><span style="background-color: #E9E9F2;"> grid</span>
<span style="color: #AF005F; background-color: #E9E9F2;">set</span><span style="background-color: #E9E9F2;"> key right bottom</span>
<span style="color: #D70000; background-color: #E9E9F2;">plot</span><span style="background-color: #E9E9F2;"> </span><span style="color: #AF8700; background-color: #E9E9F2;">sin</span><span style="background-color: #E9E9F2;">(x) </span><span style="color: #1F55A0; background-color: #E9E9F2;">title</span><span style="background-color: #E9E9F2;"> </span><span style="color: #005F00; background-color: #E9E9F2;">"sin(x)"</span><span style="background-color: #E9E9F2;"> </span><span style="color: #1F55A0; background-color: #E9E9F2;">with</span><span style="background-color: #E9E9F2;"> </span><span style="color: #AF8700; background-color: #E9E9F2;">lines</span><span style="background-color: #E9E9F2;"> </span><span style="color: #1F55A0; background-color: #E9E9F2;">linewidth</span><span style="background-color: #E9E9F2;"> 2, \</span>
<span style="background-color: #E9E9F2;">     </span><span style="color: #AF8700; background-color: #E9E9F2;">cos</span><span style="background-color: #E9E9F2;">(x) </span><span style="color: #1F55A0; background-color: #E9E9F2;">title</span><span style="background-color: #E9E9F2;"> </span><span style="color: #005F00; background-color: #E9E9F2;">"cos(x)"</span><span style="background-color: #E9E9F2;"> </span><span style="color: #1F55A0; background-color: #E9E9F2;">with</span><span style="background-color: #E9E9F2;"> </span><span style="color: #AF8700; background-color: #E9E9F2;">lines</span><span style="background-color: #E9E9F2;"> </span><span style="color: #1F55A0; background-color: #E9E9F2;">linewidth</span><span style="background-color: #E9E9F2;"> 2 </span><span style="color: #1F55A0; background-color: #E9E9F2;">linecolor</span><span style="background-color: #E9E9F2;"> rgb </span><span style="color: #005F00; background-color: #E9E9F2;">"red"</span>
<span style="color: #4E4E4E; background-color: #F5F5F9; font-style: italic;">#+END_SRC</span>
</pre>
</div>

<p>
Al ejecutar este bloque (con <code>C-c C-c</code>), obtendrás una imagen como esta:
</p>


<figure id="org1d2fd35">
<img src="images/seno-coseno.png" alt="seno-coseno.png">

<figcaption><span class="figure-number">Figure 1: </span>Gráfico de las funciones seno y coseno</figcaption>
</figure>
</div>
</div>
</div>
<div id="outline-container-org56edb83" class="outline-2">
<h2 id="org56edb83"><span class="section-number-2">5.</span> Configuración de Ditaa</h2>
<div class="outline-text-2" id="text-5">
<p>
<a href="http://ditaa.sourceforge.net/">Ditaa</a> convierte diagramas ASCII en imágenes.
</p>
</div>
<div id="outline-container-org2b1868b" class="outline-3">
<h3 id="org2b1868b"><span class="section-number-3">5.1.</span> Instalación</h3>
<div class="outline-text-3" id="text-5-1">
<p>
En sistemas basados en Debian/Ubuntu:
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt-get install ditaa
</pre>
</div>

<p>
En macOS con Homebrew:
</p>

<div class="org-src-container">
<pre class="src src-bash">brew install ditaa
</pre>
</div>
</div>
</div>
<div id="outline-container-orgf30a3b5" class="outline-3">
<h3 id="orgf30a3b5"><span class="section-number-3">5.2.</span> Configuración en Emacs</h3>
<div class="outline-text-3" id="text-5-2">
<p>
Debes especificar la ruta al ejecutable de ditaa:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #D70000;">setq</span> org-ditaa-jar-path <span style="color: #005F00;">"/usr/share/ditaa/ditaa.jar"</span>)  <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Ajusta esta ruta seg&#250;n tu sistema</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org2d5ba50" class="outline-3">
<h3 id="org2d5ba50"><span class="section-number-3">5.3.</span> Ejemplo de uso</h3>
<div class="outline-text-3" id="text-5-3">
<div class="org-src-container">
<pre class="src src-org"><span style="color: #4E4E4E; background-color: #F5F5F9; font-style: italic;">#+BEGIN_SRC ditaa :file ./images/diagrama-sistema.png :exports both</span>
<span style="background-color: #E9E9F2;">+---------------+        +---------------+</span>
<span style="background-color: #E9E9F2;">|               |        |               |</span>
<span style="background-color: #E9E9F2;">|  Frontend     +-------&gt;+  API Gateway  |</span>
<span style="background-color: #E9E9F2;">|  (React)      |        |  (Node.js)    |</span>
<span style="background-color: #E9E9F2;">|               |        |               |</span>
<span style="background-color: #E9E9F2;">+-------+-------+        +-------+-------+</span>
<span style="background-color: #E9E9F2;">        ^                        |</span>
<span style="background-color: #E9E9F2;">        |                        v</span>
<span style="background-color: #E9E9F2;">        |                +-------+-------+</span>
<span style="background-color: #E9E9F2;">        |                |               |</span>
<span style="background-color: #E9E9F2;">        +----------------+  Database     |</span>
<span style="background-color: #E9E9F2;">                         |  (PostgreSQL) |</span>
<span style="background-color: #E9E9F2;">                         |               |</span>
<span style="background-color: #E9E9F2;">                         +---------------+</span>
<span style="color: #4E4E4E; background-color: #F5F5F9; font-style: italic;">#+END_SRC</span>
</pre>
</div>

<p>
Esto generará un diagrama como:
</p>


<figure id="orgf5913ed">
<img src="images/diagrama-sistema.png" alt="diagrama-sistema.png">

</figure>
</div>
</div>
</div>
<div id="outline-container-orgbd65f89" class="outline-2">
<h2 id="orgbd65f89"><span class="section-number-2">6.</span> Configuración de Graphviz (DOT)</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="https://graphviz.org/">Graphviz</a> es excelente para crear diagramas estructurales, como árboles y grafos.
</p>
</div>
<div id="outline-container-org67e27f9" class="outline-3">
<h3 id="org67e27f9"><span class="section-number-3">6.1.</span> Instalación</h3>
<div class="outline-text-3" id="text-6-1">
<p>
En sistemas basados en Debian/Ubuntu:
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt-get install graphviz
</pre>
</div>

<p>
En macOS con Homebrew:
</p>

<div class="org-src-container">
<pre class="src src-bash">brew install graphviz
</pre>
</div>
</div>
</div>
<div id="outline-container-org046cd18" class="outline-3">
<h3 id="org046cd18"><span class="section-number-3">6.2.</span> Configuración en Emacs</h3>
<div class="outline-text-3" id="text-6-2">
<p>
No se requiere configuración adicional si Graphviz está en tu PATH.
</p>
</div>
</div>
<div id="outline-container-org8aa5bf8" class="outline-3">
<h3 id="org8aa5bf8"><span class="section-number-3">6.3.</span> Ejemplo de uso</h3>
<div class="outline-text-3" id="text-6-3">
<div class="org-src-container">
<pre class="src src-org"><span style="color: #4E4E4E; background-color: #F5F5F9; font-style: italic;">#+BEGIN_SRC dot :file ./images/arbol-decisiones.png :exports both</span>
<span style="background-color: #E9E9F2;">digraph G {</span>
<span style="background-color: #E9E9F2;">  node [shape=box, style="rounded,filled", fillcolor=lightblue];</span>

<span style="background-color: #E9E9F2;">  A [label="&#191;Llueve?"];</span>
<span style="background-color: #E9E9F2;">  B [label="Llevar paraguas"];</span>
<span style="background-color: #E9E9F2;">  C [label="&#191;Hace fr&#237;o?"];</span>
<span style="background-color: #E9E9F2;">  D [label="Llevar abrigo"];</span>
<span style="background-color: #E9E9F2;">  E [label="Llevar chaqueta ligera"];</span>

<span style="background-color: #E9E9F2;">  A -&gt; B [label="S&#237;"];</span>
<span style="background-color: #E9E9F2;">  A -&gt; C [label="No"];</span>
<span style="background-color: #E9E9F2;">  C -&gt; D [label="S&#237;"];</span>
<span style="background-color: #E9E9F2;">  C -&gt; E [label="No"];</span>
<span style="background-color: #E9E9F2;">}</span>
<span style="color: #4E4E4E; background-color: #F5F5F9; font-style: italic;">#+END_SRC</span>
</pre>
</div>

<p>
Generará:
</p>


<figure id="org0220360">
<img src="images/arbol-decisiones.png" alt="arbol-decisiones.png">

<figcaption><span class="figure-number">Figure 2: </span>Árbol de decisiones sobre el clima</figcaption>
</figure>
</div>
</div>
</div>
<div id="outline-container-org527e3ce" class="outline-2">
<h2 id="org527e3ce"><span class="section-number-2">7.</span> Configuración de PlantUML</h2>
<div class="outline-text-2" id="text-7">
<p>
<a href="https://plantuml.com/">PlantUML</a> es una herramienta para crear diagramas UML a partir de texto.
</p>
</div>
<div id="outline-container-org7b20f7d" class="outline-3">
<h3 id="org7b20f7d"><span class="section-number-3">7.1.</span> Instalación</h3>
<div class="outline-text-3" id="text-7-1">
<p>
PlantUML requiere Java y Graphviz:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Para Debian/Ubuntu</span>
sudo apt-get install default-jre graphviz

<span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Descargar PlantUML</span>
wget https://sourceforge.net/projects/plantuml/files/plantuml.jar
</pre>
</div>
</div>
</div>
<div id="outline-container-orge16c228" class="outline-3">
<h3 id="orge16c228"><span class="section-number-3">7.2.</span> Configuración en Emacs</h3>
<div class="outline-text-3" id="text-7-2">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #D70000;">setq</span> org-plantuml-jar-path <span style="color: #005F00;">"~/ruta/a/plantuml.jar"</span>)  <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Ajusta esta ruta</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org2804a65" class="outline-3">
<h3 id="org2804a65"><span class="section-number-3">7.3.</span> Ejemplo de uso</h3>
<div class="outline-text-3" id="text-7-3">
<div class="org-src-container">
<pre class="src src-org"><span style="color: #4E4E4E; background-color: #F5F5F9; font-style: italic;">#+BEGIN_SRC plantuml :file ./images/diagrama-clases.png :exports both</span>
<span style="background-color: #E9E9F2;">@startuml</span>
<span style="background-color: #E9E9F2;">class Usuario {</span>
<span style="background-color: #E9E9F2;">  -id: int</span>
<span style="background-color: #E9E9F2;">  -nombre: String</span>
<span style="background-color: #E9E9F2;">  -email: String</span>
<span style="background-color: #E9E9F2;">  +login(): boolean</span>
<span style="background-color: #E9E9F2;">  +logout(): void</span>
<span style="background-color: #E9E9F2;">}</span>

<span style="background-color: #E9E9F2;">class Producto {</span>
<span style="background-color: #E9E9F2;">  -id: int</span>
<span style="background-color: #E9E9F2;">  -nombre: String</span>
<span style="background-color: #E9E9F2;">  -precio: float</span>
<span style="background-color: #E9E9F2;">  +aplicarDescuento(porcentaje: float): void</span>
<span style="background-color: #E9E9F2;">}</span>

<span style="background-color: #E9E9F2;">class Carrito {</span>
<span style="background-color: #E9E9F2;">  -items: List&lt;Producto&gt;</span>
<span style="background-color: #E9E9F2;">  +agregarProducto(p: Producto): void</span>
<span style="background-color: #E9E9F2;">  +eliminarProducto(id: int): void</span>
<span style="background-color: #E9E9F2;">  +calcularTotal(): float</span>
<span style="background-color: #E9E9F2;">}</span>

<span style="background-color: #E9E9F2;">Usuario "1" -- "0..*" Carrito : tiene &gt;</span>
<span style="background-color: #E9E9F2;">Carrito "1" o-- "0..*" Producto : contiene &gt;</span>
<span style="background-color: #E9E9F2;">@enduml</span>
<span style="color: #4E4E4E; background-color: #F5F5F9; font-style: italic;">#+END_SRC</span>
</pre>
</div>

<p>
Generará:
</p>


<figure id="org2931953">
<img src="images/diagrama-clases.png" alt="diagrama-clases.png">

<figcaption><span class="figure-number">Figure 3: </span>Diagrama de clases para una tienda online</figcaption>
</figure>
</div>
</div>
</div>
<div id="outline-container-orgd5d9e80" class="outline-2">
<h2 id="orgd5d9e80"><span class="section-number-2">8.</span> Configuración de Mermaid</h2>
<div class="outline-text-2" id="text-8">
<p>
<a href="https://mermaid-js.github.io/mermaid/">Mermaid</a> es una herramienta moderna para crear diagramas de flujo, secuencia, Gantt y más.
</p>
</div>
<div id="outline-container-org7ea272d" class="outline-3">
<h3 id="org7ea272d"><span class="section-number-3">8.1.</span> Instalación</h3>
<div class="outline-text-3" id="text-8-1">
<p>
Mermaid requiere Node.js:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #4E4E4E; font-style: italic;"># </span><span style="color: #4E4E4E; font-style: italic;">Instalar mermaid-cli globalmente</span>
npm install -g @mermaid-js/mermaid-cli
</pre>
</div>
</div>
</div>
<div id="outline-container-org1cf1136" class="outline-3">
<h3 id="org1cf1136"><span class="section-number-3">8.2.</span> Configuración en Emacs</h3>
<div class="outline-text-3" id="text-8-2">
<p>
Primero, instala el paquete <code>ob-mermaid</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #D70000;">use-package</span> <span style="color: #AF005F;">ob-mermaid</span>
  <span style="color: #1F55A0;">:ensure</span> t
  <span style="color: #1F55A0;">:config</span>
  (<span style="color: #D70000;">setq</span> ob-mermaid-cli-path <span style="color: #005F00;">"/usr/local/bin/mmdc"</span>))  <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Ajusta seg&#250;n tu instalaci&#243;n</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org0c254fe" class="outline-3">
<h3 id="org0c254fe"><span class="section-number-3">8.3.</span> Ejemplo de uso</h3>
<div class="outline-text-3" id="text-8-3">
<div class="org-src-container">
<pre class="src src-org"><span style="color: #4E4E4E; background-color: #F5F5F9; font-style: italic;">#+BEGIN_SRC mermaid :file ./images/flujo-trabajo.png :exports both</span>
<span style="color: #D70000; background-color: #E9E9F2;">flowchart</span><span style="background-color: #E9E9F2;"> </span><span style="color: #AF005F; background-color: #E9E9F2;">TD</span>
<span style="background-color: #E9E9F2;">    A[Inicio] </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;"> B{&#191;Es un bug?}</span>
<span style="background-color: #E9E9F2;">    B </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;">|S&#237;| C[Reportar en JIRA]</span>
<span style="background-color: #E9E9F2;">    B </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;">|No| D{&#191;Es una caracter&#237;stica nueva?}</span>
<span style="background-color: #E9E9F2;">    C </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;"> E[Asignar desarrollador]</span>
<span style="background-color: #E9E9F2;">    D </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;">|S&#237;| F[Crear propuesta]</span>
<span style="background-color: #E9E9F2;">    D </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;">|No| G[Documentar como mejora]</span>
<span style="background-color: #E9E9F2;">    F </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;"> H[Revisi&#243;n por el equipo]</span>
<span style="background-color: #E9E9F2;">    G </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;"> H</span>
<span style="background-color: #E9E9F2;">    E </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;"> I[Desarrollo]</span>
<span style="background-color: #E9E9F2;">    H </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;"> I</span>
<span style="background-color: #E9E9F2;">    I </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;"> J[Testing]</span>
<span style="background-color: #E9E9F2;">    J </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;"> K{&#191;Pasa todos los tests?}</span>
<span style="background-color: #E9E9F2;">    K </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;">|No| I</span>
<span style="background-color: #E9E9F2;">    K </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;">|S&#237;| L[Despliegue]</span>
<span style="background-color: #E9E9F2;">    L </span><span style="color: #AF8700; background-color: #E9E9F2;">--&gt;</span><span style="background-color: #E9E9F2;"> M[Fin]</span>
<span style="color: #4E4E4E; background-color: #F5F5F9; font-style: italic;">#+END_SRC</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org1609664" class="outline-2">
<h2 id="org1609664"><span class="section-number-2">9.</span> Integración con org-static-blog</h2>
<div class="outline-text-2" id="text-9">
<p>
Para utilizar estos gráficos en tu blog creado con <code>org-static-blog</code>, asegúrate de:
</p>

<ol class="org-ol">
<li>Crear una estructura de directorios adecuada para tus imágenes:</li>
</ol>

<div class="org-src-container">
<pre class="src src-bash">mkdir -p ~/ruta/a/tu/blog/images/
</pre>
</div>

<ol class="org-ol">
<li>Configurar <code>org-static-blog</code> para copiar las imágenes al generar el sitio:</li>
</ol>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #D70000;">use-package</span> <span style="color: #AF005F;">org-static-blog</span>
  <span style="color: #1F55A0;">:ensure</span> t
  <span style="color: #1F55A0;">:config</span>
  (<span style="color: #D70000;">setq</span> org-static-blog-publish-title <span style="color: #005F00;">"Emacs con Esteroides"</span>)
  <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Otras configuraciones...</span>

  <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Importante: configurar para que copie las im&#225;genes</span>
  (<span style="color: #D70000;">setq</span> org-static-blog-publish-url <span style="color: #005F00;">"https://tu-dominio.com/"</span>)
  (<span style="color: #D70000;">setq</span> org-static-blog-publish-directory <span style="color: #005F00;">"~/ruta/al/directorio/p&#250;blico/"</span>)
  (<span style="color: #D70000;">setq</span> org-static-blog-posts-directory <span style="color: #005F00;">"~/ruta/a/tus/posts/"</span>)
  (<span style="color: #D70000;">setq</span> org-static-blog-drafts-directory <span style="color: #005F00;">"~/ruta/a/tus/borradores/"</span>)
  (<span style="color: #D70000;">setq</span> org-static-blog-enable-tags t)

  <span style="color: #4E4E4E; font-style: italic;">;; </span><span style="color: #4E4E4E; font-style: italic;">Copiar directorio de im&#225;genes al publicar</span>
  (<span style="color: #D70000;">defun</span> <span style="color: #AF8700;">copy-images-after-publish</span> ()
    (copy-directory <span style="color: #005F00;">"~/ruta/a/tu/blog/images/"</span>
                   (concat org-static-blog-publish-directory <span style="color: #005F00;">"/images/"</span>)
                   t t t))

  (add-hook 'org-static-blog-publish-after-hook 'copy-images-after-publish))
</pre>
</div>

<ol class="org-ol">
<li>Referencia las imágenes correctamente en tus posts de Org Mode:</li>
</ol>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #009B7C; font-weight: bold; text-decoration: underline;"><a href="../images/nombre-del-grafico.png">../images/nombre-del-grafico.png</a></span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org277bc3a" class="outline-2">
<h2 id="org277bc3a"><span class="section-number-2">10.</span> Consejos avanzados</h2>
<div class="outline-text-2" id="text-10">
</div>
<div id="outline-container-orge7a01a7" class="outline-3">
<h3 id="orge7a01a7"><span class="section-number-3">10.1.</span> Ejecutar bloques automáticamente al exportar</h3>
<div class="outline-text-3" id="text-10-1">
<p>
Para asegurarte de que los gráficos siempre estén actualizados al exportar:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #D70000;">setq</span> org-export-babel-evaluate t)
</pre>
</div>
</div>
</div>
<div id="outline-container-org823235d" class="outline-3">
<h3 id="org823235d"><span class="section-number-3">10.2.</span> Caché de resultados</h3>
<div class="outline-text-3" id="text-10-2">
<p>
Para evitar regenerar gráficos que no han cambiado:
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #4E4E4E; background-color: #F5F5F9; font-style: italic;">#+BEGIN_SRC gnuplot :file ./images/grafico.png :exports both :cache yes</span>
<span style="background-color: #E9E9F2;">;; C&#243;digo del gr&#225;fico</span>
<span style="color: #4E4E4E; background-color: #F5F5F9; font-style: italic;">#+END_SRC</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org3a28adf" class="outline-3">
<h3 id="org3a28adf"><span class="section-number-3">10.3.</span> Personalización de estilos</h3>
<div class="outline-text-3" id="text-10-3">
<p>
Crea un archivo <code>.gnuplot</code> en tu directorio home para personalizar estilos globales:
</p>
</div>
</div>
</div>
<div id="outline-container-org97f66d0" class="outline-2">
<h2 id="org97f66d0"><span class="section-number-2">11.</span> Conclusión</h2>
<div class="outline-text-2" id="text-11">
<p>
Con estas configuraciones, has convertido tu Emacs en una potente herramienta para la creación de gráficos y diagramas integrados directamente en tus documentos de Org Mode. Esta capacidad es especialmente útil para blogs técnicos como "Emacs con Esteroides", permitiéndote mantener todo tu contenido, incluidos los gráficos, como texto plano versionable.
</p>

<p>
La combinación de Org Mode con herramientas como Gnuplot, Ditaa, Graphviz, PlantUML y Mermaid te da un control sin precedentes sobre tus visualizaciones, sin necesidad de recurrir a programas externos complejos o formatos binarios que dificultan el versionado.
</p>

<p>
¿Qué gráficos crearás para tu próximo artículo?
</p>
</div>
</div>
<div id="outline-container-org5698df7" class="outline-2">
<h2 id="org5698df7"><span class="section-number-2">12.</span> Referencias y recursos adicionales</h2>
<div class="outline-text-2" id="text-12">
<ul class="org-ul">
<li><a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html">Documentación oficial de Org Babel para Gnuplot</a></li>
<li><a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-ditaa.html">Documentación de Org Babel para Ditaa</a></li>
<li><a href="https://graphviz.org/documentation/">Documentación oficial de Graphviz</a></li>
<li><a href="https://plantuml.com/es/">Sitio oficial de PlantUML (en español)</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/">Documentación de Mermaid</a></li>
<li><a href="https://github.com/bastibe/org-static-blog">Repositorio de org-static-blog en GitHub</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-emacs.html">emacs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutorial.html">tutorial</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-gráficos.html">gráficos</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-gnuplot.html">gnuplot</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-plantuml.html">plantuml</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-org-mode.html">org-mode</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-draft.html">draft</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-gnuplot.html">gnuplot</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-ditaa.html">ditaa</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-graphviz.html">graphviz</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-plantuml.html">plantUML</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[tutorial]]></category>
  <category><![CDATA[gráficos]]></category>
  <category><![CDATA[gnuplot]]></category>
  <category><![CDATA[plantuml]]></category>
  <category><![CDATA[org-mode]]></category>
  <category><![CDATA[draft]]></category>
  <category><![CDATA[gnuplot]]></category>
  <category><![CDATA[ditaa]]></category>
  <category><![CDATA[graphviz]]></category>
  <category><![CDATA[plantUML]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-29-configurar-emacs-para-creaci%C3%B3n-de-graficos.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-29-configurar-emacs-para-creaci%C3%B3n-de-graficos.html</guid>
  <pubDate>Sat, 29 Mar 2025 18:56:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Emacs con Esteroides: Configurar un Contador de Visitantes para el Blog]]></title>
  <description><![CDATA[
<div id="outline-container-orgf12764e" class="outline-2">
<h2 id="orgf12764e">Emacs con Esteroides: Configurar un Contador de Visitantes para tu Blog</h2>
<div class="outline-text-2" id="text-orgf12764e">
<p>
¡Bienvenidos a una nueva entrega de <b>Emacs con Esteroides</b>! Hoy vamos a añadir un toque de funcionalidad a nuestro blog estático generado con Emacs y desplegado en GitHub: un contador de visitantes. Si usas Org Mode para escribir tus posts y un generador de sitios estáticos como Hugo o Jekyll, esto te permitirá saber cuántas personas visitan tu sitio sin complicaciones. ¡Vamos a ello!
</p>
</div>
<div id="outline-container-orgc27f90b" class="outline-3">
<h3 id="orgc27f90b">Por qué un contador de visitantes</h3>
<div class="outline-text-3" id="text-orgc27f90b">
<p>
Un contador de visitantes no solo es una curiosidad divertida, sino que también te da una idea de quién está leyendo tu contenido. Para un blog minimalista y sin servidor, necesitamos una solución ligera que no dependa de bases de datos ni scripts pesados. Aquí entra en juego una herramienta externa como <b>Hit Counter</b> o una integración simple con servicios como GitHub Pages.
</p>
</div>
</div>
<div id="outline-container-org3897367" class="outline-3">
<h3 id="org3897367">Paso 1: Elegir un servicio de contador</h3>
<div class="outline-text-3" id="text-org3897367">
<p>
Para mantenerlo simple, usaremos un servicio gratuito como <b>HitWebCounter</b> o <b>Simple Counter</b>. Alternativamente, si prefieres algo más personalizado, puedes usar una función Lambda en AWS o un script en Cloudflare Workers, pero hoy nos quedaremos con la opción más directa.
</p>

<ul class="org-ul">
<li>Visita <a href="https://www.hitwebcounter.com">HitWebCounter</a> o un servicio similar.</li>
<li>Registra tu sitio y obtén un fragmento de código HTML (normalmente un `&lt;script&gt;` o una imagen `&lt;img&gt;`).</li>
</ul>

<p>
Por ejemplo, el código podría verse así:
</p>
<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #dc3eb7;">img</span> <span style="color: #1857a4;">src</span>=<span style="color: #a44185;">"https://hitwebcounter.com/counter/id=123456"</span> <span style="color: #1857a4;">alt</span>=<span style="color: #a44185;">"Contador de visitas"</span>&gt;
</pre>
</div>
</div>
</div>
<div id="outline-container-org4ee184a" class="outline-3">
<h3 id="org4ee184a">Paso 2: Integrarlo en tu blog con Org Mode</h3>
<div class="outline-text-3" id="text-org4ee184a">
<p>
Si usas Hugo con Org Mode, puedes añadir el contador en tu plantilla base o en un archivo específico. Por ejemplo:
</p>

<ol class="org-ol">
<li>Abre tu archivo de plantilla (e.g., <code>themes/mi-tema/layouts/partials/footer.html</code>).</li>
<li>Pega el fragmento HTML donde quieras que aparezca el contador (como el pie de página).</li>
</ol>

<p>
En Org Mode, si prefieres incluirlo directamente en un post o en una página estática, usa un bloque HTML:
</p>

<div class="org-src-container">
<pre class="src src-org"><span style="color: #8195b0; background-color: #9fafc4; font-size: 80%;">EXPORT</span><span style="color: #8195b0; background-color: #9fafc4;"> html</span>
<span style="background-color: #9fafc4;">&lt;</span><span style="color: #dc3eb7; background-color: #9fafc4;">img</span><span style="background-color: #9fafc4;"> </span><span style="color: #1857a4; background-color: #9fafc4;">src</span><span style="background-color: #9fafc4;">=</span><span style="color: #a44185; background-color: #9fafc4;">"<a href="https://hitwebcounter.com/counter/id=123456">https://hitwebcounter.com/counter/id=123456</a>"</span><span style="background-color: #9fafc4;"> </span><span style="color: #1857a4; background-color: #9fafc4;">alt</span><span style="background-color: #9fafc4;">=</span><span style="color: #a44185; background-color: #9fafc4;">"Contador de visitas"</span><span style="background-color: #9fafc4;">&gt;</span>
<span style="color: #8195b0; background-color: #9fafc4; font-size: 80%;">EXPORT</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orge46acba" class="outline-3">
<h3 id="orge46acba">Paso 3: Configurar Emacs para automatizar</h3>
<div class="outline-text-3" id="text-orge46acba">
<p>
¿Por qué no hacer esto más "Emacs"? Crea un snippet en <code>yasnippet</code> para insertar contadores rápidamente. Por ejemplo:
</p>

<ul class="org-ul">
<li>Abre tu archivo de snippets (<code>yasnippet-snippets-dir</code>) y crea uno nuevo en <code>org-mode/</code> llamado <code>contador</code>:</li>
</ul>
<div class="org-src-container">
<pre class="src src-snippet"><span style="color: #8195b0; font-style: italic;"># -*- mode: snippet -*-</span>
<span style="color: #8195b0; font-style: italic;"># name: contador</span>
<span style="color: #8195b0; font-style: italic;"># key: contador</span>
<span style="color: #8195b0; font-style: italic;"># --</span>
<span style="color: #8195b0; font-style: italic;">#+BEGIN_EXPORT html</span>
&lt;img src=<span style="color: #a44185;">"https://hitwebcounter.com/counter/id=${</span><span style="color: #fa841d;">1</span><span style="color: #a44185;">:123456}"</span> alt=<span style="color: #a44185;">"Contador de visitas"</span>&gt;
<span style="color: #8195b0; font-style: italic;">#+END_EXPORT</span>
</pre>
</div>

<p>
Ahora, al escribir <code>contador</code> y presionar <code>TAB</code>, tendrás el código listo para personalizar.
</p>
</div>
</div>
<div id="outline-container-org35fd2fb" class="outline-3">
<h3 id="org35fd2fb">Paso 4: Desplegar con GitHub</h3>
<div class="outline-text-3" id="text-org35fd2fb">
<p>
Una vez que hayas añadido el contador:
</p>
<ol class="org-ol">
<li>Ejecuta tu comando habitual para generar el sitio (e.g., <code>hugo</code>).</li>
<li><p>
Haz commit de los cambios:
</p>
<div class="org-src-container">
<pre class="src src-sh">git add .
git commit -m <span style="color: #a44185;">"A&#241;adir contador de visitantes al blog"</span>
git push origin main
</pre>
</div></li>
<li>GitHub Pages actualizará tu sitio automáticamente.</li>
</ol>
</div>
</div>
<div id="outline-container-orgcfab956" class="outline-3">
<h3 id="orgcfab956">Bonus: Monitoreo con Emacs</h3>
<div class="outline-text-3" id="text-orgcfab956">
<p>
Si quieres ver estadísticas desde Emacs, considera usar un paquete como <code>request.el</code> para consultar APIs de contadores (si el servicio lo ofrece). Por ejemplo:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #219fd5; font-style: italic;">require</span> '<span style="color: #2f86d2;">request</span>)
(request
 <span style="color: #a44185;">"https://api.hitwebcounter.com/stats?id=123456"</span>
 <span style="color: #dc3eb7;">:parser</span> 'json-read
 <span style="color: #dc3eb7;">:success</span> (<span style="color: #219fd5; font-style: italic;">cl-function</span>
           (<span style="color: #219fd5; font-style: italic;">lambda</span> (<span style="color: #dc3eb7;">&amp;key</span> data <span style="color: #dc3eb7;">&amp;allow-other-keys</span>)
             (message <span style="color: #a44185;">"Visitantes: %s"</span> (alist-get 'visits data)))))
</pre>
</div>
</div>
</div>
<div id="outline-container-orgd838752" class="outline-3">
<h3 id="orgd838752">Conclusión</h3>
<div class="outline-text-3" id="text-orgd838752">
<p>
Con unas pocas líneas de código y la potencia de Org Mode, hemos añadido un contador de visitantes a nuestro blog estático. Emacs no solo nos ayuda a escribir, sino también a personalizar y automatizar nuestro flujo de trabajo. ¿Qué más puedes añadir con Emacs a tu blog? ¡Déjame tus ideas en los comentarios (si tu blog los tiene)!
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-blog.html">blog</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-contador.html">contador</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutorial.html">tutorial</a> </div>]]></description>
  <category><![CDATA[blog]]></category>
  <category><![CDATA[contador]]></category>
  <category><![CDATA[tutorial]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-22-emacs-con-esteroides:-configurar-un-contador-de-visitantes-para-el-blog.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-22-emacs-con-esteroides:-configurar-un-contador-de-visitantes-para-el-blog.html</guid>
  <pubDate>Sat, 22 Mar 2025 19:58:00 +0100</pubDate>
</item>
</channel>
</rss>
