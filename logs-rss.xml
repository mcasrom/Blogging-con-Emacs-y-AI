<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Emacs con esteroides - logs]]></title>
<description><![CDATA[Emacs con esteroides - logs]]></description>
<link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI//tag-logs.html</link>
<lastBuildDate>Tue, 03 Jun 2025 09:43:37 +0200</lastBuildDate>
<item>
  <title><![CDATA[Análisis del Log del Firewall UFW en Ubuntu: Guía Completa para Usuarios]]></title>
  <description><![CDATA[
<div id="outline-container-orgb695410" class="outline-2">
<h2 id="orgb695410">Introducción</h2>
<div class="outline-text-2" id="text-orgb695410">
<p>
El firewall UFW (Uncomplicated Firewall) es una herramienta sencilla y poderosa para gestionar reglas de firewall en Ubuntu. Analizar sus logs es esencial para monitorear la seguridad de tu sistema, detectar intentos de acceso no autorizados y diagnosticar problemas de red. En este post, aprenderás a localizar los logs de UFW, analizar su contenido, resumir los detalles críticos y organizar la información en una tabla `.org` para un análisis eficiente usando Emacs.
</p>
</div>
</div>
<div id="outline-container-orgb2c50c2" class="outline-2">
<h2 id="orgb2c50c2">Localizando los Logs de UFW</h2>
<div class="outline-text-2" id="text-orgb2c50c2">
</div>
<div id="outline-container-org71c6cec" class="outline-3">
<h3 id="org71c6cec">Paso 1: Verificar si UFW está Registrando Eventos</h3>
<div class="outline-text-3" id="text-org71c6cec">
<p>
Primero, asegúrate de que UFW esté habilitado y configurado para generar logs. Ejecuta en la terminal:
</p>

<div class="org-src-container">
<pre class="src src-bash"><code>sudo ufw status
</code></pre>
</div>

<p>
Si ves `logging: on`, UFW está generando logs. Si está desactivado, actívalo con:
</p>

<div class="org-src-container">
<pre class="src src-bash"><code>sudo ufw logging on
</code></pre>
</div>

<p>
Puedes ajustar el nivel de logging (`low`, `medium`, `high`):
</p>

<div class="org-src-container">
<pre class="src src-bash"><code>sudo ufw logging medium
</code></pre>
</div>
</div>
</div>
<div id="outline-container-org4997e59" class="outline-3">
<h3 id="org4997e59">Paso 2: Encontrar el Archivo de Log</h3>
<div class="outline-text-3" id="text-org4997e59">
<p>
UFW suele almacenar sus logs en `/var/log/ufw.log`. Para verificarlo:
</p>

<div class="org-src-container">
<pre class="src src-bash"><code>sudo ls /var/log/ufw.log
</code></pre>
</div>

<p>
Si no existe, los eventos de UFW pueden estar en los logs del sistema, como `/var/log/syslog` o `/var/log/messages`. Usa `grep` para filtrar:
</p>

<div class="org-src-container">
<pre class="src src-bash"><code>sudo grep UFW /var/log/syslog
</code></pre>
</div>

<p>
Para ver los logs en tiempo real:
</p>

<div class="org-src-container">
<pre class="src src-bash"><code>sudo tail -f /var/log/ufw.log
</code></pre>
</div>
</div>
</div>
<div id="outline-container-org5b48314" class="outline-3">
<h3 id="org5b48314">Paso 3: Revisar Logs Rotados</h3>
<div class="outline-text-3" id="text-org5b48314">
<p>
Los logs de UFW pueden rotarse (archivarse). Busca archivos comprimidos:
</p>

<div class="org-src-container">
<pre class="src src-bash"><code>ls /var/log/ufw.log*
</code></pre>
</div>

<p>
Para leer un log comprimido:
</p>

<div class="org-src-container">
<pre class="src src-bash"><code>sudo zcat /var/log/ufw.log.1.gz
</code></pre>
</div>
</div>
</div>
<div id="outline-container-orgdf94d97" class="outline-3">
<h3 id="orgdf94d97">Paso 4: Configuración del Logging</h3>
<div class="outline-text-3" id="text-orgdf94d97">
<p>
Si no ves logs, verifica la configuración en `/etc/ufw/ufw.conf`:
</p>

<div class="org-src-container">
<pre class="src src-bash"><code>sudo cat /etc/ufw/ufw.conf
</code></pre>
</div>

<p>
Busca la línea `LOGLEVEL`. Asegúrate de que no esté en `off`. Por ejemplo:
</p>

<div class="org-src-container">
<pre class="src src-text"><code>LOGLEVEL=medium
</code></pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org5959500" class="outline-2">
<h2 id="org5959500">Análisis de los Logs de UFW</h2>
<div class="outline-text-2" id="text-org5959500">
</div>
<div id="outline-container-orgb5c8ab3" class="outline-3">
<h3 id="orgb5c8ab3">Formato de una Entrada de Log</h3>
<div class="outline-text-3" id="text-orgb5c8ab3">
<p>
Los logs de UFW tienen un formato estándar. Aquí tienes un ejemplo:
</p>

<div class="org-src-container">
<pre class="src src-text"><code>May 29 19:33:45 laptop kernel: [UFW BLOCK] IN=eth0 OUT= MAC=00:15:5d:01:23:45 SRC=192.168.1.100 DST=192.168.1.101 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=12345 PROTO=TCP SPT=12345 DPT=80
</code></pre>
</div>

<ul class="org-ul">
<li><b><b>Fecha y hora</b></b>: `May 29 19:33:45`</li>
<li><b><b>Host</b></b>: `laptop`</li>
<li><b><b>Acción</b></b>: `[UFW BLOCK]` (indica que el tráfico fue bloqueado; otras opciones incluyen `[UFW ALLOW]`)</li>
<li><b><b>Interfaz</b></b>: `IN=eth0` (interfaz de entrada)</li>
<li><b><b>Direcciones IP</b></b>: `SRC=192.168.1.100` (origen), `DST=192.168.1.101` (destino)</li>
<li><b><b>Protocolo y puertos</b></b>: `PROTO=TCP SPT=12345 DPT=80` (protocolo TCP, puerto origen 12345, puerto destino 80)</li>
<li><b><b>Otros detalles</b></b>: `LEN`, `TOS`, `TTL`, etc., describen características del paquete.</li>
</ul>
</div>
</div>
<div id="outline-container-org734a2d4" class="outline-3">
<h3 id="org734a2d4">Herramientas para Análisis</h3>
<div class="outline-text-3" id="text-org734a2d4">
<ol class="org-ol">
<li><b><b>Grep para filtrar eventos específicos</b></b>:
<ul class="org-ul">
<li><p>
Bloqueos de una IP específica:
</p>
<div class="org-src-container">
<pre class="src src-bash"><code>sudo grep <span style="color: #a44185;">"SRC=192.168.1.100"</span> /var/log/ufw.log
</code></pre>
</div></li>
<li><p>
Tráfico en un puerto específico:
</p>
<div class="org-src-container">
<pre class="src src-bash"><code>sudo grep <span style="color: #a44185;">"DPT=22"</span> /var/log/ufw.log
</code></pre>
</div></li>
</ul></li>

<li><b><b>Awk para extraer campos</b></b>:
<ul class="org-ul">
<li><p>
Extraer IPs de origen bloqueadas:
</p>
<div class="org-src-container">
<pre class="src src-bash"><code>sudo awk <span style="color: #a44185;">'/UFW BLOCK/ {print $13}'</span> /var/log/ufw.log | sort | uniq
</code></pre>
</div></li>
</ul></li>

<li><b><b>Resumen con `wc` y `uniq`</b></b>:
<ul class="org-ul">
<li><p>
Contar eventos de bloqueo:
</p>
<div class="org-src-container">
<pre class="src src-bash"><code>sudo grep <span style="color: #a44185;">"UFW BLOCK"</span> /var/log/ufw.log | wc -l
</code></pre>
</div></li>
</ul></li>
</ol>
</div>
</div>
<div id="outline-container-orge11e5b9" class="outline-3">
<h3 id="orge11e5b9">Ejemplo Práctico</h3>
<div class="outline-text-3" id="text-orge11e5b9">
<p>
Supongamos que quieres identificar intentos de acceso al puerto 22 (SSH). Ejecuta:
</p>

<div class="org-src-container">
<pre class="src src-bash"><code>sudo grep <span style="color: #a44185;">"DPT=22"</span> /var/log/ufw.log &gt; ssh_attempts.log
</code></pre>
</div>

<p>
Luego, analiza los intentos por IP:
</p>

<div class="org-src-container">
<pre class="src src-bash"><code>awk <span style="color: #a44185;">'{print $13}'</span> ssh_attempts.log | sort | uniq -c
</code></pre>
</div>

<p>
Salida de ejemplo:
</p>

<div class="org-src-container">
<pre class="src src-text"><code> 5 SRC=192.168.1.100
10 SRC=203.0.113.50
</code></pre>
</div>

<p>
Esto indica que la IP `203.0.113.50` intentó acceder 10 veces al puerto 22.
</p>
</div>
</div>
</div>
<div id="outline-container-org1de198c" class="outline-2">
<h2 id="org1de198c">Resumen de Detalles Críticos</h2>
<div class="outline-text-2" id="text-org1de198c">
<p>
Los logs de UFW contienen información valiosa para la seguridad. Los detalles críticos a observar incluyen:
</p>
<ul class="org-ul">
<li><b><b>Acciones</b></b>: Bloqueos (`UFW BLOCK`) o permisos (`UFW ALLOW`).</li>
<li><b><b>Direcciones IP</b></b>: Identificar IPs sospechosas o repetitivas.</li>
<li><b><b>Puertos de destino</b></b>: Puertos comunes como 22 (SSH), 80 (HTTP) o 443 (HTTPS) son objetivos frecuentes.</li>
<li><b><b>Protocolos</b></b>: TCP, UDP, etc., para entender el tipo de tráfico.</li>
<li><b><b>Frecuencia</b></b>: Intentos repetidos pueden indicar un ataque.</li>
</ul>
</div>
</div>
<div id="outline-container-orgc09079d" class="outline-2">
<h2 id="orgc09079d">Tabla de Detalles Críticos en Formato `.org`</h2>
<div class="outline-text-2" id="text-orgc09079d">
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Aspecto</th>
<th scope="col" class="org-left">Descripción</th>
<th scope="col" class="org-left">Comando de Ejemplo</th>
<th scope="col" class="org-left">Acción Recomendada</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Acción del Firewall</td>
<td class="org-left">Indica si el tráfico fue bloqueado o permitido</td>
<td class="org-left">`grep "UFW BLOCK" /var/log/ufw.log`</td>
<td class="org-left">Investigar bloqueos frecuentes</td>
</tr>

<tr>
<td class="org-left">IP de Origen (SRC)</td>
<td class="org-left">Dirección IP que envía el tráfico</td>
<td class="org-left">`awk '<i>UFW BLOCK</i> {print $13}' /var/log/ufw.log</td>
<td class="org-left">sort</td>
<td class="org-left">uniq`</td>
<td class="org-left">Bloquear IPs sospechosas con UFW</td>
</tr>

<tr>
<td class="org-left">Puerto de Destino (DPT)</td>
<td class="org-left">Puerto al que se dirige el tráfico</td>
<td class="org-left">`grep "DPT=22" /var/log/ufw.log`</td>
<td class="org-left">Monitorear puertos sensibles (22, 80, etc.)</td>
</tr>

<tr>
<td class="org-left">Protocolo</td>
<td class="org-left">Tipo de protocolo (TCP, UDP, etc.)</td>
<td class="org-left">`grep "PROTO=TCP" /var/log/ufw.log`</td>
<td class="org-left">Identificar protocolos inusuales</td>
</tr>

<tr>
<td class="org-left">Frecuencia</td>
<td class="org-left">Número de eventos por IP o puerto</td>
<td class="org-left">`grep "UFW BLOCK" /var/log/ufw.log</td>
<td class="org-left">wc -l`</td>
<td class="org-left">Configurar alertas para alta frecuencia</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orge4759f7" class="outline-2">
<h2 id="orge4759f7">Consejos para Emacs con Esteroides</h2>
<div class="outline-text-2" id="text-orge4759f7">
<p>
Si usas Emacs, puedes optimizar el análisis de logs:
</p>
<ul class="org-ul">
<li><b><b>Modo `org-mode`</b></b>: Copia la tabla anterior en un archivo `.org` para organizarla.</li>
<li><b><b>Modo `shell`</b></b>: Usa `M-x shell` para ejecutar comandos como `grep` o `awk` desde Emacs.</li>
<li><b><b>Dired</b></b>: Navega por `/var/log/` con `C-x C-f /var/log/ufw.log` y usa `dired-mode` para abrir logs.</li>
<li><b><b>Tramp</b></b>: Accede a logs en servidores remotos con `/ssh:user@host:/var/log/ufw.log`.</li>
</ul>
</div>
</div>
<div id="outline-container-orgb41186d" class="outline-2">
<h2 id="orgb41186d">Conclusión</h2>
<div class="outline-text-2" id="text-orgb41186d">
<p>
Analizar los logs de UFW te permite mantener tu sistema seguro y detectar problemas rápidamente. Con herramientas como `grep`, `awk` y Emacs, puedes filtrar, resumir y organizar la información de manera eficiente. Usa la tabla `.org` para mantener un registro claro de los detalles críticos y automatiza el monitoreo para ahorrar tiempo.
</p>

<div class="org-src-container">
<pre class="src src-bash"><code><span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Script para monitorear intentos al puerto 22 en tiempo real</span>
sudo tail -f /var/log/ufw.log | grep <span style="color: #a44185;">"DPT=22"</span>
</code></pre>
</div>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-ufw.html">ufw</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-firewall.html">firewall</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-logs.html">logs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-sysadmin.html">sysadmin</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-ubuntu.html">ubuntu</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-emacs.html">emacs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-org-mode.html">org-mode</a> </div>]]></description>
  <category><![CDATA[ufw]]></category>
  <category><![CDATA[firewall]]></category>
  <category><![CDATA[logs]]></category>
  <category><![CDATA[sysadmin]]></category>
  <category><![CDATA[ubuntu]]></category>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[org-mode]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-05-30--an-lisis-del-log-del-firewall-ufw-en-ubuntu-gu-a-completa-para-usuarios.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-05-30--an-lisis-del-log-del-firewall-ufw-en-ubuntu-gu-a-completa-para-usuarios.html</guid>
  <pubDate>Fri, 30 May 2025 06:43:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Documentación de Búsqueda de Logs del Sistema con Script]]></title>
  <description><![CDATA[
<div id="outline-container-orgc0541d6" class="outline-2">
<h2 id="orgc0541d6">Introducción</h2>
<div class="outline-text-2" id="text-orgc0541d6">
<p>
Este documento contiene un script en Bash diseñado para buscar archivos de log del sistema en una laptop con Linux. El script explora el directorio `/var/log` en busca de archivos con extensión `.log` y recopila la siguiente información para cada archivo:
</p>
<ul class="org-ul">
<li><b>Nombre del Archivo</b>: La ruta completa del archivo de log.</li>
<li><b>Tamaño</b>: El tamaño del archivo en formato legible (por ejemplo, KB, MB).</li>
<li><b>Última Modificación</b>: La fecha y hora de la última modificación.</li>
<li><b>Crítico</b>: Indica si el log es potencialmente crítico ("Sí" o "No"), basado en palabras clave como "error", "fail", "auth" o "syslog".</li>
</ul>

<p>
Los resultados se ordenan por tamaño de mayor a menor y se presentan en una tabla Org-mode. Los logs marcados como críticos deben revisarse para evaluar posibles problemas del sistema o eventos de seguridad.
</p>
</div>
</div>
<div id="outline-container-orgad85b12" class="outline-2">
<h2 id="orgad85b12">Script en Bash</h2>
<div class="outline-text-2" id="text-orgad85b12">
<p>
El siguiente script en Bash busca archivos de log, los ordena por tamaño y determina si son críticos. Se ha corregido para evitar errores de sintaxis y garantizar compatibilidad.
</p>

<div class="org-src-container">
<pre class="src src-bash"><code><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Definir el directorio de b&#250;squeda de logs</span>
<span style="color: #1857a4;">LOG_DIR</span>=<span style="color: #a44185;">"/var/log"</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Verificar si el directorio existe</span>
<span style="color: #219fd5; font-style: italic;">if</span> [ <span style="color: #219fd5; font-weight: bold;">!</span> -d <span style="color: #a44185;">"$LOG_DIR"</span> ]; <span style="color: #219fd5; font-style: italic;">then</span>
  <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Error: El directorio $LOG_DIR no existe."</span>
  <span style="color: #219fd5; font-style: italic;">exit</span> 1
<span style="color: #219fd5; font-style: italic;">fi</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Imprimir encabezado de la tabla Org-mode</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"| Nombre del Archivo | Tama&#241;o | &#218;ltima Modificaci&#243;n | Cr&#237;tico |"</span>
<span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"|--------------------|--------|---------------------|---------|"</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Buscar archivos .log, recopilar informaci&#243;n, ordenar por tama&#241;o</span>
find <span style="color: #a44185;">"$LOG_DIR"</span> -type f -name <span style="color: #a44185;">"*.log"</span> -exec /bin/bash -c <span style="color: #a44185;">'</span>
<span style="color: #a44185;">  for file; do</span>
<span style="color: #a44185;">    # Obtener tama&#241;o en formato legible</span>
<span style="color: #a44185;">    size=$(</span><span style="color: #219fd5; font-weight: bold;">ls -lh "$file" | awk "{print \$5}"</span><span style="color: #a44185;">)</span>
<span style="color: #a44185;">    # Obtener tama&#241;o en bytes para ordenar</span>
<span style="color: #a44185;">    size_bytes=$(</span><span style="color: #219fd5; font-weight: bold;">ls -l "$file" | awk "{print \$5}"</span><span style="color: #a44185;">)</span>
<span style="color: #a44185;">    # Obtener fecha de &#250;ltima modificaci&#243;n</span>
<span style="color: #a44185;">    last_modified=$(</span><span style="color: #219fd5; font-weight: bold;">stat -c %y "$file" | cut -d. -f1</span><span style="color: #a44185;">)</span>
<span style="color: #a44185;">    # Determinar si el log es cr&#237;tico usando grep</span>
<span style="color: #a44185;">    if echo "$file" | grep -E -i "error|fail|auth|syslog" &gt;/dev/null; then</span>
<span style="color: #a44185;">      critical="S&#237;"</span>
<span style="color: #a44185;">    else</span>
<span style="color: #a44185;">      critical="No"</span>
<span style="color: #a44185;">    fi</span>
<span style="color: #a44185;">    # Imprimir fila con tama&#241;o en bytes para ordenar</span>
<span style="color: #a44185;">    echo "$size_bytes|$file|$size|$last_modified|$critical"</span>
<span style="color: #a44185;">  done</span>
<span style="color: #a44185;">'</span> bash {} + | sort -t<span style="color: #a44185;">"|"</span> -k1 -nr | <span style="color: #219fd5; font-style: italic;">while</span> <span style="color: #1857a4;">IFS</span>=<span style="color: #a44185;">"|"</span> read -r size_bytes file size last_modified critical; <span style="color: #219fd5; font-style: italic;">do</span>
  <span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Imprimir fila en formato Org-mode, sin el tama&#241;o en bytes</span>
  <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"| $file | $size | $last_modified | $critical |"</span>
<span style="color: #219fd5; font-style: italic;">done</span>
</code></pre>
</div>

<p>
Para ejecutar el script:
</p>
<ol class="org-ol">
<li>Guarde el script como `buscar<sub>logs.sh</sub>`.</li>
<li>Haga el script ejecutable: `chmod +x buscar<sub>logs.sh</sub>`.</li>
<li>Ejecute el script con: `sudo bash ./buscar<sub>logs.sh</sub> &gt; resultados.org`.</li>
</ol>
</div>
</div>
<div id="outline-container-org5f646ad" class="outline-2">
<h2 id="org5f646ad">Resultados</h2>
<div class="outline-text-2" id="text-org5f646ad">
<p>
La siguiente tabla contiene los resultados del script, ordenados por tamaño de mayor a menor. Los logs marcados como "Crítico: Sí" deben revisarse para una evaluación posterior.
</p>

<div class="org-src-container">
<pre class="src src-org"><code><span style="color: #a44185;">| Nombre del Archivo | Tama&#241;o | &#218;ltima Modificaci&#243;n | Cr&#237;tico |</span>
<span style="color: #a44185;">|--------------------|--------|---------------------|---------|</span>
</code></pre>
</div>
</div>
</div>
<div id="outline-container-org763877e" class="outline-2">
<h2 id="org763877e">Notas</h2>
<div class="outline-text-2" id="text-org763877e">
<ul class="org-ul">
<li><b><b>Ubicación</b></b>: El script busca en `/var/log`. Modifique `LOG<sub>DIR</sub>` en el script para incluir otros directorios si es necesario.</li>
<li><b><b>Permisos</b></b>: Los archivos de log en `/var/log` a menudo requieren permisos de superusuario. Ejecute el script con `sudo bash ./buscar<sub>logs.sh</sub>` para evitar errores de permisos.</li>
<li><b><b>Logs Críticos</b></b>: Los logs marcados como "Crítico: Sí" contienen palabras clave como "error", "fail", "auth" o "syslog". Revise estos archivos para identificar problemas del sistema o eventos de seguridad.</li>
<li><b><b>Actualización de Resultados</b></b>: Copie la salida del script (`resultados.org`) en la sección <b>Resultados</b> para actualizar la tabla.</li>
<li><b><b>Corrección de Errores</b></b>: Se ha reemplazado la sintaxis Bash específica (`=~`) con `grep` para evitar errores de compatibilidad con `sh`.</li>
<li><b><b>Ejecución con Bash</b></b>: Use `sudo bash ./buscar<sub>logs.sh</sub>` en lugar de `sudo ./buscar<sub>logs.sh</sub>` si persisten problemas de sintaxis, para garantizar que se use Bash.</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-logs.html">logs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-sistema.html">sistema</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">linux</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> </div>]]></description>
  <category><![CDATA[logs]]></category>
  <category><![CDATA[sistema]]></category>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[bash]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-05-28-documentaci-n-de-b-squeda-de-logs-del-sistema-con-script.html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-05-28-documentaci-n-de-b-squeda-de-logs-del-sistema-con-script.html</guid>
  <pubDate>Wed, 28 May 2025 12:44:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Tutorial de Seguridad en Linux: Mínimo de Protección ante Ataques Informáticos (II)]]></title>
  <description><![CDATA[
<div id="outline-container-org8b21ed4" class="outline-2">
<h2 id="org8b21ed4">Capítulo 2: Automatización y Análisis Avanzado</h2>
<div class="outline-text-2" id="text-org8b21ed4">
</div>
<div id="outline-container-orgc67696a" class="outline-3">
<h3 id="orgc67696a">Objetivos</h3>
<div class="outline-text-3" id="text-orgc67696a">
<ul class="org-ul">
<li>Automatizar tareas de seguridad con scripts.</li>
<li>Analizar logs para detectar patrones sospechosos.</li>
<li>Generar reportes de seguridad.</li>
</ul>
</div>
</div>
<div id="outline-container-orgd0bea96" class="outline-3">
<h3 id="orgd0bea96">Paso 1: Automatizar Tareas con Scripts en Bash</h3>
<div class="outline-text-3" id="text-orgd0bea96">
<p>
Crea un script para automatizar la revisión de logs y el bloqueo de IPs sospechosas.
</p>

<ol class="org-ol">
<li><p>
Script `security<sub>monitor.sh</sub>`:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>
<span style="color: #1857a4;">LOG_FILE</span>=<span style="color: #a44185;">"/var/log/auth.log"</span>
<span style="color: #1857a4;">BAN_LIST</span>=<span style="color: #a44185;">"/etc/fail2ban/jail.local"</span>

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Buscar IPs con m&#250;ltiples intentos fallidos</span>
<span style="color: #1857a4;">SUSPICIOUS_IPS</span>=$(<span style="color: #219fd5; font-weight: bold;">grep "Failed password" $LOG_FILE | awk '{print $(NF-3</span><span style="color: #a44185;">)}'</span> | sort | uniq -c | awk <span style="color: #a44185;">'$1 &gt; 3 {print $2}'</span>)

<span style="color: #8195b0; font-style: italic;"># </span><span style="color: #8195b0; font-style: italic;">Bloquear IPs sospechosas</span>
<span style="color: #219fd5; font-style: italic;">for</span> IP<span style="color: #219fd5; font-style: italic;"> in</span> $<span style="color: #1857a4;">SUSPICIOUS_IPS</span>; <span style="color: #219fd5; font-style: italic;">do</span>
    <span style="color: #dc3eb7;">echo</span> <span style="color: #a44185;">"Bloqueando IP: $IP"</span>
    sudo fail2ban-client set sshd banip $<span style="color: #1857a4;">IP</span>
<span style="color: #219fd5; font-style: italic;">done</span>
</pre>
</div></li>

<li><p>
Ejecutar el script diariamente con `cron`:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo crontab -e
</pre>
</div>
<p>
Añade la siguiente línea:
</p>
<div class="org-src-container">
<pre class="src src-nil">0 0 * * * /ruta/al/script/security_monitor.sh
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-orgd476327" class="outline-3">
<h3 id="orgd476327">Paso 2: Analizar Logs con Python</h3>
<div class="outline-text-3" id="text-orgd476327">
<p>
Crea un script en Python para analizar logs y generar reportes.
</p>

<ol class="org-ol">
<li><p>
Script `log<sub>analyzer.py</sub>`:
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/usr/bin/env python3</span>
<span style="color: #219fd5; font-style: italic;">import</span> re
<span style="color: #219fd5; font-style: italic;">from</span> collections <span style="color: #219fd5; font-style: italic;">import</span> Counter

<span style="color: #1857a4;">LOG_FILE</span> = <span style="color: #a44185;">"/var/log/auth.log"</span>
<span style="color: #1857a4;">REPORT_FILE</span> = <span style="color: #a44185;">"/var/log/security_report.txt"</span>

<span style="color: #219fd5; font-style: italic;">def</span> <span style="color: #dc3eb7;">analyze_logs</span>():
    <span style="color: #219fd5; font-style: italic;">with</span> <span style="color: #dc3eb7;">open</span>(LOG_FILE, <span style="color: #a44185;">"r"</span>) <span style="color: #219fd5; font-style: italic;">as</span> <span style="color: #dc3eb7;">file</span>:
        <span style="color: #1857a4;">logs</span> = <span style="color: #dc3eb7;">file</span>.readlines()

    <span style="color: #1857a4;">failed_attempts</span> = Counter()
    <span style="color: #219fd5; font-style: italic;">for</span> log <span style="color: #219fd5; font-style: italic;">in</span> logs:
        <span style="color: #219fd5; font-style: italic;">if</span> <span style="color: #a44185;">"Failed password"</span> <span style="color: #219fd5; font-style: italic;">in</span> log:
            <span style="color: #1857a4;">ip</span> = re.search(r<span style="color: #a44185;">"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b"</span>, log).group()
            <span style="color: #1857a4;">failed_attempts</span>[ip] += 1

    <span style="color: #219fd5; font-style: italic;">with</span> <span style="color: #dc3eb7;">open</span>(REPORT_FILE, <span style="color: #a44185;">"w"</span>) <span style="color: #219fd5; font-style: italic;">as</span> report:
        report.write(<span style="color: #a44185;">"Reporte de Seguridad</span><span style="color: #2f86d2;">\n</span><span style="color: #a44185;">"</span>)
        report.write(<span style="color: #a44185;">"===================</span><span style="color: #2f86d2;">\n</span><span style="color: #a44185;">"</span>)
        <span style="color: #219fd5; font-style: italic;">for</span> ip, count <span style="color: #219fd5; font-style: italic;">in</span> failed_attempts.most_common():
            report.write(f<span style="color: #a44185;">"IP: </span>{ip}<span style="color: #a44185;"> - Intentos fallidos: </span>{count}<span style="color: #2f86d2;">\n</span><span style="color: #a44185;">"</span>)

<span style="color: #219fd5; font-style: italic;">if</span> <span style="color: #dc3eb7;">__name__</span> == <span style="color: #a44185;">"__main__"</span>:
    analyze_logs()
</pre>
</div></li>

<li><p>
Ejecutar el script:
</p>
<div class="org-src-container">
<pre class="src src-sh">python3 /ruta/al/script/log_analyzer.py
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-orgb0c2406" class="outline-3">
<h3 id="orgb0c2406">Paso 3: Generar Reportes de Seguridad</h3>
<div class="outline-text-3" id="text-orgb0c2406">
<p>
Usa los scripts anteriores para generar reportes diarios.
</p>

<ol class="org-ol">
<li><p>
Combinar ambos scripts en un solo archivo:
</p>
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #8195b0; font-style: italic;">#</span><span style="color: #8195b0; font-style: italic;">!/bin/</span><span style="color: #219fd5; font-style: italic;">bash</span>
/ruta/al/script/security_monitor.sh
python3 /ruta/al/script/log_analyzer.py
</pre>
</div></li>

<li><p>
Programar la ejecución con `cron`:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo crontab -e
</pre>
</div>
<p>
Añade la siguiente línea:
</p>
<div class="org-src-container">
<pre class="src src-nil">0 1 * * * /ruta/al/script/security_report.sh
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-org963fd93" class="outline-3">
<h3 id="org963fd93">Resultados Esperados</h3>
<div class="outline-text-3" id="text-org963fd93">
<ul class="org-ul">
<li>Tareas de seguridad automatizadas.</li>
<li>Logs analizados en busca de patrones sospechosos.</li>
<li>Reportes de seguridad generados diariamente.</li>
</ul>

<p>
&#x2014;
</p>
</div>
</div>
</div>
<div id="outline-container-org35e397b" class="outline-2">
<h2 id="org35e397b">Conclusión</h2>
<div class="outline-text-2" id="text-org35e397b">
<p>
Con estos dos capítulos, has implementado un mínimo de seguridad en tu entorno Linux. Desde la configuración básica del firewall hasta la automatización de tareas y el análisis avanzado de logs, este tutorial te proporciona las herramientas necesarias para proteger tu sistema ante ataques informáticos. ¡Ahora es tu turno de adaptar y mejorar estas técnicas según tus necesidades!
</p>
</div>
</div>
<div id="outline-container-org358fc11" class="outline-2">
<h2 id="org358fc11">Recursos Adicionales</h2>
<div class="outline-text-2" id="text-org358fc11">
<ul class="org-ul">
<li><a href="https://help.ubuntu.com/community/UFW">Documentación de UFW</a></li>
<li><a href="https://www.fail2ban.org/">Documentación de Fail2Ban</a></li>
<li><a href="https://docs.python.org/3/">Documentación de Python</a></li>
</ul>

<p>
```
</p>

<p>
&#x2014;
</p>

<p>
### Características del Tutorial
</p>

<ol class="org-ol">
<li><b><b>Estructura Clara</b></b>: Dividido en 2 capítulos con objetivos, pasos y resultados.</li>
<li><b><b>Scripts Prácticos</b></b>: Incluye scripts en Bash y Python para automatizar tareas.</li>
<li><b><b>Logs y Reportes</b></b>: Enseña a monitorear logs y generar reportes de seguridad.</li>
<li><b><b>Recursos Adicionales</b></b>: Proporciona enlaces a documentación oficial.</li>
</ol>

<p>
&#x2014;
</p>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-seguridad.html">seguridad</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">linux</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-python.html">python</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-firewall.html">firewall</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-logs.html">logs</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-tutoriales.html">tutoriales</a> </div>]]></description>
  <category><![CDATA[seguridad]]></category>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[python]]></category>
  <category><![CDATA[firewall]]></category>
  <category><![CDATA[logs]]></category>
  <category><![CDATA[tutoriales]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-18-tutorial-de-seguridad-en-linux:-m%C3%ADnimo-de-protecci%C3%B3n-ante-ataques-inform%C3%A1ticos-(ii).html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-18-tutorial-de-seguridad-en-linux:-m%C3%ADnimo-de-protecci%C3%B3n-ante-ataques-inform%C3%A1ticos-(ii).html</guid>
  <pubDate>Tue, 18 Mar 2025 20:43:00 +0100</pubDate>
</item>
<item>
  <title><![CDATA[Tutorial de Seguridad en Linux: Mínimo de Protección ante Ataques Informáticos (I)]]></title>
  <description><![CDATA[
<p>
AUTHOR: Tu Nombre
</p>
<div id="outline-container-orgac7d834" class="outline-2">
<h2 id="orgac7d834">Capítulo 1: Configuración Básica de Seguridad</h2>
<div class="outline-text-2" id="text-orgac7d834">
</div>
<div id="outline-container-org6aed3b4" class="outline-3">
<h3 id="org6aed3b4">Objetivos</h3>
<div class="outline-text-3" id="text-org6aed3b4">
<ul class="org-ul">
<li>Configurar un firewall básico.</li>
<li>Deshabilitar servicios innecesarios.</li>
<li>Monitorear logs del sistema.</li>
<li>Detectar intentos de acceso no autorizados.</li>
</ul>
</div>
</div>
<div id="outline-container-org6232592" class="outline-3">
<h3 id="org6232592">Paso 1: Configurar un Firewall Básico con `ufw`</h3>
<div class="outline-text-3" id="text-org6232592">
<p>
`ufw` (Uncomplicated Firewall) es una herramienta sencilla para gestionar reglas de firewall en Linux.
</p>

<ol class="org-ol">
<li><p>
Instalar `ufw`:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo apt update &amp;&amp; sudo apt install ufw -y
</pre>
</div></li>

<li><p>
Habilitar el firewall:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo ufw enable
</pre>
</div></li>

<li>Configurar reglas básicas:
<ul class="org-ul">
<li><p>
Permitir SSH:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo ufw allow ssh
</pre>
</div></li>
<li><p>
Permitir HTTP/HTTPS:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo ufw allow http
sudo ufw allow https
</pre>
</div></li>
<li><p>
Denegar todo el tráfico por defecto:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo ufw default deny incoming
sudo ufw default allow outgoing
</pre>
</div></li>
</ul></li>

<li><p>
Verificar el estado del firewall:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo ufw status verbose
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-orga4c3880" class="outline-3">
<h3 id="orga4c3880">Paso 2: Deshabilitar Servicios Innecesarios</h3>
<div class="outline-text-3" id="text-orga4c3880">
<p>
Los servicios innecesarios pueden ser un vector de ataque. Deshabilita los que no uses.
</p>

<ol class="org-ol">
<li><p>
Listar servicios activos:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl list-unit-files --type=service | grep enabled
</pre>
</div></li>

<li><p>
Deshabilitar un servicio (por ejemplo, `apache2`):
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl stop apache2
sudo systemctl disable apache2
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-org00217f7" class="outline-3">
<h3 id="org00217f7">Paso 3: Monitorear Logs del Sistema</h3>
<div class="outline-text-3" id="text-org00217f7">
<p>
Los logs son esenciales para detectar actividad sospechosa.
</p>

<ol class="org-ol">
<li><p>
Ver logs de autenticación:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo tail -f /var/log/auth.log
</pre>
</div></li>

<li><p>
Ver logs del firewall:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo tail -f /var/log/ufw.log
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-org91d8990" class="outline-3">
<h3 id="org91d8990">Paso 4: Detectar Intentos de Acceso No Autorizados</h3>
<div class="outline-text-3" id="text-org91d8990">
<p>
Usa `fail2ban` para bloquear IPs que realicen intentos de acceso fallidos.
</p>

<ol class="org-ol">
<li><p>
Instalar `fail2ban`:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo apt install fail2ban -y
</pre>
</div></li>

<li><p>
Configurar `fail2ban` para SSH:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo nano /etc/fail2ban/jail.local
</pre>
</div>
<p>
Añade lo siguiente:
</p>
<div class="org-src-container">
<pre class="src src-nil">[sshd]
enabled = true
maxretry = 3
bantime = 3600
</pre>
</div></li>

<li><p>
Reiniciar `fail2ban`:
</p>
<div class="org-src-container">
<pre class="src src-sh">sudo systemctl restart fail2ban
</pre>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-orgf3602c2" class="outline-3">
<h3 id="orgf3602c2">Resultados Esperados</h3>
<div class="outline-text-3" id="text-orgf3602c2">
<ul class="org-ul">
<li>Firewall activo y configurado.</li>
<li>Servicios innecesarios deshabilitados.</li>
<li>Logs monitoreados en tiempo real.</li>
<li>Intentos de acceso no autorizados bloqueados.</li>
</ul>

<p>
&#x2014;
</p>
</div>
</div>
</div>
<div class="taglist"><a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tags.html">Categoría</a>: <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-seguridad.html">seguridad</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-linux.html">linux</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-bash.html">bash</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-python.html">python</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-firewall.html">firewall</a> <a href="https://mcasrom.github.io/Blogging-con-Emacs-y-AI/tag-logs.html">logs</a> </div>]]></description>
  <category><![CDATA[seguridad]]></category>
  <category><![CDATA[linux]]></category>
  <category><![CDATA[bash]]></category>
  <category><![CDATA[python]]></category>
  <category><![CDATA[firewall]]></category>
  <category><![CDATA[logs]]></category>
  <link>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-18-tutorial-de-seguridad-en-linux:-m%C3%ADnimo-de-protecci%C3%B3n-ante-ataques-inform%C3%A1ticos-(i).html</link>
  <guid>https://mcasrom.github.io/Blogging-con-Emacs-y-AI/2025-03-18-tutorial-de-seguridad-en-linux:-m%C3%ADnimo-de-protecci%C3%B3n-ante-ataques-inform%C3%A1ticos-(i).html</guid>
  <pubDate>Tue, 18 Mar 2025 20:40:00 +0100</pubDate>
</item>
</channel>
</rss>
